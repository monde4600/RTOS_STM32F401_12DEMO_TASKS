
RTOS_TASK9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004620  08004620  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004628  08004628  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000798c  20000018  08004648  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200079a4  08004648  000279a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008df1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d23  00000000  00000000  00028e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ac7  00000000  00000000  0002bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f8f  00000000  00000000  0004165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7f0  00000000  00000000  0004b5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020fc  00000000  00000000  000d5e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045c4 	.word	0x080045c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	080045c4 	.word	0x080045c4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:

xSemaphoreHandle Button2Semaphore = NULL;


int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fa91 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f861 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8bd 	bl	8000670 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	 /* Creation of the Task*/
	 xTaskHandle PushHandle  = NULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	 xTaskCreate(PushButton,"Push Button",85,NULL,PushButtonPr,&PushHandle);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2301      	movs	r3, #1
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	2255      	movs	r2, #85	; 0x55
 8000508:	4922      	ldr	r1, [pc, #136]	; (8000594 <main+0xb0>)
 800050a:	4823      	ldr	r0, [pc, #140]	; (8000598 <main+0xb4>)
 800050c:	f001 ffbe 	bl	800248c <xTaskCreate>

	 /* Creation of the Task*/
	 xTaskHandle PushHandle2  = NULL;
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
	 xTaskCreate(PushButton2,"Push Button 2",85,NULL,PushButton2Pr,&PushHandle2);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2302      	movs	r3, #2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	2255      	movs	r2, #85	; 0x55
 8000522:	491e      	ldr	r1, [pc, #120]	; (800059c <main+0xb8>)
 8000524:	481e      	ldr	r0, [pc, #120]	; (80005a0 <main+0xbc>)
 8000526:	f001 ffb1 	bl	800248c <xTaskCreate>


	 xTaskHandle LedHandle = NULL ;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
	 xTaskCreate(Led,"Led ",85,NULL,LedPr,&LedHandle);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2302      	movs	r3, #2
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	2255      	movs	r2, #85	; 0x55
 800053a:	491a      	ldr	r1, [pc, #104]	; (80005a4 <main+0xc0>)
 800053c:	481a      	ldr	r0, [pc, #104]	; (80005a8 <main+0xc4>)
 800053e:	f001 ffa5 	bl	800248c <xTaskCreate>


	 /*Create Semaphore for the Button */
	 vSemaphoreCreateBinary(ButtonSemaphore);
 8000542:	2203      	movs	r2, #3
 8000544:	2100      	movs	r1, #0
 8000546:	2001      	movs	r0, #1
 8000548:	f001 fafa 	bl	8001b40 <xQueueGenericCreate>
 800054c:	4603      	mov	r3, r0
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <main+0xc8>)
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xc8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <main+0x84>
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <main+0xc8>)
 800055c:	6818      	ldr	r0, [r3, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	f001 fb5a 	bl	8001c1c <xQueueGenericSend>

	 /*Create Semaphore for the Button */
	 vSemaphoreCreateBinary(Button2Semaphore);
 8000568:	2203      	movs	r2, #3
 800056a:	2100      	movs	r1, #0
 800056c:	2001      	movs	r0, #1
 800056e:	f001 fae7 	bl	8001b40 <xQueueGenericCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <main+0xcc>)
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <main+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <main+0xaa>
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0xcc>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	f001 fb47 	bl	8001c1c <xQueueGenericSend>

	/*start Scheduler */
	vTaskStartScheduler();
 800058e:	f002 f98d 	bl	80028ac <vTaskStartScheduler>




  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0xae>
 8000594:	080045dc 	.word	0x080045dc
 8000598:	08000755 	.word	0x08000755
 800059c:	080045e8 	.word	0x080045e8
 80005a0:	080007e5 	.word	0x080007e5
 80005a4:	080045f8 	.word	0x080045f8
 80005a8:	08000879 	.word	0x08000879
 80005ac:	20000034 	.word	0x20000034
 80005b0:	20000038 	.word	0x20000038

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fff6 	bl	80045b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xb4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xb4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xb4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <SystemClock_Config+0xb8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <SystemClock_Config+0xb8>)
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <SystemClock_Config+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fd06 	bl	8001038 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000632:	f000 f889 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800063a:	2301      	movs	r3, #1
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ff69 	bl	8001528 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800065c:	f000 f874 	bl	8000748 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_GPIO_Init+0xcc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a2b      	ldr	r2, [pc, #172]	; (800073c <MX_GPIO_Init+0xcc>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_GPIO_Init+0xcc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <MX_GPIO_Init+0xcc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a24      	ldr	r2, [pc, #144]	; (800073c <MX_GPIO_Init+0xcc>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_GPIO_Init+0xcc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_GPIO_Init+0xcc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1d      	ldr	r2, [pc, #116]	; (800073c <MX_GPIO_Init+0xcc>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_GPIO_Init+0xcc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2120      	movs	r1, #32
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <MX_GPIO_Init+0xd0>)
 80006e0:	f000 fc76 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <MX_GPIO_Init+0xd4>)
 80006fa:	f000 facd 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0xd0>)
 8000712:	f000 fac1 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000716:	2320      	movs	r3, #32
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xd0>)
 800072e:	f000 fab3 	bl	8000c98 <HAL_GPIO_Init>

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000
 8000744:	40020800 	.word	0x40020800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <PushButton>:
}
#endif /* USE_FULL_ASSERT */



void PushButton(void * pvparam){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

	 portTickType Freq = 100;
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 8000760:	f002 fa00 	bl	8002b64 <xTaskGetTickCount>
 8000764:	4603      	mov	r3, r0
 8000766:	60bb      	str	r3, [r7, #8]
	 while (1){
		 /* if the Push Button is Pressed */
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 8000768:	2101      	movs	r1, #1
 800076a:	481a      	ldr	r0, [pc, #104]	; (80007d4 <PushButton+0x80>)
 800076c:	f000 fc18 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d127      	bne.n	80007c6 <PushButton+0x72>

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 if(pdTRUE == xSemaphoreTake(ButtonSemaphore,100)){
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <PushButton+0x84>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2164      	movs	r1, #100	; 0x64
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fc2b 	bl	8001fd8 <xQueueSemaphoreTake>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d11e      	bne.n	80007c6 <PushButton+0x72>

				 vTaskDelay(1000);
 8000788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078c:	f002 f85a 	bl	8002844 <vTaskDelay>

				 while(pdFALSE == xSemaphoreTake(Button2Semaphore,100));
 8000790:	bf00      	nop
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <PushButton+0x88>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2164      	movs	r1, #100	; 0x64
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fc1d 	bl	8001fd8 <xQueueSemaphoreTake>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f6      	beq.n	8000792 <PushButton+0x3e>

				 /*Change the State **/
				 ButtonState = 0;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <PushButton+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

				 /**Give the Semaphore */

				 xSemaphoreGive(Button2Semaphore);
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <PushButton+0x88>)
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	f001 fa32 	bl	8001c1c <xQueueGenericSend>

				 xSemaphoreGive(ButtonSemaphore);
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <PushButton+0x84>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	f001 fa2b 	bl	8001c1c <xQueueGenericSend>
		 }

		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	68f9      	ldr	r1, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 ffbb 	bl	8002748 <xTaskDelayUntil>
		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 80007d2:	e7c9      	b.n	8000768 <PushButton+0x14>
 80007d4:	40020000 	.word	0x40020000
 80007d8:	20000034 	.word	0x20000034
 80007dc:	20000038 	.word	0x20000038
 80007e0:	20000000 	.word	0x20000000

080007e4 <PushButton2>:
	 }

}


void PushButton2(void * pvparam){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 100;
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 80007f0:	f002 f9b8 	bl	8002b64 <xTaskGetTickCount>
 80007f4:	4603      	mov	r3, r0
 80007f6:	60bb      	str	r3, [r7, #8]
	 while (1){
		 /* if the Push Button is Pressed */
		 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 80007f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fc:	481a      	ldr	r0, [pc, #104]	; (8000868 <PushButton2+0x84>)
 80007fe:	f000 fbcf 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f7      	bne.n	80007f8 <PushButton2+0x14>

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 if(pdTRUE == xSemaphoreTake(Button2Semaphore,100)){
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <PushButton2+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2164      	movs	r1, #100	; 0x64
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fbe2 	bl	8001fd8 <xQueueSemaphoreTake>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d11e      	bne.n	8000858 <PushButton2+0x74>

				 vTaskDelay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081e:	f002 f811 	bl	8002844 <vTaskDelay>

				 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100));
 8000822:	bf00      	nop
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <PushButton2+0x8c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2164      	movs	r1, #100	; 0x64
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fbd4 	bl	8001fd8 <xQueueSemaphoreTake>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f6      	beq.n	8000824 <PushButton2+0x40>

				 /*Change the State **/
				 ButtonState2 = 0;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <PushButton2+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

				 /**Give the Semaphore */

				 xSemaphoreGive(ButtonSemaphore);
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <PushButton2+0x8c>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	f001 f9e9 	bl	8001c1c <xQueueGenericSend>

				 xSemaphoreGive(Button2Semaphore);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <PushButton2+0x88>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	2300      	movs	r3, #0
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	f001 f9e2 	bl	8001c1c <xQueueGenericSend>


		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	4618      	mov	r0, r3
 8000860:	f001 ff72 	bl	8002748 <xTaskDelayUntil>
		 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8000864:	e7c8      	b.n	80007f8 <PushButton2+0x14>
 8000866:	bf00      	nop
 8000868:	40020800 	.word	0x40020800
 800086c:	20000038 	.word	0x20000038
 8000870:	20000034 	.word	0x20000034
 8000874:	20000001 	.word	0x20000001

08000878 <Led>:

}
}


void Led(void * pvparam){
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 100;
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 8000884:	f002 f96e 	bl	8002b64 <xTaskGetTickCount>
 8000888:	4603      	mov	r3, r0
 800088a:	60bb      	str	r3, [r7, #8]
	 while (1){
		 /* if the Push Button is Pressed */

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 if(pdTRUE == xSemaphoreTake(ButtonSemaphore,100)){
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <Led+0x90>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2164      	movs	r1, #100	; 0x64
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fba0 	bl	8001fd8 <xQueueSemaphoreTake>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d1f6      	bne.n	800088c <Led+0x14>

				 vTaskDelay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a2:	f001 ffcf 	bl	8002844 <vTaskDelay>

				 while(pdFALSE == xSemaphoreTake(Button2Semaphore,100));
 80008a6:	bf00      	nop
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <Led+0x94>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2164      	movs	r1, #100	; 0x64
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fb92 	bl	8001fd8 <xQueueSemaphoreTake>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f6      	beq.n	80008a8 <Led+0x30>

				 if (ButtonState == 0 && ButtonState2 == 0){
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <Led+0x98>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10d      	bne.n	80008de <Led+0x66>
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <Led+0x9c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d109      	bne.n	80008de <Led+0x66>
					 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008ca:	2120      	movs	r1, #32
 80008cc:	4812      	ldr	r0, [pc, #72]	; (8000918 <Led+0xa0>)
 80008ce:	f000 fb98 	bl	8001002 <HAL_GPIO_TogglePin>

					 ButtonState = 1;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <Led+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
					 ButtonState2 = 1;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <Led+0x9c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
				 }

				 /**Give the Semaphore */
				 xSemaphoreGive(Button2Semaphore);
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <Led+0x94>)
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	f001 f998 	bl	8001c1c <xQueueGenericSend>
				 xSemaphoreGive(ButtonSemaphore);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <Led+0x90>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	f001 f991 	bl	8001c1c <xQueueGenericSend>

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	4618      	mov	r0, r3
 8000902:	f001 ff21 	bl	8002748 <xTaskDelayUntil>
			 if(pdTRUE == xSemaphoreTake(ButtonSemaphore,100)){
 8000906:	e7c1      	b.n	800088c <Led+0x14>
 8000908:	20000034 	.word	0x20000034
 800090c:	20000038 	.word	0x20000038
 8000910:	20000000 	.word	0x20000000
 8000914:	20000001 	.word	0x20000001
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f003 fdb1 	bl	8004550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fd79 	bl	80004e4 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a00:	08004630 	.word	0x08004630
  ldr r2, =_sbss
 8000a04:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a08:	200079a4 	.word	0x200079a4

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f8f9 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff ff6a 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f903 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f8d9 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000004 	.word	0x20000004
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000003c 	.word	0x2000003c

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff47 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff5c 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffb0 	bl	8000bec <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e159      	b.n	8000f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8148 	bne.w	8000f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a2 	beq.w	8000f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a52      	ldr	r2, [pc, #328]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x202>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x1fe>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_GPIO_Init+0x2f8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x1fa>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a45      	ldr	r2, [pc, #276]	; (8000f98 <HAL_GPIO_Init+0x300>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x1f2>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f08:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f aea2 	bls.w	8000cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e001      	b.n	8000fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fec:	e003      	b.n	8000ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	041a      	lsls	r2, r3, #16
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43d9      	mvns	r1, r3
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	400b      	ands	r3, r1
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e267      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001056:	4b88      	ldr	r3, [pc, #544]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b04      	cmp	r3, #4
 8001060:	d00c      	beq.n	800107c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106a:	2b08      	cmp	r3, #8
 800106c:	d112      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b7e      	ldr	r3, [pc, #504]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d05b      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d157      	bne.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e242      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x74>
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a75      	ldr	r2, [pc, #468]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6f      	ldr	r2, [pc, #444]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6c      	ldr	r2, [pc, #432]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a68      	ldr	r2, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b66      	ldr	r3, [pc, #408]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a65      	ldr	r2, [pc, #404]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fce0 	bl	8000ab4 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcdc 	bl	8000ab4 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e207      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fccc 	bl	8000ab4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcc8 	bl	8000ab4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1f3      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114e:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1c7      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4937      	ldr	r1, [pc, #220]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_RCC_OscConfig+0x244>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc81 	bl	8000ab4 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc7d 	bl	8000ab4 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e1a8      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4925      	ldr	r1, [pc, #148]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_OscConfig+0x244>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc60 	bl	8000ab4 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc5c 	bl	8000ab4 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e187      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d036      	beq.n	8001290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_RCC_OscConfig+0x248>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fc40 	bl	8000ab4 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc3c 	bl	8000ab4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e167      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800124c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x200>
 8001256:	e01b      	b.n	8001290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_RCC_OscConfig+0x248>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fc29 	bl	8000ab4 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	e00e      	b.n	8001284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fc25 	bl	8000ab4 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d907      	bls.n	8001284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e150      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
 8001278:	40023800 	.word	0x40023800
 800127c:	42470000 	.word	0x42470000
 8001280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1ea      	bne.n	8001266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8097 	beq.w	80013cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a2:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a7c      	ldr	r2, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b77      	ldr	r3, [pc, #476]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b74      	ldr	r3, [pc, #464]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a73      	ldr	r2, [pc, #460]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fbe5 	bl	8000ab4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fbe1 	bl	8000ab4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e10c      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x2ea>
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x324>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x30c>
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6713      	str	r3, [r2, #112]	; 0x70
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a5b      	ldr	r2, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0x324>
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001356:	f023 0304 	bic.w	r3, r3, #4
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d015      	beq.n	8001390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fba6 	bl	8000ab4 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fba2 	bl	8000ab4 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0cb      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ee      	beq.n	800136c <HAL_RCC_OscConfig+0x334>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fb90 	bl	8000ab4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fb8c 	bl	8000ab4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0b5      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a1 	beq.w	8001518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d05c      	beq.n	800149c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d141      	bne.n	800146e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb60 	bl	8000ab4 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb5c 	bl	8000ab4 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e087      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	3b01      	subs	r3, #1
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	491b      	ldr	r1, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb35 	bl	8000ab4 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fb31 	bl	8000ab4 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e05c      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x416>
 800146c:	e054      	b.n	8001518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fb1e 	bl	8000ab4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fb1a 	bl	8000ab4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e045      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x444>
 800149a:	e03d      	b.n	8001518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e038      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d028      	beq.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d121      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d11a      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014e4:	4013      	ands	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	3b01      	subs	r3, #1
 80014fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0cc      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d90c      	bls.n	8001564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	494d      	ldr	r1, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d044      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e07f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e067      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4934      	ldr	r1, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff fa4c 	bl	8000ab4 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff fa48 	bl	8000ab4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e04f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d20c      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e032      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f821 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f9c0 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	08004610 	.word	0x08004610
 80016ec:	20000004 	.word	0x20000004
 80016f0:	20000008 	.word	0x20000008

080016f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f8:	b094      	sub	sp, #80	; 0x50
 80016fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001700:	2300      	movs	r3, #0
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d00d      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x40>
 8001718:	2b08      	cmp	r3, #8
 800171a:	f200 80e1 	bhi.w	80018e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x34>
 8001722:	2b04      	cmp	r3, #4
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x3a>
 8001726:	e0db      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800172c:	e0db      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b73      	ldr	r3, [pc, #460]	; (80018fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001732:	e0d8      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	2200      	movs	r2, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
 8001754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 8001762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4621      	mov	r1, r4
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	6139      	str	r1, [r7, #16]
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001798:	4659      	mov	r1, fp
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4651      	mov	r1, sl
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4651      	mov	r1, sl
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4651      	mov	r1, sl
 80017a8:	ebb2 0801 	subs.w	r8, r2, r1
 80017ac:	4659      	mov	r1, fp
 80017ae:	eb63 0901 	sbc.w	r9, r3, r1
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017c6:	4690      	mov	r8, r2
 80017c8:	4699      	mov	r9, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	eb18 0303 	adds.w	r3, r8, r3
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	462b      	mov	r3, r5
 80017d4:	eb49 0303 	adc.w	r3, r9, r3
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017e6:	4629      	mov	r1, r5
 80017e8:	024b      	lsls	r3, r1, #9
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f0:	4621      	mov	r1, r4
 80017f2:	024a      	lsls	r2, r1, #9
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	2200      	movs	r2, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001804:	f7fe fcec 	bl	80001e0 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001810:	e058      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	4618      	mov	r0, r3
 800181c:	4611      	mov	r1, r2
 800181e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
 8001828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800182c:	4642      	mov	r2, r8
 800182e:	464b      	mov	r3, r9
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0159      	lsls	r1, r3, #5
 800183a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183e:	0150      	lsls	r0, r2, #5
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4641      	mov	r1, r8
 8001846:	ebb2 0a01 	subs.w	sl, r2, r1
 800184a:	4649      	mov	r1, r9
 800184c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800185c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001864:	ebb2 040a 	subs.w	r4, r2, sl
 8001868:	eb63 050b 	sbc.w	r5, r3, fp
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	00eb      	lsls	r3, r5, #3
 8001876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800187a:	00e2      	lsls	r2, r4, #3
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4643      	mov	r3, r8
 8001882:	18e3      	adds	r3, r4, r3
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	464b      	mov	r3, r9
 8001888:	eb45 0303 	adc.w	r3, r5, r3
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800189a:	4629      	mov	r1, r5
 800189c:	028b      	lsls	r3, r1, #10
 800189e:	4621      	mov	r1, r4
 80018a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018a4:	4621      	mov	r1, r4
 80018a6:	028a      	lsls	r2, r1, #10
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	2200      	movs	r2, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	61fa      	str	r2, [r7, #28]
 80018b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b8:	f7fe fc92 	bl	80001e0 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018de:	e002      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	007a1200 	.word	0x007a1200

08001900 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f103 0208 	add.w	r2, r3, #8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f103 0208 	add.w	r2, r3, #8
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f103 0208 	add.w	r2, r3, #8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d103      	bne.n	800197a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e00c      	b.n	8001994 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3308      	adds	r3, #8
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e002      	b.n	8001988 <vListInsert+0x2e>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	429a      	cmp	r2, r3
 8001992:	d2f6      	bcs.n	8001982 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6892      	ldr	r2, [r2, #8]
 80019e2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6852      	ldr	r2, [r2, #4]
 80019ec:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d103      	bne.n	8001a00 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3c:	f383 8811 	msr	BASEPRI, r3
 8001a40:	f3bf 8f6f 	isb	sy
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001a4a:	bf00      	nop
 8001a4c:	e7fe      	b.n	8001a4c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05d      	beq.n	8001b10 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d059      	beq.n	8001b10 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	2100      	movs	r1, #0
 8001a66:	fba3 2302 	umull	r2, r3, r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d000      	beq.n	8001a70 <xQueueGenericReset+0x50>
 8001a6e:	2101      	movs	r1, #1
 8001a70:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d14c      	bne.n	8001b10 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001a76:	f002 fac7 	bl	8004008 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	6939      	ldr	r1, [r7, #16]
 8001a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2200      	movs	r2, #0
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	441a      	add	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	22ff      	movs	r2, #255	; 0xff
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d114      	bne.n	8001af6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01a      	beq.n	8001b0a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	3310      	adds	r3, #16
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fa2f 	bl	8002f3c <xTaskRemoveFromEventList>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <xQueueGenericReset+0x11c>)
 8001ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	e009      	b.n	8001b0a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3310      	adds	r3, #16
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff00 	bl	8001900 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	3324      	adds	r3, #36	; 0x24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fefb 	bl	8001900 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001b0a:	f002 faad 	bl	8004068 <vPortExitCritical>
 8001b0e:	e001      	b.n	8001b14 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <xQueueGenericReset+0x110>
        __asm volatile
 8001b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	60bb      	str	r3, [r7, #8]
    }
 8001b2c:	bf00      	nop
 8001b2e:	e7fe      	b.n	8001b2e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b30:	697b      	ldr	r3, [r7, #20]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000ed04 	.word	0xe000ed04

08001b40 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d02e      	beq.n	8001bb6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b58:	2100      	movs	r1, #0
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d000      	beq.n	8001b68 <xQueueGenericCreate+0x28>
 8001b66:	2101      	movs	r1, #1
 8001b68:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d123      	bne.n	8001bb6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b76:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8001b7a:	d81c      	bhi.n	8001bb6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3348      	adds	r3, #72	; 0x48
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fb14 	bl	80041b8 <pvPortMalloc>
 8001b90:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01c      	beq.n	8001bd2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3348      	adds	r3, #72	; 0x48
 8001ba0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f814 	bl	8001bdc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001bb4:	e00d      	b.n	8001bd2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <xQueueGenericCreate+0x92>
        __asm volatile
 8001bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc0:	f383 8811 	msr	BASEPRI, r3
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	613b      	str	r3, [r7, #16]
    }
 8001bce:	bf00      	nop
 8001bd0:	e7fe      	b.n	8001bd0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
    }
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e002      	b.n	8001bfe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	69b8      	ldr	r0, [r7, #24]
 8001c0e:	f7ff ff07 	bl	8001a20 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <xQueueGenericSend+0x32>
        __asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001c4a:	bf00      	nop
 8001c4c:	e7fe      	b.n	8001c4c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d103      	bne.n	8001c5c <xQueueGenericSend+0x40>
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <xQueueGenericSend+0x44>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <xQueueGenericSend+0x46>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10a      	bne.n	8001c7c <xQueueGenericSend+0x60>
        __asm volatile
 8001c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001c78:	bf00      	nop
 8001c7a:	e7fe      	b.n	8001c7a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d103      	bne.n	8001c8a <xQueueGenericSend+0x6e>
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <xQueueGenericSend+0x72>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <xQueueGenericSend+0x74>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <xQueueGenericSend+0x8e>
        __asm volatile
 8001c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c98:	f383 8811 	msr	BASEPRI, r3
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f3bf 8f4f 	dsb	sy
 8001ca4:	623b      	str	r3, [r7, #32]
    }
 8001ca6:	bf00      	nop
 8001ca8:	e7fe      	b.n	8001ca8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001caa:	f001 fb57 	bl	800335c <xTaskGetSchedulerState>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <xQueueGenericSend+0x9e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <xQueueGenericSend+0xa2>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <xQueueGenericSend+0xa4>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <xQueueGenericSend+0xbe>
        __asm volatile
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	61fb      	str	r3, [r7, #28]
    }
 8001cd6:	bf00      	nop
 8001cd8:	e7fe      	b.n	8001cd8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cda:	f002 f995 	bl	8004008 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d302      	bcc.n	8001cf0 <xQueueGenericSend+0xd4>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d129      	bne.n	8001d44 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cf6:	f000 fa85 	bl	8002204 <prvCopyDataToQueue>
 8001cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	3324      	adds	r3, #36	; 0x24
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 f917 	bl	8002f3c <xTaskRemoveFromEventList>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <xQueueGenericSend+0x1f8>)
 8001d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	e00a      	b.n	8001d3c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <xQueueGenericSend+0x1f8>)
 8001d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001d3c:	f002 f994 	bl	8004068 <vPortExitCritical>
                return pdPASS;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e063      	b.n	8001e0c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d4a:	f002 f98d 	bl	8004068 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e05c      	b.n	8001e0c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d106      	bne.n	8001d66 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 f9c3 	bl	80030e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d66:	f002 f97f 	bl	8004068 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d6a:	f000 fdf1 	bl	8002950 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d6e:	f002 f94b 	bl	8004008 <vPortEnterCritical>
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7e:	d103      	bne.n	8001d88 <xQueueGenericSend+0x16c>
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d103      	bne.n	8001d9e <xQueueGenericSend+0x182>
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d9e:	f002 f963 	bl	8004068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001da2:	1d3a      	adds	r2, r7, #4
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 f9b2 	bl	8003114 <xTaskCheckForTimeOut>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d124      	bne.n	8001e00 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001db8:	f000 fb1c 	bl	80023f4 <prvIsQueueFull>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d018      	beq.n	8001df4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	3310      	adds	r3, #16
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 f84c 	bl	8002e68 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dd2:	f000 faa7 	bl	8002324 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001dd6:	f000 fdc9 	bl	800296c <xTaskResumeAll>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f af7c 	bne.w	8001cda <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <xQueueGenericSend+0x1f8>)
 8001de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	e772      	b.n	8001cda <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001df6:	f000 fa95 	bl	8002324 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001dfa:	f000 fdb7 	bl	800296c <xTaskResumeAll>
 8001dfe:	e76c      	b.n	8001cda <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e02:	f000 fa8f 	bl	8002324 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e06:	f000 fdb1 	bl	800296c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001e0a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3738      	adds	r7, #56	; 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	e000ed04 	.word	0xe000ed04

08001e18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	; 0x30
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <xQueueReceive+0x30>
        __asm volatile
 8001e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e36:	f383 8811 	msr	BASEPRI, r3
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	f3bf 8f4f 	dsb	sy
 8001e42:	623b      	str	r3, [r7, #32]
    }
 8001e44:	bf00      	nop
 8001e46:	e7fe      	b.n	8001e46 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <xQueueReceive+0x3e>
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <xQueueReceive+0x42>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <xQueueReceive+0x44>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <xQueueReceive+0x5e>
        __asm volatile
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	61fb      	str	r3, [r7, #28]
    }
 8001e72:	bf00      	nop
 8001e74:	e7fe      	b.n	8001e74 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e76:	f001 fa71 	bl	800335c <xTaskGetSchedulerState>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <xQueueReceive+0x6e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <xQueueReceive+0x72>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <xQueueReceive+0x74>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <xQueueReceive+0x8e>
        __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	61bb      	str	r3, [r7, #24]
    }
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001ea6:	f002 f8af 	bl	8004008 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01f      	beq.n	8001ef6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eba:	f000 fa0d 	bl	80022d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00f      	beq.n	8001eee <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 f832 	bl	8002f3c <xTaskRemoveFromEventList>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <xQueueReceive+0x1bc>)
 8001ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001eee:	f002 f8bb 	bl	8004068 <vPortExitCritical>
                return pdPASS;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e069      	b.n	8001fca <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d103      	bne.n	8001f04 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001efc:	f002 f8b4 	bl	8004068 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e062      	b.n	8001fca <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 f8ea 	bl	80030e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f18:	f002 f8a6 	bl	8004068 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f1c:	f000 fd18 	bl	8002950 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f20:	f002 f872 	bl	8004008 <vPortEnterCritical>
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d103      	bne.n	8001f3a <xQueueReceive+0x122>
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d103      	bne.n	8001f50 <xQueueReceive+0x138>
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f50:	f002 f88a 	bl	8004068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f54:	1d3a      	adds	r2, r7, #4
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f8d9 	bl	8003114 <xTaskCheckForTimeOut>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d123      	bne.n	8001fb0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f6a:	f000 fa2d 	bl	80023c8 <prvIsQueueEmpty>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d017      	beq.n	8001fa4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	3324      	adds	r3, #36	; 0x24
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 ff73 	bl	8002e68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f84:	f000 f9ce 	bl	8002324 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f88:	f000 fcf0 	bl	800296c <xTaskResumeAll>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d189      	bne.n	8001ea6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <xQueueReceive+0x1bc>)
 8001f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	e780      	b.n	8001ea6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fa6:	f000 f9bd 	bl	8002324 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001faa:	f000 fcdf 	bl	800296c <xTaskResumeAll>
 8001fae:	e77a      	b.n	8001ea6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fb2:	f000 f9b7 	bl	8002324 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fb6:	f000 fcd9 	bl	800296c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fbc:	f000 fa04 	bl	80023c8 <prvIsQueueEmpty>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f43f af6f 	beq.w	8001ea6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001fc8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3730      	adds	r7, #48	; 0x30
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000ed04 	.word	0xe000ed04

08001fd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	61bb      	str	r3, [r7, #24]
    }
 8002006:	bf00      	nop
 8002008:	e7fe      	b.n	8002008 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002016:	f383 8811 	msr	BASEPRI, r3
 800201a:	f3bf 8f6f 	isb	sy
 800201e:	f3bf 8f4f 	dsb	sy
 8002022:	617b      	str	r3, [r7, #20]
    }
 8002024:	bf00      	nop
 8002026:	e7fe      	b.n	8002026 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002028:	f001 f998 	bl	800335c <xTaskGetSchedulerState>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <xQueueSemaphoreTake+0x60>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <xQueueSemaphoreTake+0x64>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <xQueueSemaphoreTake+0x66>
 800203c:	2300      	movs	r3, #0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	f3bf 8f4f 	dsb	sy
 8002052:	613b      	str	r3, [r7, #16]
    }
 8002054:	bf00      	nop
 8002056:	e7fe      	b.n	8002056 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002058:	f001 ffd6 	bl	8004008 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d024      	beq.n	80020b2 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	1e5a      	subs	r2, r3, #1
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002078:	f001 fb88 	bl	800378c <pvTaskIncrementMutexHeldCount>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00f      	beq.n	80020aa <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3310      	adds	r3, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff54 	bl	8002f3c <xTaskRemoveFromEventList>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <xQueueSemaphoreTake+0x1f8>)
 800209c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80020aa:	f001 ffdd 	bl	8004068 <vPortExitCritical>
                return pdPASS;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e089      	b.n	80021c6 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80020b8:	f001 ffd6 	bl	8004068 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80020bc:	2300      	movs	r3, #0
 80020be:	e082      	b.n	80021c6 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f80c 	bl	80030e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80020d4:	f001 ffc8 	bl	8004068 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80020d8:	f000 fc3a 	bl	8002950 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80020dc:	f001 ff94 	bl	8004008 <vPortEnterCritical>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <xQueueSemaphoreTake+0x11e>
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d103      	bne.n	800210c <xQueueSemaphoreTake+0x134>
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800210c:	f001 ffac 	bl	8004068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002110:	463a      	mov	r2, r7
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fffb 	bl	8003114 <xTaskCheckForTimeOut>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d132      	bne.n	800218a <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002126:	f000 f94f 	bl	80023c8 <prvIsQueueEmpty>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d026      	beq.n	800217e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8002138:	f001 ff66 	bl	8004008 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4618      	mov	r0, r3
 8002142:	f001 f929 	bl	8003398 <xTaskPriorityInherit>
 8002146:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8002148:	f001 ff8e 	bl	8004068 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3324      	adds	r3, #36	; 0x24
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fe87 	bl	8002e68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800215a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800215c:	f000 f8e2 	bl	8002324 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002160:	f000 fc04 	bl	800296c <xTaskResumeAll>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f47f af76 	bne.w	8002058 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <xQueueSemaphoreTake+0x1f8>)
 800216e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	e76c      	b.n	8002058 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800217e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002180:	f000 f8d0 	bl	8002324 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002184:	f000 fbf2 	bl	800296c <xTaskResumeAll>
 8002188:	e766      	b.n	8002058 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800218a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800218c:	f000 f8ca 	bl	8002324 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002190:	f000 fbec 	bl	800296c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002196:	f000 f917 	bl	80023c8 <prvIsQueueEmpty>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f43f af5b 	beq.w	8002058 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80021a8:	f001 ff2e 	bl	8004008 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80021ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021ae:	f000 f811 	bl	80021d4 <prvGetDisinheritPriorityAfterTimeout>
 80021b2:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	69f9      	ldr	r1, [r7, #28]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fa2e 	bl	800361c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80021c0:	f001 ff52 	bl	8004068 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80021c4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3730      	adds	r7, #48	; 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000ed04 	.word	0xe000ed04

080021d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1c3 0305 	rsb	r3, r3, #5
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e001      	b.n	80021f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80021f6:	68fb      	ldr	r3, [r7, #12]
    }
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10d      	bne.n	800223e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d14d      	bne.n	80022c6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f001 f950 	bl	80034d4 <xTaskPriorityDisinherit>
 8002234:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	e043      	b.n	80022c6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d119      	bne.n	8002278 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6858      	ldr	r0, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	461a      	mov	r2, r3
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	f002 f9a2 	bl	8004598 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	441a      	add	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	429a      	cmp	r2, r3
 800226c:	d32b      	bcc.n	80022c6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e026      	b.n	80022c6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68d8      	ldr	r0, [r3, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	461a      	mov	r2, r3
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	f002 f988 	bl	8004598 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	425b      	negs	r3, r3
 8002292:	441a      	add	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	425b      	negs	r3, r3
 80022ae:	441a      	add	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d105      	bne.n	80022c6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80022ce:	697b      	ldr	r3, [r7, #20]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d018      	beq.n	800231c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	441a      	add	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d303      	bcc.n	800230c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68d9      	ldr	r1, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	461a      	mov	r2, r3
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f002 f93e 	bl	8004598 <memcpy>
    }
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800232c:	f001 fe6c 	bl	8004008 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002336:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002338:	e011      	b.n	800235e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3324      	adds	r3, #36	; 0x24
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fdf8 	bl	8002f3c <xTaskRemoveFromEventList>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002352:	f000 ff45 	bl	80031e0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3b01      	subs	r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	dce9      	bgt.n	800233a <prvUnlockQueue+0x16>
 8002366:	e000      	b.n	800236a <prvUnlockQueue+0x46>
                    break;
 8002368:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002372:	f001 fe79 	bl	8004068 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002376:	f001 fe47 	bl	8004008 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002380:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002382:	e011      	b.n	80023a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3310      	adds	r3, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fdd3 	bl	8002f3c <xTaskRemoveFromEventList>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800239c:	f000 ff20 	bl	80031e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dce9      	bgt.n	8002384 <prvUnlockQueue+0x60>
 80023b0:	e000      	b.n	80023b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80023b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80023bc:	f001 fe54 	bl	8004068 <vPortExitCritical>
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023d0:	f001 fe1a 	bl	8004008 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80023dc:	2301      	movs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e001      	b.n	80023e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80023e6:	f001 fe3f 	bl	8004068 <vPortExitCritical>

    return xReturn;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023fc:	f001 fe04 	bl	8004008 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	429a      	cmp	r2, r3
 800240a:	d102      	bne.n	8002412 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800240c:	2301      	movs	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e001      	b.n	8002416 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002416:	f001 fe27 	bl	8004068 <vPortExitCritical>

    return xReturn;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002434:	f001 fde8 	bl	8004008 <vPortEnterCritical>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800243e:	b25b      	sxtb	r3, r3
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d103      	bne.n	800244e <vQueueWaitForMessageRestricted+0x2a>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002454:	b25b      	sxtb	r3, r3
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d103      	bne.n	8002464 <vQueueWaitForMessageRestricted+0x40>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002464:	f001 fe00 	bl	8004068 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3324      	adds	r3, #36	; 0x24
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd19 	bl	8002eb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff50 	bl	8002324 <prvUnlockQueue>
    }
 8002484:	bf00      	nop
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af04      	add	r7, sp, #16
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fe89 	bl	80041b8 <pvPortMalloc>
 80024a6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d013      	beq.n	80024d6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024ae:	2050      	movs	r0, #80	; 0x50
 80024b0:	f001 fe82 	bl	80041b8 <pvPortMalloc>
 80024b4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80024bc:	2250      	movs	r2, #80	; 0x50
 80024be:	2100      	movs	r1, #0
 80024c0:	69f8      	ldr	r0, [r7, #28]
 80024c2:	f002 f877 	bl	80045b4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
 80024cc:	e005      	b.n	80024da <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f001 ff2c 	bl	800432c <vPortFree>
 80024d4:	e001      	b.n	80024da <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	2300      	movs	r3, #0
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f80e 	bl	8002518 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024fc:	69f8      	ldr	r0, [r7, #28]
 80024fe:	f000 f891 	bl	8002624 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002502:	2301      	movs	r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	e002      	b.n	800250e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800250e:	69bb      	ldr	r3, [r7, #24]
    }
 8002510:	4618      	mov	r0, r3
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002530:	3b01      	subs	r3, #1
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <prvInitialiseNewTask+0x48>
        __asm volatile
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	617b      	str	r3, [r7, #20]
    }
 800255c:	bf00      	nop
 800255e:	e7fe      	b.n	800255e <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01e      	beq.n	80025a4 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e012      	b.n	8002592 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	7819      	ldrb	r1, [r3, #0]
 8002574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	3334      	adds	r3, #52	; 0x34
 800257c:	460a      	mov	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	2b09      	cmp	r3, #9
 8002596:	d9e9      	bls.n	800256c <prvInitialiseNewTask+0x54>
 8002598:	e000      	b.n	800259c <prvInitialiseNewTask+0x84>
            {
                break;
 800259a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d90a      	bls.n	80025c0 <prvInitialiseNewTask+0xa8>
        __asm volatile
 80025aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	613b      	str	r3, [r7, #16]
    }
 80025bc:	bf00      	nop
 80025be:	e7fe      	b.n	80025be <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d901      	bls.n	80025ca <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025c6:	2304      	movs	r3, #4
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	3304      	adds	r3, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f9b0 	bl	8001940 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	3318      	adds	r3, #24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f9ab 	bl	8001940 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	f1c3 0205 	rsb	r2, r3, #5
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f001 fbcd 	bl	8003da4 <pxPortInitialiseStack>
 800260a:	4602      	mov	r2, r0
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800262c:	f001 fcec 	bl	8004008 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <prvAddNewTaskToReadyList+0x108>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a3d      	ldr	r2, [pc, #244]	; (800272c <prvAddNewTaskToReadyList+0x108>)
 8002638:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <prvAddNewTaskToReadyList+0x10c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002642:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <prvAddNewTaskToReadyList+0x10c>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <prvAddNewTaskToReadyList+0x108>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d110      	bne.n	8002672 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002650:	f000 fdea 	bl	8003228 <prvInitialiseTaskLists>
 8002654:	e00d      	b.n	8002672 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <prvAddNewTaskToReadyList+0x110>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <prvAddNewTaskToReadyList+0x10c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	429a      	cmp	r2, r3
 800266a:	d802      	bhi.n	8002672 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800266c:	4a30      	ldr	r2, [pc, #192]	; (8002730 <prvAddNewTaskToReadyList+0x10c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <prvAddNewTaskToReadyList+0x114>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <prvAddNewTaskToReadyList+0x114>)
 800267a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <prvAddNewTaskToReadyList+0x118>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	4a2c      	ldr	r2, [pc, #176]	; (800273c <prvAddNewTaskToReadyList+0x118>)
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002692:	492b      	ldr	r1, [pc, #172]	; (8002740 <prvAddNewTaskToReadyList+0x11c>)
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3304      	adds	r3, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	3204      	adds	r2, #4
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	1d1a      	adds	r2, r3, #4
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <prvAddNewTaskToReadyList+0x11c>)
 80026d2:	441a      	add	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	615a      	str	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	4918      	ldr	r1, [pc, #96]	; (8002740 <prvAddNewTaskToReadyList+0x11c>)
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1c59      	adds	r1, r3, #1
 80026ec:	4814      	ldr	r0, [pc, #80]	; (8002740 <prvAddNewTaskToReadyList+0x11c>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4403      	add	r3, r0
 80026f8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026fa:	f001 fcb5 	bl	8004068 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <prvAddNewTaskToReadyList+0x110>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00e      	beq.n	8002724 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <prvAddNewTaskToReadyList+0x10c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <prvAddNewTaskToReadyList+0x120>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000118 	.word	0x20000118
 8002730:	20000040 	.word	0x20000040
 8002734:	20000124 	.word	0x20000124
 8002738:	20000134 	.word	0x20000134
 800273c:	20000120 	.word	0x20000120
 8002740:	20000044 	.word	0x20000044
 8002744:	e000ed04 	.word	0xe000ed04

08002748 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <xTaskDelayUntil+0x2a>
        __asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	617b      	str	r3, [r7, #20]
    }
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xTaskDelayUntil+0x46>
        __asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	613b      	str	r3, [r7, #16]
    }
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <xTaskDelayUntil+0xf0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <xTaskDelayUntil+0x64>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	60fb      	str	r3, [r7, #12]
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80027ac:	f000 f8d0 	bl	8002950 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <xTaskDelayUntil+0xf4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d20b      	bcs.n	80027e2 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d211      	bcs.n	80027f8 <xTaskDelayUntil+0xb0>
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d90d      	bls.n	80027f8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	e00a      	b.n	80027f8 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d303      	bcc.n	80027f4 <xTaskDelayUntil+0xac>
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d901      	bls.n	80027f8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ffd1 	bl	80037b4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002812:	f000 f8ab 	bl	800296c <xTaskResumeAll>
 8002816:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d107      	bne.n	800282e <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <xTaskDelayUntil+0xf8>)
 8002820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002830:	4618      	mov	r0, r3
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000140 	.word	0x20000140
 800283c:	2000011c 	.word	0x2000011c
 8002840:	e000ed04 	.word	0xe000ed04

08002844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d017      	beq.n	8002886 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <vTaskDelay+0x60>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <vTaskDelay+0x30>
        __asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	60bb      	str	r3, [r7, #8]
    }
 8002870:	bf00      	nop
 8002872:	e7fe      	b.n	8002872 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002874:	f000 f86c 	bl	8002950 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002878:	2100      	movs	r1, #0
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 ff9a 	bl	80037b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002880:	f000 f874 	bl	800296c <xTaskResumeAll>
 8002884:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <vTaskDelay+0x64>)
 800288e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000140 	.word	0x20000140
 80028a8:	e000ed04 	.word	0xe000ed04

080028ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <vTaskStartScheduler+0x88>)
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	2246      	movs	r2, #70	; 0x46
 80028be:	491e      	ldr	r1, [pc, #120]	; (8002938 <vTaskStartScheduler+0x8c>)
 80028c0:	481e      	ldr	r0, [pc, #120]	; (800293c <vTaskStartScheduler+0x90>)
 80028c2:	f7ff fde3 	bl	800248c <xTaskCreate>
 80028c6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80028ce:	f000 fff1 	bl	80038b4 <xTimerCreateTimerTask>
 80028d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d116      	bne.n	8002908 <vTaskStartScheduler+0x5c>
        __asm volatile
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	60bb      	str	r3, [r7, #8]
    }
 80028ec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80028ee:	4b14      	ldr	r3, [pc, #80]	; (8002940 <vTaskStartScheduler+0x94>)
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <vTaskStartScheduler+0x98>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <vTaskStartScheduler+0x9c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002902:	f001 fadf 	bl	8003ec4 <xPortStartScheduler>
 8002906:	e00e      	b.n	8002926 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d10a      	bne.n	8002926 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	607b      	str	r3, [r7, #4]
    }
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <vTaskStartScheduler+0xa0>)
 8002928:	681b      	ldr	r3, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000013c 	.word	0x2000013c
 8002938:	08004600 	.word	0x08004600
 800293c:	080031f9 	.word	0x080031f9
 8002940:	20000138 	.word	0x20000138
 8002944:	20000124 	.word	0x20000124
 8002948:	2000011c 	.word	0x2000011c
 800294c:	20000010 	.word	0x20000010

08002950 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <vTaskSuspendAll+0x18>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	4a03      	ldr	r2, [pc, #12]	; (8002968 <vTaskSuspendAll+0x18>)
 800295c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	20000140 	.word	0x20000140

0800296c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800297a:	4b71      	ldr	r3, [pc, #452]	; (8002b40 <xTaskResumeAll+0x1d4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <xTaskResumeAll+0x2c>
        __asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	607b      	str	r3, [r7, #4]
    }
 8002994:	bf00      	nop
 8002996:	e7fe      	b.n	8002996 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002998:	f001 fb36 	bl	8004008 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <xTaskResumeAll+0x1d4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	4a67      	ldr	r2, [pc, #412]	; (8002b40 <xTaskResumeAll+0x1d4>)
 80029a4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <xTaskResumeAll+0x1d4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80c0 	bne.w	8002b30 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <xTaskResumeAll+0x1d8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80bb 	beq.w	8002b30 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ba:	e08a      	b.n	8002ad2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029bc:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <xTaskResumeAll+0x1dc>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	6a12      	ldr	r2, [r2, #32]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	69d2      	ldr	r2, [r2, #28]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3318      	adds	r3, #24
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d103      	bne.n	80029f2 <xTaskResumeAll+0x86>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	6a1a      	ldr	r2, [r3, #32]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	1e5a      	subs	r2, r3, #1
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	68d2      	ldr	r2, [r2, #12]
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	6892      	ldr	r2, [r2, #8]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3304      	adds	r3, #4
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d103      	bne.n	8002a30 <xTaskResumeAll+0xc4>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	2201      	movs	r2, #1
 8002a46:	409a      	lsls	r2, r3
 8002a48:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <xTaskResumeAll+0x1e0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	4a3f      	ldr	r2, [pc, #252]	; (8002b4c <xTaskResumeAll+0x1e0>)
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	493e      	ldr	r1, [pc, #248]	; (8002b50 <xTaskResumeAll+0x1e4>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	3204      	adds	r2, #4
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	1d1a      	adds	r2, r3, #4
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <xTaskResumeAll+0x1e4>)
 8002a96:	441a      	add	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	615a      	str	r2, [r3, #20]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	492b      	ldr	r1, [pc, #172]	; (8002b50 <xTaskResumeAll+0x1e4>)
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	4827      	ldr	r0, [pc, #156]	; (8002b50 <xTaskResumeAll+0x1e4>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4403      	add	r3, r0
 8002abc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <xTaskResumeAll+0x1e8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <xTaskResumeAll+0x1ec>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <xTaskResumeAll+0x1dc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f47f af70 	bne.w	80029bc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ae2:	f000 fc1f 	bl	8003324 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <xTaskResumeAll+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002af2:	f000 f847 	bl	8002b84 <xTaskIncrementTick>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <xTaskResumeAll+0x1ec>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f1      	bne.n	8002af2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <xTaskResumeAll+0x1f0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <xTaskResumeAll+0x1ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <xTaskResumeAll+0x1f4>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b30:	f001 fa9a 	bl	8004068 <vPortExitCritical>

    return xAlreadyYielded;
 8002b34:	69bb      	ldr	r3, [r7, #24]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000140 	.word	0x20000140
 8002b44:	20000118 	.word	0x20000118
 8002b48:	200000d8 	.word	0x200000d8
 8002b4c:	20000120 	.word	0x20000120
 8002b50:	20000044 	.word	0x20000044
 8002b54:	20000040 	.word	0x20000040
 8002b58:	2000012c 	.word	0x2000012c
 8002b5c:	20000128 	.word	0x20000128
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <xTaskGetTickCount+0x1c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b70:	687b      	ldr	r3, [r7, #4]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000011c 	.word	0x2000011c

08002b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b8e:	4b7d      	ldr	r3, [pc, #500]	; (8002d84 <xTaskIncrementTick+0x200>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 80ec 	bne.w	8002d70 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b98:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <xTaskIncrementTick+0x204>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ba0:	4a79      	ldr	r2, [pc, #484]	; (8002d88 <xTaskIncrementTick+0x204>)
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d120      	bne.n	8002bee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bac:	4b77      	ldr	r3, [pc, #476]	; (8002d8c <xTaskIncrementTick+0x208>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <xTaskIncrementTick+0x48>
        __asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	607b      	str	r3, [r7, #4]
    }
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xTaskIncrementTick+0x46>
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <xTaskIncrementTick+0x208>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <xTaskIncrementTick+0x20c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6d      	ldr	r2, [pc, #436]	; (8002d8c <xTaskIncrementTick+0x208>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4a6d      	ldr	r2, [pc, #436]	; (8002d90 <xTaskIncrementTick+0x20c>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a6b      	ldr	r2, [pc, #428]	; (8002d94 <xTaskIncrementTick+0x210>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	f000 fb9b 	bl	8003324 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bee:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <xTaskIncrementTick+0x214>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f0c0 80a6 	bcc.w	8002d46 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bfa:	4b64      	ldr	r3, [pc, #400]	; (8002d8c <xTaskIncrementTick+0x208>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <xTaskIncrementTick+0x214>)
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0a:	601a      	str	r2, [r3, #0]
                    break;
 8002c0c:	e09b      	b.n	8002d46 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <xTaskIncrementTick+0x208>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d203      	bcs.n	8002c2e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c26:	4a5c      	ldr	r2, [pc, #368]	; (8002d98 <xTaskIncrementTick+0x214>)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c2c:	e08b      	b.n	8002d46 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d103      	bne.n	8002c5c <xTaskIncrementTick+0xd8>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1e5a      	subs	r2, r3, #1
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01e      	beq.n	8002cb2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	6a12      	ldr	r2, [r2, #32]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	69d2      	ldr	r2, [r2, #28]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3318      	adds	r3, #24
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d103      	bne.n	8002ca2 <xTaskIncrementTick+0x11e>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <xTaskIncrementTick+0x218>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <xTaskIncrementTick+0x218>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4935      	ldr	r1, [pc, #212]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	3204      	adds	r2, #4
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	4923      	ldr	r1, [pc, #140]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	481f      	ldr	r0, [pc, #124]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4403      	add	r3, r0
 8002d2e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <xTaskIncrementTick+0x220>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	f67f af5d 	bls.w	8002bfa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	e759      	b.n	8002bfa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <xTaskIncrementTick+0x220>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4914      	ldr	r1, [pc, #80]	; (8002da0 <xTaskIncrementTick+0x21c>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d901      	bls.n	8002d62 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <xTaskIncrementTick+0x224>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	e004      	b.n	8002d7a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <xTaskIncrementTick+0x228>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <xTaskIncrementTick+0x228>)
 8002d78:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000140 	.word	0x20000140
 8002d88:	2000011c 	.word	0x2000011c
 8002d8c:	200000d0 	.word	0x200000d0
 8002d90:	200000d4 	.word	0x200000d4
 8002d94:	20000130 	.word	0x20000130
 8002d98:	20000138 	.word	0x20000138
 8002d9c:	20000120 	.word	0x20000120
 8002da0:	20000044 	.word	0x20000044
 8002da4:	20000040 	.word	0x20000040
 8002da8:	2000012c 	.word	0x2000012c
 8002dac:	20000128 	.word	0x20000128

08002db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <vTaskSwitchContext+0xa4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <vTaskSwitchContext+0xa8>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002dc4:	e03f      	b.n	8002e46 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <vTaskSwitchContext+0xa8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <vTaskSwitchContext+0xac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f1c3 031f 	rsb	r3, r3, #31
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	491f      	ldr	r1, [pc, #124]	; (8002e60 <vTaskSwitchContext+0xb0>)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	607b      	str	r3, [r7, #4]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <vTaskSwitchContext+0x5a>
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <vTaskSwitchContext+0xb0>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d104      	bne.n	8002e3c <vTaskSwitchContext+0x8c>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <vTaskSwitchContext+0xb4>)
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000140 	.word	0x20000140
 8002e58:	2000012c 	.word	0x2000012c
 8002e5c:	20000120 	.word	0x20000120
 8002e60:	20000044 	.word	0x20000044
 8002e64:	20000040 	.word	0x20000040

08002e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60fb      	str	r3, [r7, #12]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <vTaskPlaceOnEventList+0x44>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3318      	adds	r3, #24
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fd5f 	bl	800195a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	f000 fc88 	bl	80037b4 <prvAddCurrentTaskToDelayedList>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000040 	.word	0x20000040

08002eb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	613b      	str	r3, [r7, #16]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6892      	ldr	r2, [r2, #8]
 8002eee:	621a      	str	r2, [r3, #32]
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	3218      	adds	r2, #24
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <vTaskPlaceOnEventListRestricted+0x88>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f103 0218 	add.w	r2, r3, #24
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <vTaskPlaceOnEventListRestricted+0x88>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	68b8      	ldr	r0, [r7, #8]
 8002f2a:	f000 fc43 	bl	80037b4 <prvAddCurrentTaskToDelayedList>
    }
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000040 	.word	0x20000040

08002f3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b08b      	sub	sp, #44	; 0x2c
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	60fb      	str	r3, [r7, #12]
    }
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	6a3a      	ldr	r2, [r7, #32]
 8002f74:	6a12      	ldr	r2, [r2, #32]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	69d2      	ldr	r2, [r2, #28]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	3318      	adds	r3, #24
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d103      	bne.n	8002f96 <xTaskRemoveFromEventList+0x5a>
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <xTaskRemoveFromEventList+0x194>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d15e      	bne.n	800306c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	68d2      	ldr	r2, [r2, #12]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	6a3a      	ldr	r2, [r7, #32]
 8002fc4:	6892      	ldr	r2, [r2, #8]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d103      	bne.n	8002fdc <xTaskRemoveFromEventList+0xa0>
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	615a      	str	r2, [r3, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	1e5a      	subs	r2, r3, #1
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <xTaskRemoveFromEventList+0x198>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	4a36      	ldr	r2, [pc, #216]	; (80030d4 <xTaskRemoveFromEventList+0x198>)
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003002:	4935      	ldr	r1, [pc, #212]	; (80030d8 <xTaskRemoveFromEventList+0x19c>)
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3304      	adds	r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	3204      	adds	r2, #4
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	1d1a      	adds	r2, r3, #4
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <xTaskRemoveFromEventList+0x19c>)
 8003042:	441a      	add	r2, r3
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	615a      	str	r2, [r3, #20]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	4922      	ldr	r1, [pc, #136]	; (80030d8 <xTaskRemoveFromEventList+0x19c>)
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	481e      	ldr	r0, [pc, #120]	; (80030d8 <xTaskRemoveFromEventList+0x19c>)
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4403      	add	r3, r0
 8003068:	6019      	str	r1, [r3, #0]
 800306a:	e01b      	b.n	80030a4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <xTaskRemoveFromEventList+0x1a0>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	61da      	str	r2, [r3, #28]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	621a      	str	r2, [r3, #32]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	3218      	adds	r2, #24
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f103 0218 	add.w	r2, r3, #24
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	4a11      	ldr	r2, [pc, #68]	; (80030dc <xTaskRemoveFromEventList+0x1a0>)
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <xTaskRemoveFromEventList+0x1a0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <xTaskRemoveFromEventList+0x1a0>)
 80030a2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <xTaskRemoveFromEventList+0x1a4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d905      	bls.n	80030be <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <xTaskRemoveFromEventList+0x1a8>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e001      	b.n	80030c2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	372c      	adds	r7, #44	; 0x2c
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000140 	.word	0x20000140
 80030d4:	20000120 	.word	0x20000120
 80030d8:	20000044 	.word	0x20000044
 80030dc:	200000d8 	.word	0x200000d8
 80030e0:	20000040 	.word	0x20000040
 80030e4:	2000012c 	.word	0x2000012c

080030e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <vTaskInternalSetTimeOutState+0x24>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <vTaskInternalSetTimeOutState+0x28>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000130 	.word	0x20000130
 8003110:	2000011c 	.word	0x2000011c

08003114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	613b      	str	r3, [r7, #16]
    }
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60fb      	str	r3, [r7, #12]
    }
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003156:	f000 ff57 	bl	8004008 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <xTaskCheckForTimeOut+0xc4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d102      	bne.n	800317a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	e026      	b.n	80031c8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <xTaskCheckForTimeOut+0xc8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d00a      	beq.n	800319c <xTaskCheckForTimeOut+0x88>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d305      	bcc.n	800319c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003190:	2301      	movs	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e015      	b.n	80031c8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20b      	bcs.n	80031be <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad2      	subs	r2, r2, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ff98 	bl	80030e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	e004      	b.n	80031c8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031c8:	f000 ff4e 	bl	8004068 <vPortExitCritical>

    return xReturn;
 80031cc:	69fb      	ldr	r3, [r7, #28]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000011c 	.word	0x2000011c
 80031dc:	20000130 	.word	0x20000130

080031e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <vTaskMissedYield+0x14>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	2000012c 	.word	0x2000012c

080031f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003200:	f000 f852 	bl	80032a8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <prvIdleTask+0x28>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d9f9      	bls.n	8003200 <prvIdleTask+0x8>
            {
                taskYIELD();
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <prvIdleTask+0x2c>)
 800320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800321c:	e7f0      	b.n	8003200 <prvIdleTask+0x8>
 800321e:	bf00      	nop
 8003220:	20000044 	.word	0x20000044
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	e00c      	b.n	800324e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <prvInitialiseTaskLists+0x60>)
 8003240:	4413      	add	r3, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fb5c 	bl	8001900 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3301      	adds	r3, #1
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d9ef      	bls.n	8003234 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003254:	480d      	ldr	r0, [pc, #52]	; (800328c <prvInitialiseTaskLists+0x64>)
 8003256:	f7fe fb53 	bl	8001900 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800325a:	480d      	ldr	r0, [pc, #52]	; (8003290 <prvInitialiseTaskLists+0x68>)
 800325c:	f7fe fb50 	bl	8001900 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003260:	480c      	ldr	r0, [pc, #48]	; (8003294 <prvInitialiseTaskLists+0x6c>)
 8003262:	f7fe fb4d 	bl	8001900 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003266:	480c      	ldr	r0, [pc, #48]	; (8003298 <prvInitialiseTaskLists+0x70>)
 8003268:	f7fe fb4a 	bl	8001900 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <prvInitialiseTaskLists+0x74>)
 800326e:	f7fe fb47 	bl	8001900 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <prvInitialiseTaskLists+0x78>)
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <prvInitialiseTaskLists+0x64>)
 8003276:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <prvInitialiseTaskLists+0x7c>)
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <prvInitialiseTaskLists+0x68>)
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000044 	.word	0x20000044
 800328c:	200000a8 	.word	0x200000a8
 8003290:	200000bc 	.word	0x200000bc
 8003294:	200000d8 	.word	0x200000d8
 8003298:	200000ec 	.word	0x200000ec
 800329c:	20000104 	.word	0x20000104
 80032a0:	200000d0 	.word	0x200000d0
 80032a4:	200000d4 	.word	0x200000d4

080032a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ae:	e019      	b.n	80032e4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80032b0:	f000 feaa 	bl	8004008 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <prvCheckTasksWaitingTermination+0x50>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fb83 	bl	80019cc <uxListRemove>
                --uxCurrentNumberOfTasks;
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <prvCheckTasksWaitingTermination+0x54>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <prvCheckTasksWaitingTermination+0x54>)
 80032ce:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <prvCheckTasksWaitingTermination+0x58>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <prvCheckTasksWaitingTermination+0x58>)
 80032d8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80032da:	f000 fec5 	bl	8004068 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f810 	bl	8003304 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <prvCheckTasksWaitingTermination+0x58>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e1      	bne.n	80032b0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200000ec 	.word	0x200000ec
 80032fc:	20000118 	.word	0x20000118
 8003300:	20000100 	.word	0x20000100

08003304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f80b 	bl	800432c <vPortFree>
            vPortFree( pxTCB );
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f001 f808 	bl	800432c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <prvResetNextTaskUnblockTime+0x30>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <prvResetNextTaskUnblockTime+0x34>)
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800333a:	e005      	b.n	8003348 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <prvResetNextTaskUnblockTime+0x30>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <prvResetNextTaskUnblockTime+0x34>)
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200000d0 	.word	0x200000d0
 8003358:	20000138 	.word	0x20000138

0800335c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <xTaskGetSchedulerState+0x34>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800336a:	2301      	movs	r3, #1
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	e008      	b.n	8003382 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <xTaskGetSchedulerState+0x38>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003378:	2302      	movs	r3, #2
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	e001      	b.n	8003382 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003382:	687b      	ldr	r3, [r7, #4]
    }
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	20000124 	.word	0x20000124
 8003394:	20000140 	.word	0x20000140

08003398 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8087 	beq.w	80034be <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <xTaskPriorityInherit+0x130>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d276      	bcs.n	80034ac <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	db06      	blt.n	80033d4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c6:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <xTaskPriorityInherit+0x130>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f1c3 0205 	rsb	r2, r3, #5
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6959      	ldr	r1, [r3, #20]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4a39      	ldr	r2, [pc, #228]	; (80034cc <xTaskPriorityInherit+0x134>)
 80033e6:	4413      	add	r3, r2
 80033e8:	4299      	cmp	r1, r3
 80033ea:	d157      	bne.n	800349c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe faeb 	bl	80019cc <uxListRemove>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2201      	movs	r2, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43da      	mvns	r2, r3
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <xTaskPriorityInherit+0x138>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4013      	ands	r3, r2
 800340e:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <xTaskPriorityInherit+0x138>)
 8003410:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <xTaskPriorityInherit+0x130>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	2201      	movs	r2, #1
 8003422:	409a      	lsls	r2, r3
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <xTaskPriorityInherit+0x138>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4313      	orrs	r3, r2
 800342a:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <xTaskPriorityInherit+0x138>)
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	4926      	ldr	r1, [pc, #152]	; (80034cc <xTaskPriorityInherit+0x134>)
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3304      	adds	r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	3204      	adds	r2, #4
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4a16      	ldr	r2, [pc, #88]	; (80034cc <xTaskPriorityInherit+0x134>)
 8003472:	441a      	add	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	615a      	str	r2, [r3, #20]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4913      	ldr	r1, [pc, #76]	; (80034cc <xTaskPriorityInherit+0x134>)
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	480f      	ldr	r0, [pc, #60]	; (80034cc <xTaskPriorityInherit+0x134>)
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4403      	add	r3, r0
 8003498:	6019      	str	r1, [r3, #0]
 800349a:	e004      	b.n	80034a6 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <xTaskPriorityInherit+0x130>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e008      	b.n	80034be <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <xTaskPriorityInherit+0x130>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d201      	bcs.n	80034be <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80034be:	697b      	ldr	r3, [r7, #20]
    }
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000040 	.word	0x20000040
 80034cc:	20000044 	.word	0x20000044
 80034d0:	20000120 	.word	0x20000120

080034d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 808c 	beq.w	8003604 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80034ec:	4b48      	ldr	r3, [pc, #288]	; (8003610 <xTaskPriorityDisinherit+0x13c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d00a      	beq.n	800350c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	613b      	str	r3, [r7, #16]
    }
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	60fb      	str	r3, [r7, #12]
    }
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	1e5a      	subs	r2, r3, #1
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	429a      	cmp	r2, r3
 800353e:	d061      	beq.n	8003604 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	2b00      	cmp	r3, #0
 8003546:	d15d      	bne.n	8003604 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	3304      	adds	r3, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fa3d 	bl	80019cc <uxListRemove>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	2201      	movs	r2, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <xTaskPriorityDisinherit+0x140>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4013      	ands	r3, r2
 800356a:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <xTaskPriorityDisinherit+0x140>)
 800356c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f1c3 0205 	rsb	r2, r3, #5
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	2201      	movs	r2, #1
 8003588:	409a      	lsls	r2, r3
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <xTaskPriorityDisinherit+0x140>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	4a20      	ldr	r2, [pc, #128]	; (8003614 <xTaskPriorityDisinherit+0x140>)
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	491f      	ldr	r1, [pc, #124]	; (8003618 <xTaskPriorityDisinherit+0x144>)
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3304      	adds	r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	3204      	adds	r2, #4
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	1d1a      	adds	r2, r3, #4
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	609a      	str	r2, [r3, #8]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <xTaskPriorityDisinherit+0x144>)
 80035d8:	441a      	add	r2, r3
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	615a      	str	r2, [r3, #20]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	490d      	ldr	r1, [pc, #52]	; (8003618 <xTaskPriorityDisinherit+0x144>)
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	4809      	ldr	r0, [pc, #36]	; (8003618 <xTaskPriorityDisinherit+0x144>)
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4403      	add	r3, r0
 80035fe:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003604:	69fb      	ldr	r3, [r7, #28]
    }
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000040 	.word	0x20000040
 8003614:	20000120 	.word	0x20000120
 8003618:	20000044 	.word	0x20000044

0800361c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800362a:	2301      	movs	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a1 	beq.w	8003778 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	613b      	str	r3, [r7, #16]
    }
 8003650:	bf00      	nop
 8003652:	e7fe      	b.n	8003652 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d902      	bls.n	8003664 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e002      	b.n	800366a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	429a      	cmp	r2, r3
 8003672:	f000 8081 	beq.w	8003778 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	429a      	cmp	r2, r3
 800367e:	d17b      	bne.n	8003778 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003680:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	429a      	cmp	r2, r3
 8003688:	d10a      	bne.n	80036a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60fb      	str	r3, [r7, #12]
    }
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	db04      	blt.n	80036be <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f1c3 0205 	rsb	r2, r3, #5
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	6959      	ldr	r1, [r3, #20]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80036ce:	4413      	add	r3, r2
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d151      	bne.n	8003778 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe f977 	bl	80019cc <uxListRemove>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2201      	movs	r2, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4013      	ands	r3, r2
 80036f6:	4a24      	ldr	r2, [pc, #144]	; (8003788 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80036f8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	2201      	movs	r2, #1
 8003700:	409a      	lsls	r2, r3
 8003702:	4b21      	ldr	r3, [pc, #132]	; (8003788 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4313      	orrs	r3, r2
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	491c      	ldr	r1, [pc, #112]	; (8003784 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3304      	adds	r3, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	3204      	adds	r2, #4
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	1d1a      	adds	r2, r3, #4
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003750:	441a      	add	r2, r3
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	615a      	str	r2, [r3, #20]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	490a      	ldr	r1, [pc, #40]	; (8003784 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1c59      	adds	r1, r3, #1
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4403      	add	r3, r0
 8003776:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003778:	bf00      	nop
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000040 	.word	0x20000040
 8003784:	20000044 	.word	0x20000044
 8003788:	20000120 	.word	0x20000120

0800378c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379e:	3201      	adds	r2, #1
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 80037a2:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037a4:	681b      	ldr	r3, [r3, #0]
    }
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	20000040 	.word	0x20000040

080037b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <prvAddCurrentTaskToDelayedList+0xe4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe f8fe 	bl	80019cc <uxListRemove>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4013      	ands	r3, r2
 80037ea:	4a2d      	ldr	r2, [pc, #180]	; (80038a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80037ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d124      	bne.n	8003840 <prvAddCurrentTaskToDelayedList+0x8c>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d021      	beq.n	8003840 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037fc:	4b29      	ldr	r3, [pc, #164]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	3204      	adds	r2, #4
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003830:	615a      	str	r2, [r3, #20]
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800383e:	e026      	b.n	800388e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d209      	bcs.n	800386c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7fe f878 	bl	800195a <vListInsert>
}
 800386a:	e010      	b.n	800388e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <prvAddCurrentTaskToDelayedList+0xf8>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7fe f86e 	bl	800195a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d202      	bcs.n	800388e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000011c 	.word	0x2000011c
 800389c:	20000040 	.word	0x20000040
 80038a0:	20000120 	.word	0x20000120
 80038a4:	20000104 	.word	0x20000104
 80038a8:	200000d4 	.word	0x200000d4
 80038ac:	200000d0 	.word	0x200000d0
 80038b0:	20000138 	.word	0x20000138

080038b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80038be:	f000 fa47 	bl	8003d50 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <xTimerCreateTimerTask+0x54>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <xTimerCreateTimerTask+0x58>)
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	2303      	movs	r3, #3
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	2246      	movs	r2, #70	; 0x46
 80038d6:	490e      	ldr	r1, [pc, #56]	; (8003910 <xTimerCreateTimerTask+0x5c>)
 80038d8:	480e      	ldr	r0, [pc, #56]	; (8003914 <xTimerCreateTimerTask+0x60>)
 80038da:	f7fe fdd7 	bl	800248c <xTaskCreate>
 80038de:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <xTimerCreateTimerTask+0x48>
        __asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	603b      	str	r3, [r7, #0]
    }
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <xTimerCreateTimerTask+0x46>
        return xReturn;
 80038fc:	687b      	ldr	r3, [r7, #4]
    }
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000174 	.word	0x20000174
 800390c:	20000178 	.word	0x20000178
 8003910:	08004608 	.word	0x08004608
 8003914:	080039bd 	.word	0x080039bd

08003918 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003924:	e008      	b.n	8003938 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	18d1      	adds	r1, r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f8dd 	bl	8003b04 <prvInsertTimerInActiveList>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ea      	bne.n	8003926 <prvReloadTimer+0xe>
        }
    }
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <prvProcessExpiredTimer+0x5c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3304      	adds	r3, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f829 	bl	80019cc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff ffc3 	bl	8003918 <prvReloadTimer>
 8003992:	e008      	b.n	80039a6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	4798      	blx	r3
    }
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	2000016c 	.word	0x2000016c

080039bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f857 	bl	8003a7c <prvGetNextExpireTime>
 80039ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4619      	mov	r1, r3
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f803 	bl	80039e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039da:	f000 f8d5 	bl	8003b88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039de:	e7f1      	b.n	80039c4 <prvTimerTask+0x8>

080039e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039ea:	f7fe ffb1 	bl	8002950 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f866 	bl	8003ac4 <prvSampleTimeNow>
 80039f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d130      	bne.n	8003a62 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <prvProcessTimerOrBlockTask+0x3c>
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d806      	bhi.n	8003a1c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a0e:	f7fe ffad 	bl	800296c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ffa1 	bl	800395c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a1a:	e024      	b.n	8003a66 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <prvProcessTimerOrBlockTask+0x90>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <prvProcessTimerOrBlockTask+0x94>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f7fe fcef 	bl	8002424 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a46:	f7fe ff91 	bl	800296c <xTaskResumeAll>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <prvProcessTimerOrBlockTask+0x98>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
    }
 8003a60:	e001      	b.n	8003a66 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a62:	f7fe ff83 	bl	800296c <xTaskResumeAll>
    }
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000170 	.word	0x20000170
 8003a74:	20000174 	.word	0x20000174
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <prvGetNextExpireTime+0x44>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <prvGetNextExpireTime+0x32>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <prvGetNextExpireTime+0x44>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e001      	b.n	8003ab2 <prvGetNextExpireTime+0x36>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
    }
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	2000016c 	.word	0x2000016c

08003ac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003acc:	f7ff f84a 	bl	8002b64 <xTaskGetTickCount>
 8003ad0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <prvSampleTimeNow+0x3c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d205      	bcs.n	8003ae8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003adc:	f000 f912 	bl	8003d04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003aee:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <prvSampleTimeNow+0x3c>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003af4:	68fb      	ldr	r3, [r7, #12]
    }
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2000017c 	.word	0x2000017c

08003b04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d812      	bhi.n	8003b50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e01b      	b.n	8003b76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <prvInsertTimerInActiveList+0x7c>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fd ff06 	bl	800195a <vListInsert>
 8003b4e:	e012      	b.n	8003b76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d206      	bcs.n	8003b66 <prvInsertTimerInActiveList+0x62>
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e007      	b.n	8003b76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <prvInsertTimerInActiveList+0x80>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f7fd fef2 	bl	800195a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b76:	697b      	ldr	r3, [r7, #20]
    }
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000170 	.word	0x20000170
 8003b84:	2000016c 	.word	0x2000016c

08003b88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b8e:	e0a6      	b.n	8003cde <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f2c0 80a2 	blt.w	8003cdc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fd ff0f 	bl	80019cc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff87 	bl	8003ac4 <prvSampleTimeNow>
 8003bb6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 808e 	bhi.w	8003cde <prvProcessReceivedCommands+0x156>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <prvProcessReceivedCommands+0x40>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bed 	.word	0x08003bed
 8003bd0:	08003c55 	.word	0x08003c55
 8003bd4:	08003c69 	.word	0x08003c69
 8003bd8:	08003cb3 	.word	0x08003cb3
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bed 	.word	0x08003bed
 8003be4:	08003c55 	.word	0x08003c55
 8003be8:	08003c69 	.word	0x08003c69
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	18d1      	adds	r1, r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	69f8      	ldr	r0, [r7, #28]
 8003c0c:	f7ff ff7a 	bl	8003b04 <prvInsertTimerInActiveList>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d063      	beq.n	8003cde <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	69f8      	ldr	r0, [r7, #28]
 8003c32:	f7ff fe71 	bl	8003918 <prvReloadTimer>
 8003c36:	e008      	b.n	8003c4a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	69f8      	ldr	r0, [r7, #28]
 8003c50:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c52:	e044      	b.n	8003cde <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8003c66:	e03a      	b.n	8003cde <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	617b      	str	r3, [r7, #20]
    }
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	18d1      	adds	r1, r2, r3
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	69f8      	ldr	r0, [r7, #28]
 8003cac:	f7ff ff2a 	bl	8003b04 <prvInsertTimerInActiveList>
                        break;
 8003cb0:	e015      	b.n	8003cde <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003cc0:	69f8      	ldr	r0, [r7, #28]
 8003cc2:	f000 fb33 	bl	800432c <vPortFree>
 8003cc6:	e00a      	b.n	8003cde <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cda:	e000      	b.n	8003cde <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003cdc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <prvProcessReceivedCommands+0x178>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f107 0108 	add.w	r1, r7, #8
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe f895 	bl	8001e18 <xQueueReceive>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af4d 	bne.w	8003b90 <prvProcessReceivedCommands+0x8>
        }
    }
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000174 	.word	0x20000174

08003d04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d0a:	e009      	b.n	8003d20 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <prvSwitchTimerLists+0x44>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d16:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1a:	6838      	ldr	r0, [r7, #0]
 8003d1c:	f7ff fe1e 	bl	800395c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <prvSwitchTimerLists+0x44>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <prvSwitchTimerLists+0x44>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <prvSwitchTimerLists+0x48>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <prvSwitchTimerLists+0x44>)
 8003d36:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <prvSwitchTimerLists+0x48>)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6013      	str	r3, [r2, #0]
    }
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	2000016c 	.word	0x2000016c
 8003d4c:	20000170 	.word	0x20000170

08003d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d54:	f000 f958 	bl	8004008 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <prvCheckForValidListAndQueue+0x40>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d113      	bne.n	8003d88 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <prvCheckForValidListAndQueue+0x44>)
 8003d62:	f7fd fdcd 	bl	8001900 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d66:	480c      	ldr	r0, [pc, #48]	; (8003d98 <prvCheckForValidListAndQueue+0x48>)
 8003d68:	f7fd fdca 	bl	8001900 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <prvCheckForValidListAndQueue+0x4c>)
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <prvCheckForValidListAndQueue+0x44>)
 8003d70:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <prvCheckForValidListAndQueue+0x50>)
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <prvCheckForValidListAndQueue+0x48>)
 8003d76:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d78:	2200      	movs	r2, #0
 8003d7a:	210c      	movs	r1, #12
 8003d7c:	2005      	movs	r0, #5
 8003d7e:	f7fd fedf 	bl	8001b40 <xQueueGenericCreate>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4a02      	ldr	r2, [pc, #8]	; (8003d90 <prvCheckForValidListAndQueue+0x40>)
 8003d86:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d88:	f000 f96e 	bl	8004068 <vPortExitCritical>
    }
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000174 	.word	0x20000174
 8003d94:	20000144 	.word	0x20000144
 8003d98:	20000158 	.word	0x20000158
 8003d9c:	2000016c 	.word	0x2000016c
 8003da0:	20000170 	.word	0x20000170

08003da4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3b04      	subs	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3b04      	subs	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b04      	subs	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <pxPortInitialiseStack+0x64>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3b14      	subs	r3, #20
 8003dde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b04      	subs	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f06f 0202 	mvn.w	r2, #2
 8003df2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3b20      	subs	r3, #32
 8003df8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	08003e0d 	.word	0x08003e0d

08003e0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <prvTaskExitError+0x54>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d00a      	beq.n	8003e36 <prvTaskExitError+0x2a>
        __asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
    }
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <prvTaskExitError+0x28>
        __asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60bb      	str	r3, [r7, #8]
    }
 8003e48:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e4a:	bf00      	nop
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0fc      	beq.n	8003e4c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000014 	.word	0x20000014
	...

08003e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <pxCurrentTCBConst2>)
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	6808      	ldr	r0, [r1, #0]
 8003e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7a:	f380 8809 	msr	PSP, r0
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8811 	msr	BASEPRI, r0
 8003e8a:	4770      	bx	lr
 8003e8c:	f3af 8000 	nop.w

08003e90 <pxCurrentTCBConst2>:
 8003e90:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e98:	4808      	ldr	r0, [pc, #32]	; (8003ebc <prvPortStartFirstTask+0x24>)
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	6800      	ldr	r0, [r0, #0]
 8003e9e:	f380 8808 	msr	MSP, r0
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f380 8814 	msr	CONTROL, r0
 8003eaa:	b662      	cpsie	i
 8003eac:	b661      	cpsie	f
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	df00      	svc	0
 8003eb8:	bf00      	nop
 8003eba:	0000      	.short	0x0000
 8003ebc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop

08003ec4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eca:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <xPortStartScheduler+0x120>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a46      	ldr	r2, [pc, #280]	; (8003fe8 <xPortStartScheduler+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10a      	bne.n	8003eea <xPortStartScheduler+0x26>
        __asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	613b      	str	r3, [r7, #16]
    }
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <xPortStartScheduler+0x120>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <xPortStartScheduler+0x128>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10a      	bne.n	8003f0a <xPortStartScheduler+0x46>
        __asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60fb      	str	r3, [r7, #12]
    }
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <xPortStartScheduler+0x12c>)
 8003f0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <xPortStartScheduler+0x130>)
 8003f30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f34:	2207      	movs	r2, #7
 8003f36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f38:	e009      	b.n	8003f4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	4a2d      	ldr	r2, [pc, #180]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d0ef      	beq.n	8003f3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1c3 0307 	rsb	r3, r3, #7
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d00a      	beq.n	8003f7c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60bb      	str	r3, [r7, #8]
    }
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <xPortStartScheduler+0x134>)
 8003f90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <xPortStartScheduler+0x138>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <xPortStartScheduler+0x138>)
 8003fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fa4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <xPortStartScheduler+0x138>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <xPortStartScheduler+0x138>)
 8003fac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003fb2:	f000 f8db 	bl	800416c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <xPortStartScheduler+0x13c>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003fbc:	f000 f8f0 	bl	80041a0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <xPortStartScheduler+0x140>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <xPortStartScheduler+0x140>)
 8003fc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003fcc:	f7ff ff64 	bl	8003e98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003fd0:	f7fe feee 	bl	8002db0 <vTaskSwitchContext>
    prvTaskExitError();
 8003fd4:	f7ff ff1a 	bl	8003e0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	e000ed00 	.word	0xe000ed00
 8003fe8:	410fc271 	.word	0x410fc271
 8003fec:	410fc270 	.word	0x410fc270
 8003ff0:	e000e400 	.word	0xe000e400
 8003ff4:	20000180 	.word	0x20000180
 8003ff8:	20000184 	.word	0x20000184
 8003ffc:	e000ed20 	.word	0xe000ed20
 8004000:	20000014 	.word	0x20000014
 8004004:	e000ef34 	.word	0xe000ef34

08004008 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
        __asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	607b      	str	r3, [r7, #4]
    }
 8004020:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <vPortEnterCritical+0x58>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <vPortEnterCritical+0x58>)
 800402a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <vPortEnterCritical+0x58>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10f      	bne.n	8004054 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <vPortEnterCritical+0x5c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <vPortEnterCritical+0x4c>
        __asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	603b      	str	r3, [r7, #0]
    }
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <vPortEnterCritical+0x4a>
    }
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	20000014 	.word	0x20000014
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <vPortExitCritical+0x50>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <vPortExitCritical+0x24>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	607b      	str	r3, [r7, #4]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <vPortExitCritical+0x50>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3b01      	subs	r3, #1
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <vPortExitCritical+0x50>)
 8004094:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <vPortExitCritical+0x50>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <vPortExitCritical+0x42>
 800409e:	2300      	movs	r3, #0
 80040a0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000014 	.word	0x20000014
 80040bc:	00000000 	.word	0x00000000

080040c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040c0:	f3ef 8009 	mrs	r0, PSP
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <pxCurrentTCBConst>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f01e 0f10 	tst.w	lr, #16
 80040d0:	bf08      	it	eq
 80040d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	6010      	str	r0, [r2, #0]
 80040dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040e4:	f380 8811 	msr	BASEPRI, r0
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f7fe fe5e 	bl	8002db0 <vTaskSwitchContext>
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f380 8811 	msr	BASEPRI, r0
 80040fc:	bc09      	pop	{r0, r3}
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	6808      	ldr	r0, [r1, #0]
 8004102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004106:	f01e 0f10 	tst.w	lr, #16
 800410a:	bf08      	it	eq
 800410c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004110:	f380 8809 	msr	PSP, r0
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst>:
 8004120:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
        __asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	607b      	str	r3, [r7, #4]
    }
 8004140:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004142:	f7fe fd1f 	bl	8002b84 <xTaskIncrementTick>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SysTick_Handler+0x40>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f383 8811 	msr	BASEPRI, r3
    }
 800415e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <vPortSetupTimerInterrupt+0x28>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <vPortSetupTimerInterrupt+0x2c>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <vPortSetupTimerInterrupt+0x30>)
 800417e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004182:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <vPortSetupTimerInterrupt+0x28>)
 8004186:	2207      	movs	r2, #7
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e010 	.word	0xe000e010
 8004198:	e000e018 	.word	0xe000e018
 800419c:	e000e014 	.word	0xe000e014

080041a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041b0 <vPortEnableVFP+0x10>
 80041a4:	6801      	ldr	r1, [r0, #0]
 80041a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041aa:	6001      	str	r1, [r0, #0]
 80041ac:	4770      	bx	lr
 80041ae:	0000      	.short	0x0000
 80041b0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80041c4:	f7fe fbc4 	bl	8002950 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80041c8:	4b53      	ldr	r3, [pc, #332]	; (8004318 <pvPortMalloc+0x160>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041d0:	f000 f908 	bl	80043e4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d012      	beq.n	8004200 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80041da:	2208      	movs	r2, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	3308      	adds	r3, #8
 80041e6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d804      	bhi.n	80041fc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	e001      	b.n	8004200 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	db70      	blt.n	80042e8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d06d      	beq.n	80042e8 <pvPortMalloc+0x130>
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <pvPortMalloc+0x164>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d868      	bhi.n	80042e8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004216:	4b42      	ldr	r3, [pc, #264]	; (8004320 <pvPortMalloc+0x168>)
 8004218:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <pvPortMalloc+0x168>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004220:	e004      	b.n	800422c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d903      	bls.n	800423e <pvPortMalloc+0x86>
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f1      	bne.n	8004222 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <pvPortMalloc+0x160>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	429a      	cmp	r2, r3
 8004246:	d04f      	beq.n	80042e8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2208      	movs	r2, #8
 800424e:	4413      	add	r3, r2
 8004250:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	1ad2      	subs	r2, r2, r3
 8004262:	2308      	movs	r3, #8
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	429a      	cmp	r2, r3
 8004268:	d91f      	bls.n	80042aa <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <pvPortMalloc+0xda>
        __asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	613b      	str	r3, [r7, #16]
    }
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042a4:	6978      	ldr	r0, [r7, #20]
 80042a6:	f000 f8f9 	bl	800449c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	; (800431c <pvPortMalloc+0x164>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <pvPortMalloc+0x164>)
 80042b6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042b8:	4b18      	ldr	r3, [pc, #96]	; (800431c <pvPortMalloc+0x164>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <pvPortMalloc+0x16c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d203      	bcs.n	80042cc <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <pvPortMalloc+0x164>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <pvPortMalloc+0x16c>)
 80042ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <pvPortMalloc+0x170>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a10      	ldr	r2, [pc, #64]	; (8004328 <pvPortMalloc+0x170>)
 80042e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80042e8:	f7fe fb40 	bl	800296c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <pvPortMalloc+0x154>
        __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
    }
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <pvPortMalloc+0x152>
    return pvReturn;
 800430c:	69fb      	ldr	r3, [r7, #28]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20007990 	.word	0x20007990
 800431c:	20007994 	.word	0x20007994
 8004320:	20007988 	.word	0x20007988
 8004324:	20007998 	.word	0x20007998
 8004328:	2000799c 	.word	0x2000799c

0800432c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d049      	beq.n	80043d2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800433e:	2308      	movs	r3, #8
 8004340:	425b      	negs	r3, r3
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	db0a      	blt.n	800436a <vPortFree+0x3e>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
    }
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <vPortFree+0x5c>
        __asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60bb      	str	r3, [r7, #8]
    }
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0fdb      	lsrs	r3, r3, #31
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01c      	beq.n	80043d2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d118      	bne.n	80043d2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80043ac:	f7fe fad0 	bl	8002950 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <vPortFree+0xb0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <vPortFree+0xb0>)
 80043bc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f000 f86c 	bl	800449c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <vPortFree+0xb4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <vPortFree+0xb4>)
 80043cc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043ce:	f7fe facd 	bl	800296c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20007994 	.word	0x20007994
 80043e0:	200079a0 	.word	0x200079a0

080043e4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80043ee:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <prvHeapInit+0xa4>)
 80043f2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3307      	adds	r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <prvHeapInit+0xa4>)
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800441c:	4a1b      	ldr	r2, [pc, #108]	; (800448c <prvHeapInit+0xa8>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <prvHeapInit+0xa8>)
 8004424:	2200      	movs	r2, #0
 8004426:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004430:	2208      	movs	r2, #8
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a13      	ldr	r2, [pc, #76]	; (8004490 <prvHeapInit+0xac>)
 8004444:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <prvHeapInit+0xac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <prvHeapInit+0xac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <prvHeapInit+0xac>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <prvHeapInit+0xb0>)
 8004472:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a07      	ldr	r2, [pc, #28]	; (8004498 <prvHeapInit+0xb4>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000188 	.word	0x20000188
 800448c:	20007988 	.word	0x20007988
 8004490:	20007990 	.word	0x20007990
 8004494:	20007998 	.word	0x20007998
 8004498:	20007994 	.word	0x20007994

0800449c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <prvInsertBlockIntoFreeList+0xac>)
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e002      	b.n	80044b0 <prvInsertBlockIntoFreeList+0x14>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d8f7      	bhi.n	80044aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d108      	bne.n	80044de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	441a      	add	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d118      	bne.n	8004524 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <prvInsertBlockIntoFreeList+0xb0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d00d      	beq.n	800451a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e008      	b.n	800452c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <prvInsertBlockIntoFreeList+0xb0>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e003      	b.n	800452c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d002      	beq.n	800453a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20007988 	.word	0x20007988
 800454c:	20007990 	.word	0x20007990

08004550 <__libc_init_array>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4d0d      	ldr	r5, [pc, #52]	; (8004588 <__libc_init_array+0x38>)
 8004554:	4c0d      	ldr	r4, [pc, #52]	; (800458c <__libc_init_array+0x3c>)
 8004556:	1b64      	subs	r4, r4, r5
 8004558:	10a4      	asrs	r4, r4, #2
 800455a:	2600      	movs	r6, #0
 800455c:	42a6      	cmp	r6, r4
 800455e:	d109      	bne.n	8004574 <__libc_init_array+0x24>
 8004560:	4d0b      	ldr	r5, [pc, #44]	; (8004590 <__libc_init_array+0x40>)
 8004562:	4c0c      	ldr	r4, [pc, #48]	; (8004594 <__libc_init_array+0x44>)
 8004564:	f000 f82e 	bl	80045c4 <_init>
 8004568:	1b64      	subs	r4, r4, r5
 800456a:	10a4      	asrs	r4, r4, #2
 800456c:	2600      	movs	r6, #0
 800456e:	42a6      	cmp	r6, r4
 8004570:	d105      	bne.n	800457e <__libc_init_array+0x2e>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	f855 3b04 	ldr.w	r3, [r5], #4
 8004578:	4798      	blx	r3
 800457a:	3601      	adds	r6, #1
 800457c:	e7ee      	b.n	800455c <__libc_init_array+0xc>
 800457e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004582:	4798      	blx	r3
 8004584:	3601      	adds	r6, #1
 8004586:	e7f2      	b.n	800456e <__libc_init_array+0x1e>
 8004588:	08004628 	.word	0x08004628
 800458c:	08004628 	.word	0x08004628
 8004590:	08004628 	.word	0x08004628
 8004594:	0800462c 	.word	0x0800462c

08004598 <memcpy>:
 8004598:	440a      	add	r2, r1
 800459a:	4291      	cmp	r1, r2
 800459c:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a0:	d100      	bne.n	80045a4 <memcpy+0xc>
 80045a2:	4770      	bx	lr
 80045a4:	b510      	push	{r4, lr}
 80045a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ae:	4291      	cmp	r1, r2
 80045b0:	d1f9      	bne.n	80045a6 <memcpy+0xe>
 80045b2:	bd10      	pop	{r4, pc}

080045b4 <memset>:
 80045b4:	4402      	add	r2, r0
 80045b6:	4603      	mov	r3, r0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <memset+0xa>
 80045bc:	4770      	bx	lr
 80045be:	f803 1b01 	strb.w	r1, [r3], #1
 80045c2:	e7f9      	b.n	80045b8 <memset+0x4>

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
