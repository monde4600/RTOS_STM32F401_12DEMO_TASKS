
RTOS_TASK7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb0  08003bb0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb8  08003bb8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007988  20000018  08003bd8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200079a0  08003bd8  000279a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ec4  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8f  00000000  00000000  00028f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a3d  00000000  00000000  0002bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fd7  00000000  00000000  00041705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1ed  00000000  00000000  0004b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d58c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020dc  00000000  00000000  000d591c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b64 	.word	0x08003b64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08003b64 	.word	0x08003b64

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:

u8 ButtonStateFlag = 0;


int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fa45 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f825 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f881 	bl	80005f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
	xTaskHandle PushHandle  = NULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
	xTaskCreate(PushButton,"Push Button",85,NULL,PushButtonPr,&PushHandle);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2255      	movs	r2, #85	; 0x55
 8000506:	4909      	ldr	r1, [pc, #36]	; (800052c <main+0x48>)
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <main+0x4c>)
 800050a:	f001 fc9d 	bl	8001e48 <xTaskCreate>

	xTaskHandle LedHandle = NULL ;
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
	xTaskCreate(Led,"Led ",85,NULL,LedPr,&LedHandle);
 8000512:	463b      	mov	r3, r7
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2302      	movs	r3, #2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2255      	movs	r2, #85	; 0x55
 800051e:	4905      	ldr	r1, [pc, #20]	; (8000534 <main+0x50>)
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x54>)
 8000522:	f001 fc91 	bl	8001e48 <xTaskCreate>

	/*Init Function*/


	/*start Scheduler */
	vTaskStartScheduler();
 8000526:	f001 fe9f 	bl	8002268 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x46>
 800052c:	08003b7c 	.word	0x08003b7c
 8000530:	080006d5 	.word	0x080006d5
 8000534:	08003b88 	.word	0x08003b88
 8000538:	080007ad 	.word	0x080007ad

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fb02 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xb4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xb4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <SystemClock_Config+0xb8>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fcf6 	bl	8000fa0 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 f885 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ff59 	bl	8001490 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005e4:	f000 f870 	bl	80006c8 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a29      	ldr	r2, [pc, #164]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a22      	ldr	r2, [pc, #136]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_GPIO_Init+0xc4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_GPIO_Init+0xc4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_GPIO_Init+0xc4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	4815      	ldr	r0, [pc, #84]	; (80006c0 <MX_GPIO_Init+0xc8>)
 800066a:	f000 fc65 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <MX_GPIO_Init+0xcc>)
 8000674:	f000 fc60 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000682:	2302      	movs	r3, #2
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4619      	mov	r1, r3
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <MX_GPIO_Init+0xc8>)
 8000692:	f000 fab5 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000696:	2320      	movs	r3, #32
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_GPIO_Init+0xcc>)
 80006ae:	f000 faa7 	bl	8000c00 <HAL_GPIO_Init>

}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020000 	.word	0x40020000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <PushButton>:
}
#endif /* USE_FULL_ASSERT */


void PushButton(void * pvparam)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 250;
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
	 portTickType Start = xTaskGetTickCount();
 80006e0:	f001 ff1e 	bl	8002520 <xTaskGetTickCount>
 80006e4:	4603      	mov	r3, r0
 80006e6:	60bb      	str	r3, [r7, #8]
	 UBaseType_t uxSavedInterruptStatus;
	 while (1){
		 /* if the Push Button is Pressed */
		 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <PushButton+0xcc>)
 80006ee:	f000 fc0b 	bl	8000f08 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d14b      	bne.n	8000790 <PushButton+0xbc>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80006f8:	f3ef 8211 	mrs	r2, BASEPRI
 80006fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	f3bf 8f6f 	isb	sy
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
			 /* disable int */
			 uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 8000712:	633b      	str	r3, [r7, #48]	; 0x30



			 /* If the Resource No One is Using so Stop Scheduling to Use it **/
			 if(ButtonStateFlag == 0){
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <PushButton+0xd0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d130      	bne.n	800077e <PushButton+0xaa>
        __asm volatile
 800071c:	f3ef 8211 	mrs	r2, BASEPRI
 8000720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000724:	f383 8811 	msr	BASEPRI, r3
 8000728:	f3bf 8f6f 	isb	sy
 800072c:	f3bf 8f4f 	dsb	sy
 8000730:	617a      	str	r2, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8000734:	697b      	ldr	r3, [r7, #20]
				 /**Disable Global Interrupt*/
				uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 8000736:	633b      	str	r3, [r7, #48]	; 0x30

				 /*Raise the Flag */
				 ButtonStateFlag = 1;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <PushButton+0xd0>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000740:	61bb      	str	r3, [r7, #24]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000748:	bf00      	nop
				  taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );



				 /*Change the State **/
				 ButtonState = 0;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <PushButton+0xd4>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
        __asm volatile
 8000750:	f3ef 8211 	mrs	r2, BASEPRI
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	623a      	str	r2, [r7, #32]
 8000766:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8000768:	6a3b      	ldr	r3, [r7, #32]




				 /**Disable Global Interrupt*/
				uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 800076a:	633b      	str	r3, [r7, #48]	; 0x30


				 /*Release the Flag */
				 ButtonStateFlag = 0;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <PushButton+0xd0>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	f383 8811 	msr	BASEPRI, r3
    }
 800077c:	e008      	b.n	8000790 <PushButton+0xbc>


			 }
			 /*Else Delay 10 Tick till the Resource is Free **/
			 else {
				 vTaskDelay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f001 fd3e 	bl	8002200 <vTaskDelay>
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f383 8811 	msr	BASEPRI, r3
    }
 800078e:	bf00      	nop
			 }

		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fcb4 	bl	8002104 <xTaskDelayUntil>
		 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800079c:	e7a4      	b.n	80006e8 <PushButton+0x14>
 800079e:	bf00      	nop
 80007a0:	40020800 	.word	0x40020800
 80007a4:	20000034 	.word	0x20000034
 80007a8:	20000000 	.word	0x20000000

080007ac <Led>:
	 }

}


void Led(void * pvparam){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 100;
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
	 portTickType Start = xTaskGetTickCount();
 80007b8:	f001 feb2 	bl	8002520 <xTaskGetTickCount>
 80007bc:	4603      	mov	r3, r0
 80007be:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80007c0:	f3ef 8211 	mrs	r2, BASEPRI
 80007c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
        return ulOriginalBASEPRI;
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	 UBaseType_t uxSavedInterruptStatus;
	 while (1){
		 /* if the Push Button is Pressed */

		 /**Disable Global Interrupt*/
		 uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
		 /* If the Resource No One is Using so Raise a Flag to Use it **/
		 if(ButtonStateFlag == 0){
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <Led+0xcc>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d138      	bne.n	8000856 <Led+0xaa>
        __asm volatile
 80007e4:	f3ef 8211 	mrs	r2, BASEPRI
 80007e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ec:	f383 8811 	msr	BASEPRI, r3
 80007f0:	f3bf 8f6f 	isb	sy
 80007f4:	f3bf 8f4f 	dsb	sy
 80007f8:	623a      	str	r2, [r7, #32]
 80007fa:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80007fc:	6a3b      	ldr	r3, [r7, #32]
			 /**Disable Global Interrupt*/
			 uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30

			 /*Raise the Flag */
			 ButtonStateFlag = 1;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <Led+0xcc>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	f383 8811 	msr	BASEPRI, r3
    }
 8000810:	bf00      	nop

			 /**Enable Global Interrupt*/
			  taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );


			 if (ButtonState == 0){
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <Led+0xd0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d106      	bne.n	8000828 <Led+0x7c>

				 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800081a:	2120      	movs	r1, #32
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <Led+0xd4>)
 800081e:	f000 fba4 	bl	8000f6a <HAL_GPIO_TogglePin>
				 ButtonState = 1;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <Led+0xd0>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
        __asm volatile
 8000828:	f3ef 8211 	mrs	r2, BASEPRI
 800082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000830:	f383 8811 	msr	BASEPRI, r3
 8000834:	f3bf 8f6f 	isb	sy
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	617a      	str	r2, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8000840:	697b      	ldr	r3, [r7, #20]
			 }

			 /**Disable Global Interrupt*/
			 uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 8000842:	633b      	str	r3, [r7, #48]	; 0x30

			 /*Release the Flag */
			 ButtonStateFlag = 0;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <Led+0xcc>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800084c:	61bb      	str	r3, [r7, #24]
        __asm volatile
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	f383 8811 	msr	BASEPRI, r3
    }
 8000854:	e008      	b.n	8000868 <Led+0xbc>
			  taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

		 }
		 /*Else Delay 10 Tick till the Resource is Free **/
		 else {
			 vTaskDelay(10);
 8000856:	200a      	movs	r0, #10
 8000858:	f001 fcd2 	bl	8002200 <vTaskDelay>
 800085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085e:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f383 8811 	msr	BASEPRI, r3
    }
 8000866:	bf00      	nop
			 /**Enable Global Interrupt*/
			  taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fc48 	bl	8002104 <xTaskDelayUntil>
		 uxSavedInterruptStatus =  taskENTER_CRITICAL_FROM_ISR();
 8000874:	e7a4      	b.n	80007c0 <Led+0x14>
 8000876:	bf00      	nop
 8000878:	20000034 	.word	0x20000034
 800087c:	20000000 	.word	0x20000000
 8000880:	40020000 	.word	0x40020000

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800092a:	490e      	ldr	r1, [pc, #56]	; (8000964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000940:	4c0b      	ldr	r4, [pc, #44]	; (8000970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800094e:	f7ff ffd7 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000952:	f003 f8cd 	bl	8003af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000956:	f7ff fdc5 	bl	80004e4 <main>
  bx  lr    
 800095a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800095c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000968:	08003bc0 	.word	0x08003bc0
  ldr r2, =_sbss
 800096c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000970:	200079a0 	.word	0x200079a0

08000974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_Init+0x40>)
 8000982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_Init+0x40>)
 800098e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_Init+0x40>)
 800099a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f8f9 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff ff6a 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023c00 	.word	0x40023c00

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f903 	bl	8000be6 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f8d9 	bl	8000bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000004 	.word	0x20000004
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	20000008 	.word	0x20000008

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000038 	.word	0x20000038

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b64:	d301      	bcc.n	8000b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00f      	b.n	8000b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <SysTick_Config+0x40>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b72:	210f      	movs	r1, #15
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f7ff ff8e 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SysTick_Config+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SysTick_Config+0x40>)
 8000b84:	2207      	movs	r2, #7
 8000b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e000e010 	.word	0xe000e010

08000b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff47 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff5c 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ff8e 	bl	8000aec <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff5d 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffb0 	bl	8000b54 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	e159      	b.n	8000ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8148 	bne.w	8000eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d005      	beq.n	8000c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d130      	bne.n	8000cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d017      	beq.n	8000cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d123      	bne.n	8000d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	69b9      	ldr	r1, [r7, #24]
 8000d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0203 	and.w	r2, r3, #3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 80a2 	beq.w	8000eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a56      	ldr	r2, [pc, #344]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da2:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a49      	ldr	r2, [pc, #292]	; (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x202>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_GPIO_Init+0x2f4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x1fe>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x1fa>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a46      	ldr	r2, [pc, #280]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x1f6>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_GPIO_Init+0x300>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x1f2>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000e02:	2300      	movs	r3, #0
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	f002 0203 	and.w	r2, r2, #3
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e70:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	f67f aea2 	bls.w	8000c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e001      	b.n	8000f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f7c:	887a      	ldrh	r2, [r7, #2]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	041a      	lsls	r2, r3, #16
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e267      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d075      	beq.n	80010aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fbe:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d00c      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fca:	4b85      	ldr	r3, [pc, #532]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d112      	bne.n	8000ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd6:	4b82      	ldr	r3, [pc, #520]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fe2:	d10b      	bne.n	8000ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d05b      	beq.n	80010a8 <HAL_RCC_OscConfig+0x108>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d157      	bne.n	80010a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e242      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d106      	bne.n	8001014 <HAL_RCC_OscConfig+0x74>
 8001006:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a75      	ldr	r2, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e01d      	b.n	8001050 <HAL_RCC_OscConfig+0xb0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x98>
 800101e:	4b70      	ldr	r3, [pc, #448]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6f      	ldr	r2, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6c      	ldr	r2, [pc, #432]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0xb0>
 8001038:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a68      	ldr	r2, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b66      	ldr	r3, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a65      	ldr	r2, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fce0 	bl	8000a1c <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fcdc 	bl	8000a1c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e207      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0xc0>
 800107e:	e014      	b.n	80010aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fccc 	bl	8000a1c <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcc8 	bl	8000a1c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1f3      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	4b51      	ldr	r3, [pc, #324]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0xe8>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d063      	beq.n	800117e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010b6:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c2:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d11c      	bne.n	8001108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d116      	bne.n	8001108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_RCC_OscConfig+0x152>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d001      	beq.n	80010f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e1c7      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4937      	ldr	r1, [pc, #220]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	e03a      	b.n	800117e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <HAL_RCC_OscConfig+0x244>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001116:	f7ff fc81 	bl	8000a1c <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fc7d 	bl	8000a1c <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1a8      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4925      	ldr	r1, [pc, #148]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_RCC_OscConfig+0x244>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fc60 	bl	8000a1c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fc5c 	bl	8000a1c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e187      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d036      	beq.n	80011f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d016      	beq.n	80011c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_RCC_OscConfig+0x248>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001198:	f7ff fc40 	bl	8000a1c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc3c 	bl	8000a1c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e167      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x200>
 80011be:	e01b      	b.n	80011f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_RCC_OscConfig+0x248>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fc29 	bl	8000a1c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	e00e      	b.n	80011ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff fc25 	bl	8000a1c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d907      	bls.n	80011ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e150      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
 80011e0:	40023800 	.word	0x40023800
 80011e4:	42470000 	.word	0x42470000
 80011e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80011ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1ea      	bne.n	80011ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8097 	beq.w	8001334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120a:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a7c      	ldr	r2, [pc, #496]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b7a      	ldr	r3, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001236:	4b77      	ldr	r3, [pc, #476]	; (8001414 <HAL_RCC_OscConfig+0x474>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	4b74      	ldr	r3, [pc, #464]	; (8001414 <HAL_RCC_OscConfig+0x474>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a73      	ldr	r2, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x474>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124e:	f7ff fbe5 	bl	8000a1c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff fbe1 	bl	8000a1c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e10c      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <HAL_RCC_OscConfig+0x474>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x2ea>
 800127c:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	4a63      	ldr	r2, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6713      	str	r3, [r2, #112]	; 0x70
 8001288:	e01c      	b.n	80012c4 <HAL_RCC_OscConfig+0x324>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b05      	cmp	r3, #5
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x30c>
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a5e      	ldr	r2, [pc, #376]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a2:	4a5b      	ldr	r2, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6713      	str	r3, [r2, #112]	; 0x70
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0x324>
 80012ac:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a57      	ldr	r2, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
 80012b8:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a54      	ldr	r2, [pc, #336]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d015      	beq.n	80012f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fba6 	bl	8000a1c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fba2 	bl	8000a1c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0cb      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0ee      	beq.n	80012d4 <HAL_RCC_OscConfig+0x334>
 80012f6:	e014      	b.n	8001322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fb90 	bl	8000a1c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f7ff fb8c 	bl	8000a1c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e0b5      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ee      	bne.n	8001300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a38      	ldr	r2, [pc, #224]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 800132e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a1 	beq.w	8001480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d05c      	beq.n	8001404 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d141      	bne.n	80013d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_RCC_OscConfig+0x478>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb60 	bl	8000a1c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb5c 	bl	8000a1c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e087      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	019b      	lsls	r3, r3, #6
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	3b01      	subs	r3, #1
 8001398:	041b      	lsls	r3, r3, #16
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	491b      	ldr	r1, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x478>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb35 	bl	8000a1c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fb31 	bl	8000a1c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e05c      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x416>
 80013d4:	e054      	b.n	8001480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_RCC_OscConfig+0x478>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb1e 	bl	8000a1c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fb1a 	bl	8000a1c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e045      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x470>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x444>
 8001402:	e03d      	b.n	8001480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e038      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000
 8001418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x4ec>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d028      	beq.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d121      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d11a      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800144c:	4013      	ands	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001454:	4293      	cmp	r3, r2
 8001456:	d111      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	3b01      	subs	r3, #1
 8001466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0cc      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d90c      	bls.n	80014cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0b8      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001508:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	494d      	ldr	r1, [pc, #308]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d044      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d119      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e07f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d003      	beq.n	800154e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e067      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4934      	ldr	r1, [pc, #208]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff fa4c 	bl	8000a1c <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff fa48 	bl	8000a1c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e04f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d20c      	bcs.n	80015d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e032      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4916      	ldr	r1, [pc, #88]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	490e      	ldr	r1, [pc, #56]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001616:	f000 f821 	bl	800165c <HAL_RCC_GetSysClockFreq>
 800161a:	4602      	mov	r2, r0
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	490a      	ldr	r1, [pc, #40]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	5ccb      	ldrb	r3, [r1, r3]
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f9c0 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00
 800164c:	40023800 	.word	0x40023800
 8001650:	08003ba0 	.word	0x08003ba0
 8001654:	20000004 	.word	0x20000004
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800165c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001660:	b090      	sub	sp, #64	; 0x40
 8001662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d00d      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x40>
 8001680:	2b08      	cmp	r3, #8
 8001682:	f200 80a1 	bhi.w	80017c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x34>
 800168a:	2b04      	cmp	r3, #4
 800168c:	d003      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x3a>
 800168e:	e09b      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001694:	e09b      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800169a:	e098      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800169c:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <HAL_RCC_GetSysClockFreq+0x180>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_RCC_GetSysClockFreq+0x180>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d028      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_GetSysClockFreq+0x180>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	2200      	movs	r2, #0
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	627a      	str	r2, [r7, #36]	; 0x24
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016c4:	2100      	movs	r1, #0
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80016c8:	fb03 f201 	mul.w	r2, r3, r1
 80016cc:	2300      	movs	r3, #0
 80016ce:	fb00 f303 	mul.w	r3, r0, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80016d6:	fba0 1202 	umull	r1, r2, r0, r2
 80016da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016dc:	460a      	mov	r2, r1
 80016de:	62ba      	str	r2, [r7, #40]	; 0x28
 80016e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e2:	4413      	add	r3, r2
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e8:	2200      	movs	r2, #0
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	61fa      	str	r2, [r7, #28]
 80016ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f6:	f7fe fd73 	bl	80001e0 <__aeabi_uldivmod>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4613      	mov	r3, r2
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001702:	e053      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	2200      	movs	r2, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	617a      	str	r2, [r7, #20]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001716:	f04f 0b00 	mov.w	fp, #0
 800171a:	4652      	mov	r2, sl
 800171c:	465b      	mov	r3, fp
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ebb2 080a 	subs.w	r8, r2, sl
 8001736:	eb63 090b 	sbc.w	r9, r3, fp
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001746:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800174a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800174e:	ebb2 0408 	subs.w	r4, r2, r8
 8001752:	eb63 0509 	sbc.w	r5, r3, r9
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	00eb      	lsls	r3, r5, #3
 8001760:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001764:	00e2      	lsls	r2, r4, #3
 8001766:	4614      	mov	r4, r2
 8001768:	461d      	mov	r5, r3
 800176a:	eb14 030a 	adds.w	r3, r4, sl
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	eb45 030b 	adc.w	r3, r5, fp
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001782:	4629      	mov	r1, r5
 8001784:	028b      	lsls	r3, r1, #10
 8001786:	4621      	mov	r1, r4
 8001788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800178c:	4621      	mov	r1, r4
 800178e:	028a      	lsls	r2, r1, #10
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	2200      	movs	r2, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	60fa      	str	r2, [r7, #12]
 800179c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a0:	f7fe fd1e 	bl	80001e0 <__aeabi_uldivmod>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4613      	mov	r3, r2
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_GetSysClockFreq+0x180>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3740      	adds	r7, #64	; 0x40
 80017d4:	46bd      	mov	sp, r7
 80017d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400
 80017e4:	017d7840 	.word	0x017d7840

080017e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0208 	add.w	r2, r3, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f103 0208 	add.w	r2, r3, #8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f103 0208 	add.w	r2, r3, #8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d103      	bne.n	8001862 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e00c      	b.n	800187c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3308      	adds	r3, #8
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e002      	b.n	8001870 <vListInsert+0x2e>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d2f6      	bcs.n	800186a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6852      	ldr	r2, [r2, #4]
 80018d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d103      	bne.n	80018e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001912:	2301      	movs	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <xQueueGenericReset+0x2e>
        __asm volatile
 8001920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	60fb      	str	r3, [r7, #12]
    }
 8001932:	bf00      	nop
 8001934:	e7fe      	b.n	8001934 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d05d      	beq.n	80019f8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d059      	beq.n	80019f8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	2100      	movs	r1, #0
 800194e:	fba3 2302 	umull	r2, r3, r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d000      	beq.n	8001958 <xQueueGenericReset+0x50>
 8001956:	2101      	movs	r1, #1
 8001958:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	d14c      	bne.n	80019f8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800195e:	f001 fe23 	bl	80035a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	6939      	ldr	r1, [r7, #16]
 800196c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	441a      	add	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2200      	movs	r2, #0
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	3b01      	subs	r3, #1
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	441a      	add	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	22ff      	movs	r2, #255	; 0xff
 80019aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d114      	bne.n	80019de <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01a      	beq.n	80019f2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	3310      	adds	r3, #16
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 ff99 	bl	80028f8 <xTaskRemoveFromEventList>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <xQueueGenericReset+0x11c>)
 80019ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f3bf 8f4f 	dsb	sy
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	e009      	b.n	80019f2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3310      	adds	r3, #16
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff00 	bl	80017e8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	3324      	adds	r3, #36	; 0x24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fefb 	bl	80017e8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80019f2:	f001 fe09 	bl	8003608 <vPortExitCritical>
 80019f6:	e001      	b.n	80019fc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <xQueueGenericReset+0x110>
        __asm volatile
 8001a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	60bb      	str	r3, [r7, #8]
    }
 8001a14:	bf00      	nop
 8001a16:	e7fe      	b.n	8001a16 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001a18:	697b      	ldr	r3, [r7, #20]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000ed04 	.word	0xe000ed04

08001a28 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d02e      	beq.n	8001a9e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001a40:	2100      	movs	r1, #0
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fba3 2302 	umull	r2, r3, r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d000      	beq.n	8001a50 <xQueueGenericCreate+0x28>
 8001a4e:	2101      	movs	r1, #1
 8001a50:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d123      	bne.n	8001a9e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001a5e:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8001a62:	d81c      	bhi.n	8001a9e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	3348      	adds	r3, #72	; 0x48
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fe70 	bl	8003758 <pvPortMalloc>
 8001a78:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01c      	beq.n	8001aba <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3348      	adds	r3, #72	; 0x48
 8001a88:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f814 	bl	8001ac4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001a9c:	e00d      	b.n	8001aba <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <xQueueGenericCreate+0x92>
        __asm volatile
 8001aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa8:	f383 8811 	msr	BASEPRI, r3
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	613b      	str	r3, [r7, #16]
    }
 8001ab6:	bf00      	nop
 8001ab8:	e7fe      	b.n	8001ab8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001aba:	69fb      	ldr	r3, [r7, #28]
    }
 8001abc:	4618      	mov	r0, r3
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e002      	b.n	8001ae6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001af2:	2101      	movs	r1, #1
 8001af4:	69b8      	ldr	r0, [r7, #24]
 8001af6:	f7ff ff07 	bl	8001908 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <xQueueReceive+0x30>
        __asm volatile
 8001b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	f3bf 8f6f 	isb	sy
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	623b      	str	r3, [r7, #32]
    }
 8001b30:	bf00      	nop
 8001b32:	e7fe      	b.n	8001b32 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d103      	bne.n	8001b42 <xQueueReceive+0x3e>
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <xQueueReceive+0x42>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <xQueueReceive+0x44>
 8001b46:	2300      	movs	r3, #0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <xQueueReceive+0x5e>
        __asm volatile
 8001b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b50:	f383 8811 	msr	BASEPRI, r3
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	61fb      	str	r3, [r7, #28]
    }
 8001b5e:	bf00      	nop
 8001b60:	e7fe      	b.n	8001b60 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b62:	f001 f8d9 	bl	8002d18 <xTaskGetSchedulerState>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <xQueueReceive+0x6e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <xQueueReceive+0x72>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <xQueueReceive+0x74>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <xQueueReceive+0x8e>
        __asm volatile
 8001b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b80:	f383 8811 	msr	BASEPRI, r3
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	f3bf 8f4f 	dsb	sy
 8001b8c:	61bb      	str	r3, [r7, #24]
    }
 8001b8e:	bf00      	nop
 8001b90:	e7fe      	b.n	8001b90 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001b92:	f001 fd09 	bl	80035a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01f      	beq.n	8001be2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ba6:	f000 f88d 	bl	8001cc4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00f      	beq.n	8001bda <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fe9a 	bl	80028f8 <xTaskRemoveFromEventList>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <xQueueReceive+0x1bc>)
 8001bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001bda:	f001 fd15 	bl	8003608 <vPortExitCritical>
                return pdPASS;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e069      	b.n	8001cb6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d103      	bne.n	8001bf0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001be8:	f001 fd0e 	bl	8003608 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e062      	b.n	8001cb6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 ff52 	bl	8002aa4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001c04:	f001 fd00 	bl	8003608 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001c08:	f000 fb80 	bl	800230c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001c0c:	f001 fccc 	bl	80035a8 <vPortEnterCritical>
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d103      	bne.n	8001c26 <xQueueReceive+0x122>
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d103      	bne.n	8001c3c <xQueueReceive+0x138>
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c3c:	f001 fce4 	bl	8003608 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c40:	1d3a      	adds	r2, r7, #4
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 ff41 	bl	8002ad0 <xTaskCheckForTimeOut>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d123      	bne.n	8001c9c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c56:	f000 f8ad 	bl	8001db4 <prvIsQueueEmpty>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d017      	beq.n	8001c90 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	3324      	adds	r3, #36	; 0x24
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fddb 	bl	8002824 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c70:	f000 f84e 	bl	8001d10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001c74:	f000 fb58 	bl	8002328 <xTaskResumeAll>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d189      	bne.n	8001b92 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <xQueueReceive+0x1bc>)
 8001c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	e780      	b.n	8001b92 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c92:	f000 f83d 	bl	8001d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c96:	f000 fb47 	bl	8002328 <xTaskResumeAll>
 8001c9a:	e77a      	b.n	8001b92 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c9e:	f000 f837 	bl	8001d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ca2:	f000 fb41 	bl	8002328 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ca8:	f000 f884 	bl	8001db4 <prvIsQueueEmpty>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f43f af6f 	beq.w	8001b92 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001cb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000ed04 	.word	0xe000ed04

08001cc4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d018      	beq.n	8001d08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	441a      	add	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d303      	bcc.n	8001cf8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68d9      	ldr	r1, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	461a      	mov	r2, r3
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	f001 ff18 	bl	8003b38 <memcpy>
    }
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001d18:	f001 fc46 	bl	80035a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d24:	e011      	b.n	8001d4a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3324      	adds	r3, #36	; 0x24
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fde0 	bl	80028f8 <xTaskRemoveFromEventList>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001d3e:	f000 ff2d 	bl	8002b9c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	dce9      	bgt.n	8001d26 <prvUnlockQueue+0x16>
 8001d52:	e000      	b.n	8001d56 <prvUnlockQueue+0x46>
                    break;
 8001d54:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	22ff      	movs	r2, #255	; 0xff
 8001d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001d5e:	f001 fc53 	bl	8003608 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001d62:	f001 fc21 	bl	80035a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d6c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d6e:	e011      	b.n	8001d94 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3310      	adds	r3, #16
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fdbb 	bl	80028f8 <xTaskRemoveFromEventList>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001d88:	f000 ff08 	bl	8002b9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dce9      	bgt.n	8001d70 <prvUnlockQueue+0x60>
 8001d9c:	e000      	b.n	8001da0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001d9e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	22ff      	movs	r2, #255	; 0xff
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001da8:	f001 fc2e 	bl	8003608 <vPortExitCritical>
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001dbc:	f001 fbf4 	bl	80035a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001dd2:	f001 fc19 	bl	8003608 <vPortExitCritical>

    return xReturn;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001df0:	f001 fbda 	bl	80035a8 <vPortEnterCritical>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d103      	bne.n	8001e0a <vQueueWaitForMessageRestricted+0x2a>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d103      	bne.n	8001e20 <vQueueWaitForMessageRestricted+0x40>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e20:	f001 fbf2 	bl	8003608 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3324      	adds	r3, #36	; 0x24
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd19 	bl	800286c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff68 	bl	8001d10 <prvUnlockQueue>
    }
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af04      	add	r7, sp, #16
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fc7b 	bl	8003758 <pvPortMalloc>
 8001e62:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d013      	beq.n	8001e92 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001e6a:	2050      	movs	r0, #80	; 0x50
 8001e6c:	f001 fc74 	bl	8003758 <pvPortMalloc>
 8001e70:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001e78:	2250      	movs	r2, #80	; 0x50
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	69f8      	ldr	r0, [r7, #28]
 8001e7e:	f001 fe69 	bl	8003b54 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
 8001e88:	e005      	b.n	8001e96 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f001 fd1e 	bl	80038cc <vPortFree>
 8001e90:	e001      	b.n	8001e96 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9303      	str	r3, [sp, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f80e 	bl	8001ed4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001eb8:	69f8      	ldr	r0, [r7, #28]
 8001eba:	f000 f891 	bl	8001fe0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	e002      	b.n	8001eca <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001eca:	69bb      	ldr	r3, [r7, #24]
    }
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eec:	3b01      	subs	r3, #1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <prvInitialiseNewTask+0x48>
        __asm volatile
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	617b      	str	r3, [r7, #20]
    }
 8001f18:	bf00      	nop
 8001f1a:	e7fe      	b.n	8001f1a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01e      	beq.n	8001f60 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e012      	b.n	8001f4e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	3334      	adds	r3, #52	; 0x34
 8001f38:	460a      	mov	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d9e9      	bls.n	8001f28 <prvInitialiseNewTask+0x54>
 8001f54:	e000      	b.n	8001f58 <prvInitialiseNewTask+0x84>
            {
                break;
 8001f56:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d90a      	bls.n	8001f7c <prvInitialiseNewTask+0xa8>
        __asm volatile
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f3bf 8f4f 	dsb	sy
 8001f76:	613b      	str	r3, [r7, #16]
    }
 8001f78:	bf00      	nop
 8001f7a:	e7fe      	b.n	8001f7a <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d901      	bls.n	8001f86 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f82:	2304      	movs	r3, #4
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f94:	3304      	adds	r3, #4
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fc46 	bl	8001828 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fc41 	bl	8001828 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001faa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	f1c3 0205 	rsb	r2, r3, #5
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	69b8      	ldr	r0, [r7, #24]
 8001fc2:	f001 f9bf 	bl	8003344 <pxPortInitialiseStack>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001fe8:	f001 fade 	bl	80035a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <prvAddNewTaskToReadyList+0x108>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	4a3d      	ldr	r2, [pc, #244]	; (80020e8 <prvAddNewTaskToReadyList+0x108>)
 8001ff4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <prvAddNewTaskToReadyList+0x10c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <prvAddNewTaskToReadyList+0x10c>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <prvAddNewTaskToReadyList+0x108>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d110      	bne.n	800202e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800200c:	f000 fdea 	bl	8002be4 <prvInitialiseTaskLists>
 8002010:	e00d      	b.n	800202e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <prvAddNewTaskToReadyList+0x110>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <prvAddNewTaskToReadyList+0x10c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	429a      	cmp	r2, r3
 8002026:	d802      	bhi.n	800202e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002028:	4a30      	ldr	r2, [pc, #192]	; (80020ec <prvAddNewTaskToReadyList+0x10c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <prvAddNewTaskToReadyList+0x114>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <prvAddNewTaskToReadyList+0x114>)
 8002036:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <prvAddNewTaskToReadyList+0x118>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	4a2c      	ldr	r2, [pc, #176]	; (80020f8 <prvAddNewTaskToReadyList+0x118>)
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204e:	492b      	ldr	r1, [pc, #172]	; (80020fc <prvAddNewTaskToReadyList+0x11c>)
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3304      	adds	r3, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	3204      	adds	r2, #4
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1d1a      	adds	r2, r3, #4
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <prvAddNewTaskToReadyList+0x11c>)
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	4918      	ldr	r1, [pc, #96]	; (80020fc <prvAddNewTaskToReadyList+0x11c>)
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	4814      	ldr	r0, [pc, #80]	; (80020fc <prvAddNewTaskToReadyList+0x11c>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4403      	add	r3, r0
 80020b4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80020b6:	f001 faa7 	bl	8003608 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <prvAddNewTaskToReadyList+0x110>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00e      	beq.n	80020e0 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <prvAddNewTaskToReadyList+0x10c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <prvAddNewTaskToReadyList+0x120>)
 80020d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f3bf 8f4f 	dsb	sy
 80020dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000114 	.word	0x20000114
 80020ec:	2000003c 	.word	0x2000003c
 80020f0:	20000120 	.word	0x20000120
 80020f4:	20000130 	.word	0x20000130
 80020f8:	2000011c 	.word	0x2000011c
 80020fc:	20000040 	.word	0x20000040
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <xTaskDelayUntil+0x2a>
        __asm volatile
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	617b      	str	r3, [r7, #20]
    }
 800212a:	bf00      	nop
 800212c:	e7fe      	b.n	800212c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <xTaskDelayUntil+0x46>
        __asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	613b      	str	r3, [r7, #16]
    }
 8002146:	bf00      	nop
 8002148:	e7fe      	b.n	8002148 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <xTaskDelayUntil+0xf0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <xTaskDelayUntil+0x64>
        __asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	60fb      	str	r3, [r7, #12]
    }
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002168:	f000 f8d0 	bl	800230c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <xTaskDelayUntil+0xf4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20b      	bcs.n	800219e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d211      	bcs.n	80021b4 <xTaskDelayUntil+0xb0>
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	429a      	cmp	r2, r3
 8002196:	d90d      	bls.n	80021b4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e00a      	b.n	80021b4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d303      	bcc.n	80021b0 <xTaskDelayUntil+0xac>
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d901      	bls.n	80021b4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80021b0:	2301      	movs	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fdc3 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80021ce:	f000 f8ab 	bl	8002328 <xTaskResumeAll>
 80021d2:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d107      	bne.n	80021ea <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <xTaskDelayUntil+0xf8>)
 80021dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021ec:	4618      	mov	r0, r3
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000013c 	.word	0x2000013c
 80021f8:	20000118 	.word	0x20000118
 80021fc:	e000ed04 	.word	0xe000ed04

08002200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <vTaskDelay+0x60>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <vTaskDelay+0x30>
        __asm volatile
 800221a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221e:	f383 8811 	msr	BASEPRI, r3
 8002222:	f3bf 8f6f 	isb	sy
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	60bb      	str	r3, [r7, #8]
    }
 800222c:	bf00      	nop
 800222e:	e7fe      	b.n	800222e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002230:	f000 f86c 	bl	800230c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002234:	2100      	movs	r1, #0
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fd8c 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800223c:	f000 f874 	bl	8002328 <xTaskResumeAll>
 8002240:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <vTaskDelay+0x64>)
 800224a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000013c 	.word	0x2000013c
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <vTaskStartScheduler+0x88>)
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2300      	movs	r3, #0
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	2246      	movs	r2, #70	; 0x46
 800227a:	491e      	ldr	r1, [pc, #120]	; (80022f4 <vTaskStartScheduler+0x8c>)
 800227c:	481e      	ldr	r0, [pc, #120]	; (80022f8 <vTaskStartScheduler+0x90>)
 800227e:	f7ff fde3 	bl	8001e48 <xTaskCreate>
 8002282:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800228a:	f000 fde3 	bl	8002e54 <xTimerCreateTimerTask>
 800228e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d116      	bne.n	80022c4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	60bb      	str	r3, [r7, #8]
    }
 80022a8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <vTaskStartScheduler+0x94>)
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <vTaskStartScheduler+0x98>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <vTaskStartScheduler+0x9c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80022be:	f001 f8d1 	bl	8003464 <xPortStartScheduler>
 80022c2:	e00e      	b.n	80022e2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ca:	d10a      	bne.n	80022e2 <vTaskStartScheduler+0x7a>
        __asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	607b      	str	r3, [r7, #4]
    }
 80022de:	bf00      	nop
 80022e0:	e7fe      	b.n	80022e0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <vTaskStartScheduler+0xa0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000138 	.word	0x20000138
 80022f4:	08003b90 	.word	0x08003b90
 80022f8:	08002bb5 	.word	0x08002bb5
 80022fc:	20000134 	.word	0x20000134
 8002300:	20000120 	.word	0x20000120
 8002304:	20000118 	.word	0x20000118
 8002308:	20000010 	.word	0x20000010

0800230c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <vTaskSuspendAll+0x18>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a03      	ldr	r2, [pc, #12]	; (8002324 <vTaskSuspendAll+0x18>)
 8002318:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	2000013c 	.word	0x2000013c

08002328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002336:	4b71      	ldr	r3, [pc, #452]	; (80024fc <xTaskResumeAll+0x1d4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <xTaskResumeAll+0x2c>
        __asm volatile
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	607b      	str	r3, [r7, #4]
    }
 8002350:	bf00      	nop
 8002352:	e7fe      	b.n	8002352 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002354:	f001 f928 	bl	80035a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <xTaskResumeAll+0x1d4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3b01      	subs	r3, #1
 800235e:	4a67      	ldr	r2, [pc, #412]	; (80024fc <xTaskResumeAll+0x1d4>)
 8002360:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002362:	4b66      	ldr	r3, [pc, #408]	; (80024fc <xTaskResumeAll+0x1d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 80c0 	bne.w	80024ec <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <xTaskResumeAll+0x1d8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80bb 	beq.w	80024ec <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002376:	e08a      	b.n	800248e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002378:	4b62      	ldr	r3, [pc, #392]	; (8002504 <xTaskResumeAll+0x1dc>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	6a12      	ldr	r2, [r2, #32]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	69d2      	ldr	r2, [r2, #28]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3318      	adds	r3, #24
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d103      	bne.n	80023ae <xTaskResumeAll+0x86>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	68d2      	ldr	r2, [r2, #12]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	6892      	ldr	r2, [r2, #8]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3304      	adds	r3, #4
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <xTaskResumeAll+0xc4>
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <xTaskResumeAll+0x1e0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	4a3f      	ldr	r2, [pc, #252]	; (8002508 <xTaskResumeAll+0x1e0>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	493e      	ldr	r1, [pc, #248]	; (800250c <xTaskResumeAll+0x1e4>)
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	3204      	adds	r2, #4
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <xTaskResumeAll+0x1e4>)
 8002452:	441a      	add	r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	492b      	ldr	r1, [pc, #172]	; (800250c <xTaskResumeAll+0x1e4>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	4827      	ldr	r0, [pc, #156]	; (800250c <xTaskResumeAll+0x1e4>)
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4403      	add	r3, r0
 8002478:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <xTaskResumeAll+0x1e8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d302      	bcc.n	800248e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <xTaskResumeAll+0x1ec>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <xTaskResumeAll+0x1dc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f47f af70 	bne.w	8002378 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800249e:	f000 fc1f 	bl	8002ce0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <xTaskResumeAll+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80024ae:	f000 f847 	bl	8002540 <xTaskIncrementTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <xTaskResumeAll+0x1ec>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f1      	bne.n	80024ae <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <xTaskResumeAll+0x1f0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <xTaskResumeAll+0x1ec>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <xTaskResumeAll+0x1f4>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80024ec:	f001 f88c 	bl	8003608 <vPortExitCritical>

    return xAlreadyYielded;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000013c 	.word	0x2000013c
 8002500:	20000114 	.word	0x20000114
 8002504:	200000d4 	.word	0x200000d4
 8002508:	2000011c 	.word	0x2000011c
 800250c:	20000040 	.word	0x20000040
 8002510:	2000003c 	.word	0x2000003c
 8002514:	20000128 	.word	0x20000128
 8002518:	20000124 	.word	0x20000124
 800251c:	e000ed04 	.word	0xe000ed04

08002520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <xTaskGetTickCount+0x1c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800252c:	687b      	ldr	r3, [r7, #4]
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000118 	.word	0x20000118

08002540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800254a:	4b7d      	ldr	r3, [pc, #500]	; (8002740 <xTaskIncrementTick+0x200>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80ec 	bne.w	800272c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002554:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <xTaskIncrementTick+0x204>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800255c:	4a79      	ldr	r2, [pc, #484]	; (8002744 <xTaskIncrementTick+0x204>)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d120      	bne.n	80025aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002568:	4b77      	ldr	r3, [pc, #476]	; (8002748 <xTaskIncrementTick+0x208>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <xTaskIncrementTick+0x48>
        __asm volatile
 8002572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	607b      	str	r3, [r7, #4]
    }
 8002584:	bf00      	nop
 8002586:	e7fe      	b.n	8002586 <xTaskIncrementTick+0x46>
 8002588:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <xTaskIncrementTick+0x208>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	4b6f      	ldr	r3, [pc, #444]	; (800274c <xTaskIncrementTick+0x20c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6d      	ldr	r2, [pc, #436]	; (8002748 <xTaskIncrementTick+0x208>)
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4a6d      	ldr	r2, [pc, #436]	; (800274c <xTaskIncrementTick+0x20c>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b6c      	ldr	r3, [pc, #432]	; (8002750 <xTaskIncrementTick+0x210>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4a6b      	ldr	r2, [pc, #428]	; (8002750 <xTaskIncrementTick+0x210>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	f000 fb9b 	bl	8002ce0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80025aa:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <xTaskIncrementTick+0x214>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f0c0 80a6 	bcc.w	8002702 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b6:	4b64      	ldr	r3, [pc, #400]	; (8002748 <xTaskIncrementTick+0x208>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <xTaskIncrementTick+0x214>)
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	601a      	str	r2, [r3, #0]
                    break;
 80025c8:	e09b      	b.n	8002702 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <xTaskIncrementTick+0x208>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d203      	bcs.n	80025ea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80025e2:	4a5c      	ldr	r2, [pc, #368]	; (8002754 <xTaskIncrementTick+0x214>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80025e8:	e08b      	b.n	8002702 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3304      	adds	r3, #4
 800260c:	429a      	cmp	r2, r3
 800260e:	d103      	bne.n	8002618 <xTaskIncrementTick+0xd8>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01e      	beq.n	800266e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	6a12      	ldr	r2, [r2, #32]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	69d2      	ldr	r2, [r2, #28]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3318      	adds	r3, #24
 8002652:	429a      	cmp	r2, r3
 8002654:	d103      	bne.n	800265e <xTaskIncrementTick+0x11e>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6a1a      	ldr	r2, [r3, #32]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	2201      	movs	r2, #1
 8002674:	409a      	lsls	r2, r3
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <xTaskIncrementTick+0x218>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	4a36      	ldr	r2, [pc, #216]	; (8002758 <xTaskIncrementTick+0x218>)
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	4935      	ldr	r1, [pc, #212]	; (800275c <xTaskIncrementTick+0x21c>)
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3304      	adds	r3, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	3204      	adds	r2, #4
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	1d1a      	adds	r2, r3, #4
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4a26      	ldr	r2, [pc, #152]	; (800275c <xTaskIncrementTick+0x21c>)
 80026c4:	441a      	add	r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	615a      	str	r2, [r3, #20]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	4923      	ldr	r1, [pc, #140]	; (800275c <xTaskIncrementTick+0x21c>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c59      	adds	r1, r3, #1
 80026de:	481f      	ldr	r0, [pc, #124]	; (800275c <xTaskIncrementTick+0x21c>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4403      	add	r3, r0
 80026ea:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <xTaskIncrementTick+0x220>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	429a      	cmp	r2, r3
 80026f8:	f67f af5d 	bls.w	80025b6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002700:	e759      	b.n	80025b6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <xTaskIncrementTick+0x220>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	4914      	ldr	r1, [pc, #80]	; (800275c <xTaskIncrementTick+0x21c>)
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d901      	bls.n	800271e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800271a:	2301      	movs	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <xTaskIncrementTick+0x224>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002726:	2301      	movs	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	e004      	b.n	8002736 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <xTaskIncrementTick+0x228>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <xTaskIncrementTick+0x228>)
 8002734:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002738:	4618      	mov	r0, r3
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000013c 	.word	0x2000013c
 8002744:	20000118 	.word	0x20000118
 8002748:	200000cc 	.word	0x200000cc
 800274c:	200000d0 	.word	0x200000d0
 8002750:	2000012c 	.word	0x2000012c
 8002754:	20000134 	.word	0x20000134
 8002758:	2000011c 	.word	0x2000011c
 800275c:	20000040 	.word	0x20000040
 8002760:	2000003c 	.word	0x2000003c
 8002764:	20000128 	.word	0x20000128
 8002768:	20000124 	.word	0x20000124

0800276c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <vTaskSwitchContext+0xa4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <vTaskSwitchContext+0xa8>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002780:	e03f      	b.n	8002802 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <vTaskSwitchContext+0xa8>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <vTaskSwitchContext+0xac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f1c3 031f 	rsb	r3, r3, #31
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	491f      	ldr	r1, [pc, #124]	; (800281c <vTaskSwitchContext+0xb0>)
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	607b      	str	r3, [r7, #4]
    }
 80027c4:	bf00      	nop
 80027c6:	e7fe      	b.n	80027c6 <vTaskSwitchContext+0x5a>
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <vTaskSwitchContext+0xb0>)
 80027d4:	4413      	add	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	3308      	adds	r3, #8
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d104      	bne.n	80027f8 <vTaskSwitchContext+0x8c>
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <vTaskSwitchContext+0xb4>)
 8002800:	6013      	str	r3, [r2, #0]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	2000013c 	.word	0x2000013c
 8002814:	20000128 	.word	0x20000128
 8002818:	2000011c 	.word	0x2000011c
 800281c:	20000040 	.word	0x20000040
 8002820:	2000003c 	.word	0x2000003c

08002824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	60fb      	str	r3, [r7, #12]
    }
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <vTaskPlaceOnEventList+0x44>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3318      	adds	r3, #24
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fff5 	bl	8001842 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002858:	2101      	movs	r1, #1
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	f000 fa7a 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2000003c 	.word	0x2000003c

0800286c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	613b      	str	r3, [r7, #16]
    }
 8002890:	bf00      	nop
 8002892:	e7fe      	b.n	8002892 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <vTaskPlaceOnEventListRestricted+0x88>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	61da      	str	r2, [r3, #28]
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	621a      	str	r2, [r3, #32]
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	3218      	adds	r2, #24
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f103 0218 	add.w	r2, r3, #24
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68b8      	ldr	r0, [r7, #8]
 80028e6:	f000 fa35 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
    }
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000003c 	.word	0x2000003c

080028f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	60fb      	str	r3, [r7, #12]
    }
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	6a12      	ldr	r2, [r2, #32]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	69d2      	ldr	r2, [r2, #28]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	3318      	adds	r3, #24
 8002946:	429a      	cmp	r2, r3
 8002948:	d103      	bne.n	8002952 <xTaskRemoveFromEventList+0x5a>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1e5a      	subs	r2, r3, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <xTaskRemoveFromEventList+0x194>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d15e      	bne.n	8002a28 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	68d2      	ldr	r2, [r2, #12]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	6a3a      	ldr	r2, [r7, #32]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	3304      	adds	r3, #4
 800298c:	429a      	cmp	r2, r3
 800298e:	d103      	bne.n	8002998 <xTaskRemoveFromEventList+0xa0>
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <xTaskRemoveFromEventList+0x198>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <xTaskRemoveFromEventList+0x198>)
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	4935      	ldr	r1, [pc, #212]	; (8002a94 <xTaskRemoveFromEventList+0x19c>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3304      	adds	r3, #4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	3204      	adds	r2, #4
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <xTaskRemoveFromEventList+0x19c>)
 80029fe:	441a      	add	r2, r3
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	4922      	ldr	r1, [pc, #136]	; (8002a94 <xTaskRemoveFromEventList+0x19c>)
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	481e      	ldr	r0, [pc, #120]	; (8002a94 <xTaskRemoveFromEventList+0x19c>)
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4403      	add	r3, r0
 8002a24:	6019      	str	r1, [r3, #0]
 8002a26:	e01b      	b.n	8002a60 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <xTaskRemoveFromEventList+0x1a0>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	61da      	str	r2, [r3, #28]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	621a      	str	r2, [r3, #32]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	3218      	adds	r2, #24
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f103 0218 	add.w	r2, r3, #24
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <xTaskRemoveFromEventList+0x1a0>)
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <xTaskRemoveFromEventList+0x1a0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <xTaskRemoveFromEventList+0x1a0>)
 8002a5e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <xTaskRemoveFromEventList+0x1a4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d905      	bls.n	8002a7a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <xTaskRemoveFromEventList+0x1a8>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e001      	b.n	8002a7e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	372c      	adds	r7, #44	; 0x2c
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	2000013c 	.word	0x2000013c
 8002a90:	2000011c 	.word	0x2000011c
 8002a94:	20000040 	.word	0x20000040
 8002a98:	200000d4 	.word	0x200000d4
 8002a9c:	2000003c 	.word	0x2000003c
 8002aa0:	20000128 	.word	0x20000128

08002aa4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <vTaskInternalSetTimeOutState+0x24>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <vTaskInternalSetTimeOutState+0x28>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	2000012c 	.word	0x2000012c
 8002acc:	20000118 	.word	0x20000118

08002ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	613b      	str	r3, [r7, #16]
    }
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	60fb      	str	r3, [r7, #12]
    }
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002b12:	f000 fd49 	bl	80035a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <xTaskCheckForTimeOut+0xc4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d102      	bne.n	8002b36 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e026      	b.n	8002b84 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <xTaskCheckForTimeOut+0xc8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d00a      	beq.n	8002b58 <xTaskCheckForTimeOut+0x88>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d305      	bcc.n	8002b58 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e015      	b.n	8002b84 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d20b      	bcs.n	8002b7a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff98 	bl	8002aa4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e004      	b.n	8002b84 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002b80:	2301      	movs	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002b84:	f000 fd40 	bl	8003608 <vPortExitCritical>

    return xReturn;
 8002b88:	69fb      	ldr	r3, [r7, #28]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000118 	.word	0x20000118
 8002b98:	2000012c 	.word	0x2000012c

08002b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <vTaskMissedYield+0x14>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000128 	.word	0x20000128

08002bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002bbc:	f000 f852 	bl	8002c64 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <prvIdleTask+0x28>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d9f9      	bls.n	8002bbc <prvIdleTask+0x8>
            {
                taskYIELD();
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <prvIdleTask+0x2c>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002bd8:	e7f0      	b.n	8002bbc <prvIdleTask+0x8>
 8002bda:	bf00      	nop
 8002bdc:	20000040 	.word	0x20000040
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e00c      	b.n	8002c0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <prvInitialiseTaskLists+0x60>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fdf2 	bl	80017e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3301      	adds	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d9ef      	bls.n	8002bf0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <prvInitialiseTaskLists+0x64>)
 8002c12:	f7fe fde9 	bl	80017e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c16:	480d      	ldr	r0, [pc, #52]	; (8002c4c <prvInitialiseTaskLists+0x68>)
 8002c18:	f7fe fde6 	bl	80017e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <prvInitialiseTaskLists+0x6c>)
 8002c1e:	f7fe fde3 	bl	80017e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002c22:	480c      	ldr	r0, [pc, #48]	; (8002c54 <prvInitialiseTaskLists+0x70>)
 8002c24:	f7fe fde0 	bl	80017e8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <prvInitialiseTaskLists+0x74>)
 8002c2a:	f7fe fddd 	bl	80017e8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <prvInitialiseTaskLists+0x78>)
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <prvInitialiseTaskLists+0x64>)
 8002c32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <prvInitialiseTaskLists+0x7c>)
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <prvInitialiseTaskLists+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000040 	.word	0x20000040
 8002c48:	200000a4 	.word	0x200000a4
 8002c4c:	200000b8 	.word	0x200000b8
 8002c50:	200000d4 	.word	0x200000d4
 8002c54:	200000e8 	.word	0x200000e8
 8002c58:	20000100 	.word	0x20000100
 8002c5c:	200000cc 	.word	0x200000cc
 8002c60:	200000d0 	.word	0x200000d0

08002c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c6a:	e019      	b.n	8002ca0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002c6c:	f000 fc9c 	bl	80035a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <prvCheckTasksWaitingTermination+0x50>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fe19 	bl	80018b4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <prvCheckTasksWaitingTermination+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <prvCheckTasksWaitingTermination+0x54>)
 8002c8a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <prvCheckTasksWaitingTermination+0x58>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <prvCheckTasksWaitingTermination+0x58>)
 8002c94:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002c96:	f000 fcb7 	bl	8003608 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f810 	bl	8002cc0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <prvCheckTasksWaitingTermination+0x58>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e1      	bne.n	8002c6c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200000e8 	.word	0x200000e8
 8002cb8:	20000114 	.word	0x20000114
 8002cbc:	200000fc 	.word	0x200000fc

08002cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fdfd 	bl	80038cc <vPortFree>
            vPortFree( pxTCB );
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fdfa 	bl	80038cc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <prvResetNextTaskUnblockTime+0x30>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <prvResetNextTaskUnblockTime+0x34>)
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cf6:	e005      	b.n	8002d04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <prvResetNextTaskUnblockTime+0x30>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <prvResetNextTaskUnblockTime+0x34>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	200000cc 	.word	0x200000cc
 8002d14:	20000134 	.word	0x20000134

08002d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <xTaskGetSchedulerState+0x34>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002d26:	2301      	movs	r3, #1
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	e008      	b.n	8002d3e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <xTaskGetSchedulerState+0x38>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002d34:	2302      	movs	r3, #2
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	e001      	b.n	8002d3e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002d3e:	687b      	ldr	r3, [r7, #4]
    }
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	20000120 	.word	0x20000120
 8002d50:	2000013c 	.word	0x2000013c

08002d54 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fda2 	bl	80018b4 <uxListRemove>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xec>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xec>)
 8002d8c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d124      	bne.n	8002de0 <prvAddCurrentTaskToDelayedList+0x8c>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	3204      	adds	r2, #4
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1d1a      	adds	r2, r3, #4
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002dd0:	615a      	str	r2, [r3, #20]
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002dde:	e026      	b.n	8002e2e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d209      	bcs.n	8002e0c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3304      	adds	r3, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fe fd1c 	bl	8001842 <vListInsert>
}
 8002e0a:	e010      	b.n	8002e2e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f7fe fd12 	bl	8001842 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d202      	bcs.n	8002e2e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002e28:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6013      	str	r3, [r2, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000118 	.word	0x20000118
 8002e3c:	2000003c 	.word	0x2000003c
 8002e40:	2000011c 	.word	0x2000011c
 8002e44:	20000100 	.word	0x20000100
 8002e48:	200000d0 	.word	0x200000d0
 8002e4c:	200000cc 	.word	0x200000cc
 8002e50:	20000134 	.word	0x20000134

08002e54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002e5e:	f000 fa47 	bl	80032f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <xTimerCreateTimerTask+0x54>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <xTimerCreateTimerTask+0x58>)
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2303      	movs	r3, #3
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	2246      	movs	r2, #70	; 0x46
 8002e76:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <xTimerCreateTimerTask+0x5c>)
 8002e78:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <xTimerCreateTimerTask+0x60>)
 8002e7a:	f7fe ffe5 	bl	8001e48 <xTaskCreate>
 8002e7e:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <xTimerCreateTimerTask+0x48>
        __asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	603b      	str	r3, [r7, #0]
    }
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002e9c:	687b      	ldr	r3, [r7, #4]
    }
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000170 	.word	0x20000170
 8002eac:	20000174 	.word	0x20000174
 8002eb0:	08003b98 	.word	0x08003b98
 8002eb4:	08002f5d 	.word	0x08002f5d

08002eb8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002ec4:	e008      	b.n	8002ed8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	18d1      	adds	r1, r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f8dd 	bl	80030a4 <prvInsertTimerInActiveList>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ea      	bne.n	8002ec6 <prvReloadTimer+0xe>
        }
    }
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <prvProcessExpiredTimer+0x5c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fccd 	bl	80018b4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff ffc3 	bl	8002eb8 <prvReloadTimer>
 8002f32:	e008      	b.n	8002f46 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	4798      	blx	r3
    }
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000168 	.word	0x20000168

08002f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f857 	bl	800301c <prvGetNextExpireTime>
 8002f6e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f803 	bl	8002f80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002f7a:	f000 f8d5 	bl	8003128 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f7e:	e7f1      	b.n	8002f64 <prvTimerTask+0x8>

08002f80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002f8a:	f7ff f9bf 	bl	800230c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f866 	bl	8003064 <prvSampleTimeNow>
 8002f98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d130      	bne.n	8003002 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <prvProcessTimerOrBlockTask+0x3c>
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d806      	bhi.n	8002fbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002fae:	f7ff f9bb 	bl	8002328 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ffa1 	bl	8002efc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002fba:	e024      	b.n	8003006 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <prvProcessTimerOrBlockTask+0x90>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <prvProcessTimerOrBlockTask+0x50>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <prvProcessTimerOrBlockTask+0x52>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <prvProcessTimerOrBlockTask+0x94>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fe fefd 	bl	8001de0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002fe6:	f7ff f99f 	bl	8002328 <xTaskResumeAll>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <prvProcessTimerOrBlockTask+0x98>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
    }
 8003000:	e001      	b.n	8003006 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003002:	f7ff f991 	bl	8002328 <xTaskResumeAll>
    }
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2000016c 	.word	0x2000016c
 8003014:	20000170 	.word	0x20000170
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <prvGetNextExpireTime+0x44>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <prvGetNextExpireTime+0x16>
 800302e:	2201      	movs	r2, #1
 8003030:	e000      	b.n	8003034 <prvGetNextExpireTime+0x18>
 8003032:	2200      	movs	r2, #0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <prvGetNextExpireTime+0x44>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e001      	b.n	8003050 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003050:	68fb      	ldr	r3, [r7, #12]
    }
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000168 	.word	0x20000168

08003064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800306c:	f7ff fa58 	bl	8002520 <xTaskGetTickCount>
 8003070:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <prvSampleTimeNow+0x3c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	429a      	cmp	r2, r3
 800307a:	d205      	bcs.n	8003088 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800307c:	f000 f912 	bl	80032a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e002      	b.n	800308e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <prvSampleTimeNow+0x3c>)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003094:	68fb      	ldr	r3, [r7, #12]
    }
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000178 	.word	0x20000178

080030a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d812      	bhi.n	80030f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1ad2      	subs	r2, r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e01b      	b.n	8003116 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <prvInsertTimerInActiveList+0x7c>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3304      	adds	r3, #4
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f7fe fbaa 	bl	8001842 <vListInsert>
 80030ee:	e012      	b.n	8003116 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d206      	bcs.n	8003106 <prvInsertTimerInActiveList+0x62>
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e007      	b.n	8003116 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <prvInsertTimerInActiveList+0x80>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f7fe fb96 	bl	8001842 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003116:	697b      	ldr	r3, [r7, #20]
    }
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	2000016c 	.word	0x2000016c
 8003124:	20000168 	.word	0x20000168

08003128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800312e:	e0a6      	b.n	800327e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f2c0 80a2 	blt.w	800327c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	3304      	adds	r3, #4
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fbb3 	bl	80018b4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff87 	bl	8003064 <prvSampleTimeNow>
 8003156:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	3b01      	subs	r3, #1
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 808e 	bhi.w	800327e <prvProcessReceivedCommands+0x156>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <prvProcessReceivedCommands+0x40>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800318d 	.word	0x0800318d
 800316c:	0800318d 	.word	0x0800318d
 8003170:	080031f5 	.word	0x080031f5
 8003174:	08003209 	.word	0x08003209
 8003178:	08003253 	.word	0x08003253
 800317c:	0800318d 	.word	0x0800318d
 8003180:	0800318d 	.word	0x0800318d
 8003184:	080031f5 	.word	0x080031f5
 8003188:	08003209 	.word	0x08003209
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	b2da      	uxtb	r2, r3
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	18d1      	adds	r1, r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	69f8      	ldr	r0, [r7, #28]
 80031ac:	f7ff ff7a 	bl	80030a4 <prvInsertTimerInActiveList>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4619      	mov	r1, r3
 80031d0:	69f8      	ldr	r0, [r7, #28]
 80031d2:	f7ff fe71 	bl	8002eb8 <prvReloadTimer>
 80031d6:	e008      	b.n	80031ea <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	69f8      	ldr	r0, [r7, #28]
 80031f0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80031f2:	e044      	b.n	800327e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8003206:	e03a      	b.n	800327e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	617b      	str	r3, [r7, #20]
    }
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	18d1      	adds	r1, r2, r3
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	69f8      	ldr	r0, [r7, #28]
 800324c:	f7ff ff2a 	bl	80030a4 <prvInsertTimerInActiveList>
                        break;
 8003250:	e015      	b.n	800327e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d103      	bne.n	8003268 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003260:	69f8      	ldr	r0, [r7, #28]
 8003262:	f000 fb33 	bl	80038cc <vPortFree>
 8003266:	e00a      	b.n	800327e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800327a:	e000      	b.n	800327e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800327c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <prvProcessReceivedCommands+0x178>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f107 0108 	add.w	r1, r7, #8
 8003286:	2200      	movs	r2, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fc3b 	bl	8001b04 <xQueueReceive>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f47f af4d 	bne.w	8003130 <prvProcessReceivedCommands+0x8>
        }
    }
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000170 	.word	0x20000170

080032a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032aa:	e009      	b.n	80032c0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <prvSwitchTimerLists+0x44>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80032b6:	f04f 31ff 	mov.w	r1, #4294967295
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	f7ff fe1e 	bl	8002efc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <prvSwitchTimerLists+0x44>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <prvSwitchTimerLists+0x44>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <prvSwitchTimerLists+0x48>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <prvSwitchTimerLists+0x44>)
 80032d6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <prvSwitchTimerLists+0x48>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
    }
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000168 	.word	0x20000168
 80032ec:	2000016c 	.word	0x2000016c

080032f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80032f4:	f000 f958 	bl	80035a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <prvCheckForValidListAndQueue+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d113      	bne.n	8003328 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8003300:	480c      	ldr	r0, [pc, #48]	; (8003334 <prvCheckForValidListAndQueue+0x44>)
 8003302:	f7fe fa71 	bl	80017e8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003306:	480c      	ldr	r0, [pc, #48]	; (8003338 <prvCheckForValidListAndQueue+0x48>)
 8003308:	f7fe fa6e 	bl	80017e8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <prvCheckForValidListAndQueue+0x4c>)
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <prvCheckForValidListAndQueue+0x44>)
 8003310:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <prvCheckForValidListAndQueue+0x50>)
 8003314:	4a08      	ldr	r2, [pc, #32]	; (8003338 <prvCheckForValidListAndQueue+0x48>)
 8003316:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003318:	2200      	movs	r2, #0
 800331a:	210c      	movs	r1, #12
 800331c:	2005      	movs	r0, #5
 800331e:	f7fe fb83 	bl	8001a28 <xQueueGenericCreate>
 8003322:	4603      	mov	r3, r0
 8003324:	4a02      	ldr	r2, [pc, #8]	; (8003330 <prvCheckForValidListAndQueue+0x40>)
 8003326:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003328:	f000 f96e 	bl	8003608 <vPortExitCritical>
    }
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000170 	.word	0x20000170
 8003334:	20000140 	.word	0x20000140
 8003338:	20000154 	.word	0x20000154
 800333c:	20000168 	.word	0x20000168
 8003340:	2000016c 	.word	0x2000016c

08003344 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3b04      	subs	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800335c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b04      	subs	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b04      	subs	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003374:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <pxPortInitialiseStack+0x64>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b14      	subs	r3, #20
 800337e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3b04      	subs	r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f06f 0202 	mvn.w	r2, #2
 8003392:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b20      	subs	r3, #32
 8003398:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	080033ad 	.word	0x080033ad

080033ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <prvTaskExitError+0x54>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d00a      	beq.n	80033d6 <prvTaskExitError+0x2a>
        __asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	60fb      	str	r3, [r7, #12]
    }
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <prvTaskExitError+0x28>
        __asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	60bb      	str	r3, [r7, #8]
    }
 80033e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80033ea:	bf00      	nop
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0fc      	beq.n	80033ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	20000014 	.word	0x20000014
	...

08003410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <pxCurrentTCBConst2>)
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6808      	ldr	r0, [r1, #0]
 8003416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341a:	f380 8809 	msr	PSP, r0
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f380 8811 	msr	BASEPRI, r0
 800342a:	4770      	bx	lr
 800342c:	f3af 8000 	nop.w

08003430 <pxCurrentTCBConst2>:
 8003430:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop

08003438 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003438:	4808      	ldr	r0, [pc, #32]	; (800345c <prvPortStartFirstTask+0x24>)
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	6800      	ldr	r0, [r0, #0]
 800343e:	f380 8808 	msr	MSP, r0
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f380 8814 	msr	CONTROL, r0
 800344a:	b662      	cpsie	i
 800344c:	b661      	cpsie	f
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	df00      	svc	0
 8003458:	bf00      	nop
 800345a:	0000      	.short	0x0000
 800345c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop

08003464 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800346a:	4b46      	ldr	r3, [pc, #280]	; (8003584 <xPortStartScheduler+0x120>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <xPortStartScheduler+0x124>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10a      	bne.n	800348a <xPortStartScheduler+0x26>
        __asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	613b      	str	r3, [r7, #16]
    }
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <xPortStartScheduler+0x120>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3f      	ldr	r2, [pc, #252]	; (800358c <xPortStartScheduler+0x128>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10a      	bne.n	80034aa <xPortStartScheduler+0x46>
        __asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60fb      	str	r3, [r7, #12]
    }
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <xPortStartScheduler+0x12c>)
 80034ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	22ff      	movs	r2, #255	; 0xff
 80034ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4b31      	ldr	r3, [pc, #196]	; (8003594 <xPortStartScheduler+0x130>)
 80034d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034d2:	4b31      	ldr	r3, [pc, #196]	; (8003598 <xPortStartScheduler+0x134>)
 80034d4:	2207      	movs	r2, #7
 80034d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d8:	e009      	b.n	80034ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <xPortStartScheduler+0x134>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3b01      	subs	r3, #1
 80034e0:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <xPortStartScheduler+0x134>)
 80034e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d0ef      	beq.n	80034da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034fa:	4b27      	ldr	r3, [pc, #156]	; (8003598 <xPortStartScheduler+0x134>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00a      	beq.n	800351c <xPortStartScheduler+0xb8>
        __asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60bb      	str	r3, [r7, #8]
    }
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800351c:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <xPortStartScheduler+0x134>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <xPortStartScheduler+0x134>)
 8003524:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <xPortStartScheduler+0x134>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <xPortStartScheduler+0x134>)
 8003530:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <xPortStartScheduler+0x138>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <xPortStartScheduler+0x138>)
 8003540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003544:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <xPortStartScheduler+0x138>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a14      	ldr	r2, [pc, #80]	; (800359c <xPortStartScheduler+0x138>)
 800354c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003550:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003552:	f000 f8db 	bl	800370c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <xPortStartScheduler+0x13c>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800355c:	f000 f8f0 	bl	8003740 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003560:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <xPortStartScheduler+0x140>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <xPortStartScheduler+0x140>)
 8003566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800356a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800356c:	f7ff ff64 	bl	8003438 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003570:	f7ff f8fc 	bl	800276c <vTaskSwitchContext>
    prvTaskExitError();
 8003574:	f7ff ff1a 	bl	80033ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00
 8003588:	410fc271 	.word	0x410fc271
 800358c:	410fc270 	.word	0x410fc270
 8003590:	e000e400 	.word	0xe000e400
 8003594:	2000017c 	.word	0x2000017c
 8003598:	20000180 	.word	0x20000180
 800359c:	e000ed20 	.word	0xe000ed20
 80035a0:	20000014 	.word	0x20000014
 80035a4:	e000ef34 	.word	0xe000ef34

080035a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
        __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	607b      	str	r3, [r7, #4]
    }
 80035c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <vPortEnterCritical+0x58>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <vPortEnterCritical+0x58>)
 80035ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <vPortEnterCritical+0x58>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10f      	bne.n	80035f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <vPortEnterCritical+0x5c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	603b      	str	r3, [r7, #0]
    }
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <vPortEnterCritical+0x4a>
    }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000014 	.word	0x20000014
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <vPortExitCritical+0x50>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <vPortExitCritical+0x24>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	607b      	str	r3, [r7, #4]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <vPortExitCritical+0x50>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <vPortExitCritical+0x50>)
 8003634:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <vPortExitCritical+0x50>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <vPortExitCritical+0x42>
 800363e:	2300      	movs	r3, #0
 8003640:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f383 8811 	msr	BASEPRI, r3
    }
 8003648:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000014 	.word	0x20000014
 800365c:	00000000 	.word	0x00000000

08003660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003660:	f3ef 8009 	mrs	r0, PSP
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <pxCurrentTCBConst>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f01e 0f10 	tst.w	lr, #16
 8003670:	bf08      	it	eq
 8003672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367a:	6010      	str	r0, [r2, #0]
 800367c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003684:	f380 8811 	msr	BASEPRI, r0
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f7ff f86c 	bl	800276c <vTaskSwitchContext>
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f380 8811 	msr	BASEPRI, r0
 800369c:	bc09      	pop	{r0, r3}
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	6808      	ldr	r0, [r1, #0]
 80036a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a6:	f01e 0f10 	tst.w	lr, #16
 80036aa:	bf08      	it	eq
 80036ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036b0:	f380 8809 	msr	PSP, r0
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w

080036c0 <pxCurrentTCBConst>:
 80036c0:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
        __asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	607b      	str	r3, [r7, #4]
    }
 80036e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80036e2:	f7fe ff2d 	bl	8002540 <xTaskIncrementTick>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <SysTick_Handler+0x40>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f383 8811 	msr	BASEPRI, r3
    }
 80036fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <vPortSetupTimerInterrupt+0x28>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <vPortSetupTimerInterrupt+0x2c>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <vPortSetupTimerInterrupt+0x30>)
 800371e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003722:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <vPortSetupTimerInterrupt+0x28>)
 8003726:	2207      	movs	r2, #7
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000e010 	.word	0xe000e010
 8003738:	e000e018 	.word	0xe000e018
 800373c:	e000e014 	.word	0xe000e014

08003740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003750 <vPortEnableVFP+0x10>
 8003744:	6801      	ldr	r1, [r0, #0]
 8003746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800374a:	6001      	str	r1, [r0, #0]
 800374c:	4770      	bx	lr
 800374e:	0000      	.short	0x0000
 8003750:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop

08003758 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003764:	f7fe fdd2 	bl	800230c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <pvPortMalloc+0x160>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003770:	f000 f908 	bl	8003984 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800377a:	2208      	movs	r2, #8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	3308      	adds	r3, #8
 8003786:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	43db      	mvns	r3, r3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d804      	bhi.n	800379c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	e001      	b.n	80037a0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db70      	blt.n	8003888 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d06d      	beq.n	8003888 <pvPortMalloc+0x130>
 80037ac:	4b43      	ldr	r3, [pc, #268]	; (80038bc <pvPortMalloc+0x164>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d868      	bhi.n	8003888 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037b6:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <pvPortMalloc+0x168>)
 80037b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <pvPortMalloc+0x168>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037c0:	e004      	b.n	80037cc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d903      	bls.n	80037de <pvPortMalloc+0x86>
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f1      	bne.n	80037c2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037de:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <pvPortMalloc+0x160>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d04f      	beq.n	8003888 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2208      	movs	r2, #8
 80037ee:	4413      	add	r3, r2
 80037f0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad2      	subs	r2, r2, r3
 8003802:	2308      	movs	r3, #8
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	429a      	cmp	r2, r3
 8003808:	d91f      	bls.n	800384a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <pvPortMalloc+0xda>
        __asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	613b      	str	r3, [r7, #16]
    }
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f000 f8f9 	bl	8003a3c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800384a:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <pvPortMalloc+0x164>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <pvPortMalloc+0x164>)
 8003856:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <pvPortMalloc+0x164>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <pvPortMalloc+0x16c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d203      	bcs.n	800386c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <pvPortMalloc+0x164>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <pvPortMalloc+0x16c>)
 800386a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <pvPortMalloc+0x170>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <pvPortMalloc+0x170>)
 8003886:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003888:	f7fe fd4e 	bl	8002328 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <pvPortMalloc+0x154>
        __asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	60fb      	str	r3, [r7, #12]
    }
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <pvPortMalloc+0x152>
    return pvReturn;
 80038ac:	69fb      	ldr	r3, [r7, #28]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3728      	adds	r7, #40	; 0x28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000798c 	.word	0x2000798c
 80038bc:	20007990 	.word	0x20007990
 80038c0:	20007984 	.word	0x20007984
 80038c4:	20007994 	.word	0x20007994
 80038c8:	20007998 	.word	0x20007998

080038cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d049      	beq.n	8003972 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038de:	2308      	movs	r3, #8
 80038e0:	425b      	negs	r3, r3
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4413      	add	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	db0a      	blt.n	800390a <vPortFree+0x3e>
        __asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
    }
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <vPortFree+0x5c>
        __asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	60bb      	str	r3, [r7, #8]
    }
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0fdb      	lsrs	r3, r3, #31
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01c      	beq.n	8003972 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d118      	bne.n	8003972 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800394c:	f7fe fcde 	bl	800230c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <vPortFree+0xb0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4413      	add	r3, r2
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <vPortFree+0xb0>)
 800395c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800395e:	6938      	ldr	r0, [r7, #16]
 8003960:	f000 f86c 	bl	8003a3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <vPortFree+0xb4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a05      	ldr	r2, [pc, #20]	; (8003980 <vPortFree+0xb4>)
 800396c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800396e:	f7fe fcdb 	bl	8002328 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20007990 	.word	0x20007990
 8003980:	2000799c 	.word	0x2000799c

08003984 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800398a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800398e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <prvHeapInit+0xa4>)
 8003992:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3307      	adds	r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0307 	bic.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <prvHeapInit+0xa4>)
 80039b4:	4413      	add	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <prvHeapInit+0xa8>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <prvHeapInit+0xa8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	4413      	add	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039d0:	2208      	movs	r2, #8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0307 	bic.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <prvHeapInit+0xac>)
 80039e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <prvHeapInit+0xac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <prvHeapInit+0xac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <prvHeapInit+0xac>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <prvHeapInit+0xb0>)
 8003a12:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <prvHeapInit+0xb4>)
 8003a1a:	6013      	str	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	20000184 	.word	0x20000184
 8003a2c:	20007984 	.word	0x20007984
 8003a30:	2000798c 	.word	0x2000798c
 8003a34:	20007994 	.word	0x20007994
 8003a38:	20007990 	.word	0x20007990

08003a3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a44:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <prvInsertBlockIntoFreeList+0xac>)
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e002      	b.n	8003a50 <prvInsertBlockIntoFreeList+0x14>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d8f7      	bhi.n	8003a4a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d108      	bne.n	8003a7e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d118      	bne.n	8003ac4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <prvInsertBlockIntoFreeList+0xb0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d00d      	beq.n	8003aba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e008      	b.n	8003acc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <prvInsertBlockIntoFreeList+0xb0>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e003      	b.n	8003acc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d002      	beq.n	8003ada <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20007984 	.word	0x20007984
 8003aec:	2000798c 	.word	0x2000798c

08003af0 <__libc_init_array>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	4d0d      	ldr	r5, [pc, #52]	; (8003b28 <__libc_init_array+0x38>)
 8003af4:	4c0d      	ldr	r4, [pc, #52]	; (8003b2c <__libc_init_array+0x3c>)
 8003af6:	1b64      	subs	r4, r4, r5
 8003af8:	10a4      	asrs	r4, r4, #2
 8003afa:	2600      	movs	r6, #0
 8003afc:	42a6      	cmp	r6, r4
 8003afe:	d109      	bne.n	8003b14 <__libc_init_array+0x24>
 8003b00:	4d0b      	ldr	r5, [pc, #44]	; (8003b30 <__libc_init_array+0x40>)
 8003b02:	4c0c      	ldr	r4, [pc, #48]	; (8003b34 <__libc_init_array+0x44>)
 8003b04:	f000 f82e 	bl	8003b64 <_init>
 8003b08:	1b64      	subs	r4, r4, r5
 8003b0a:	10a4      	asrs	r4, r4, #2
 8003b0c:	2600      	movs	r6, #0
 8003b0e:	42a6      	cmp	r6, r4
 8003b10:	d105      	bne.n	8003b1e <__libc_init_array+0x2e>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b18:	4798      	blx	r3
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7ee      	b.n	8003afc <__libc_init_array+0xc>
 8003b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b22:	4798      	blx	r3
 8003b24:	3601      	adds	r6, #1
 8003b26:	e7f2      	b.n	8003b0e <__libc_init_array+0x1e>
 8003b28:	08003bb8 	.word	0x08003bb8
 8003b2c:	08003bb8 	.word	0x08003bb8
 8003b30:	08003bb8 	.word	0x08003bb8
 8003b34:	08003bbc 	.word	0x08003bbc

08003b38 <memcpy>:
 8003b38:	440a      	add	r2, r1
 8003b3a:	4291      	cmp	r1, r2
 8003b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b40:	d100      	bne.n	8003b44 <memcpy+0xc>
 8003b42:	4770      	bx	lr
 8003b44:	b510      	push	{r4, lr}
 8003b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	d1f9      	bne.n	8003b46 <memcpy+0xe>
 8003b52:	bd10      	pop	{r4, pc}

08003b54 <memset>:
 8003b54:	4402      	add	r2, r0
 8003b56:	4603      	mov	r3, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
