
RTOS_TASK11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000440c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045ec  080045ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045f4  080045f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080045fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007994  20000014  08004610  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200079a8  08004610  000279a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d90  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0c  00000000  00000000  00028dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002aae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015acd  00000000  00000000  0002bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f2a  00000000  00000000  000415e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7d1  00000000  00000000  0004b50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5ce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020fc  00000000  00000000  000d5d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004594 	.word	0x08004594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004594 	.word	0x08004594

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:




int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 f9ff 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f84b 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8a7 	bl	8000644 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  xTaskCreate(Led2,"Led 2",85,NULL,Led2Pr,&Led2Handle);
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <main+0x7c>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2303      	movs	r3, #3
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2255      	movs	r2, #85	; 0x55
 8000502:	4918      	ldr	r1, [pc, #96]	; (8000564 <main+0x80>)
 8000504:	4818      	ldr	r0, [pc, #96]	; (8000568 <main+0x84>)
 8000506:	f001 fed7 	bl	80022b8 <xTaskCreate>

 	 /* Creation of the Task*/

 	 xTaskCreate(PushButton2,"Push Button 2",85,NULL,PushButton2Pr,&PushHandle2);
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <main+0x88>)
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2302      	movs	r3, #2
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2255      	movs	r2, #85	; 0x55
 8000516:	4916      	ldr	r1, [pc, #88]	; (8000570 <main+0x8c>)
 8000518:	4816      	ldr	r0, [pc, #88]	; (8000574 <main+0x90>)
 800051a:	f001 fecd 	bl	80022b8 <xTaskCreate>


 	 xTaskCreate(Led,"Led ",85,NULL,LedPr,&LedHandle);
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <main+0x94>)
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2255      	movs	r2, #85	; 0x55
 800052a:	4914      	ldr	r1, [pc, #80]	; (800057c <main+0x98>)
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <main+0x9c>)
 800052e:	f001 fec3 	bl	80022b8 <xTaskCreate>

 	 /*Init Function*/
 	 /*Create Semaphore for the Button */
 	 vSemaphoreCreateBinary(ButtonSemaphore);
 8000532:	2203      	movs	r2, #3
 8000534:	2100      	movs	r1, #0
 8000536:	2001      	movs	r0, #1
 8000538:	f001 fa18 	bl	800196c <xQueueGenericCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <main+0xa0>)
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <main+0xa0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <main+0x74>
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <main+0xa0>)
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	f001 fa78 	bl	8001a48 <xQueueGenericSend>


 	/*start Scheduler */
 	vTaskStartScheduler();
 8000558:	f002 f990 	bl	800287c <vTaskStartScheduler>


  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x78>
 800055e:	bf00      	nop
 8000560:	20000034 	.word	0x20000034
 8000564:	080045ac 	.word	0x080045ac
 8000568:	080006d5 	.word	0x080006d5
 800056c:	2000003c 	.word	0x2000003c
 8000570:	080045b4 	.word	0x080045b4
 8000574:	08000755 	.word	0x08000755
 8000578:	20000038 	.word	0x20000038
 800057c:	080045c4 	.word	0x080045c4
 8000580:	080007c5 	.word	0x080007c5
 8000584:	20000030 	.word	0x20000030

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fff4 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb4>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <SystemClock_Config+0xb8>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <SystemClock_Config+0xb8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fc72 	bl	8000ee4 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000606:	f000 f85f 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fed5 	bl	80013d4 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000630:	f000 f84a 	bl	80006c8 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	; 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_GPIO_Init+0x7c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_GPIO_Init+0x7c>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_GPIO_Init+0x7c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_GPIO_Init+0x7c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <MX_GPIO_Init+0x7c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_GPIO_Init+0x7c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	21e0      	movs	r1, #224	; 0xe0
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0x80>)
 8000698:	f000 fbf0 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800069c:	23e0      	movs	r3, #224	; 0xe0
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_GPIO_Init+0x80>)
 80006b4:	f000 fa5e 	bl	8000b74 <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <Led2>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */


void Led2(void * pvparam){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

	 portTickType Freq = 1000;
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 80006e2:	f002 fa27 	bl	8002b34 <xTaskGetTickCount>
 80006e6:	4603      	mov	r3, r0
 80006e8:	60bb      	str	r3, [r7, #8]
	 vTaskDelay(20);
 80006ea:	2014      	movs	r0, #20
 80006ec:	f001 ffc0 	bl	8002670 <vTaskDelay>
	 while (1){

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100)){
 80006f0:	e006      	b.n	8000700 <Led2+0x2c>
				 vTaskDelay(100);
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f001 ffbc 	bl	8002670 <vTaskDelay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f8:	2120      	movs	r1, #32
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <Led2+0x74>)
 80006fc:	f000 fbd7 	bl	8000eae <HAL_GPIO_TogglePin>
			 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100)){
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <Led2+0x78>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2164      	movs	r1, #100	; 0x64
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fb7c 	bl	8001e04 <xQueueSemaphoreTake>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0ef      	beq.n	80006f2 <Led2+0x1e>
			 }
			 vTaskPrioritySet(PushButton2,MAX_USINGSEMAPHORE);
 8000712:	2104      	movs	r1, #4
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <Led2+0x7c>)
 8000716:	f001 ffdf 	bl	80026d8 <vTaskPrioritySet>

			 vTaskDelay(10000);
 800071a:	f242 7010 	movw	r0, #10000	; 0x2710
 800071e:	f001 ffa7 	bl	8002670 <vTaskDelay>

			 xSemaphoreGive(ButtonSemaphore);
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <Led2+0x78>)
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	f001 f98c 	bl	8001a48 <xQueueGenericSend>
			 vTaskPrioritySet(PushButton2,Led2Pr);
 8000730:	2103      	movs	r1, #3
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <Led2+0x7c>)
 8000734:	f001 ffd0 	bl	80026d8 <vTaskPrioritySet>

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f001 ff18 	bl	8002574 <xTaskDelayUntil>
			 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100)){
 8000744:	e7dc      	b.n	8000700 <Led2+0x2c>
 8000746:	bf00      	nop
 8000748:	40020000 	.word	0x40020000
 800074c:	20000030 	.word	0x20000030
 8000750:	08000755 	.word	0x08000755

08000754 <PushButton2>:
	 }

}


void PushButton2(void * pvparam){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 100;
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 8000760:	f002 f9e8 	bl	8002b34 <xTaskGetTickCount>
 8000764:	4603      	mov	r3, r0
 8000766:	60bb      	str	r3, [r7, #8]
	 while (1){

				 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100));
 8000768:	bf00      	nop
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <PushButton2+0x64>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fb47 	bl	8001e04 <xQueueSemaphoreTake>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f6      	beq.n	800076a <PushButton2+0x16>
				 vTaskPrioritySet(PushButton2,MAX_USINGSEMAPHORE);
 800077c:	2104      	movs	r1, #4
 800077e:	480f      	ldr	r0, [pc, #60]	; (80007bc <PushButton2+0x68>)
 8000780:	f001 ffaa 	bl	80026d8 <vTaskPrioritySet>

				 /*Change the State **/
				 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <PushButton2+0x6c>)
 8000788:	f000 fb91 	bl	8000eae <HAL_GPIO_TogglePin>

				 vTaskDelay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f001 ff6e 	bl	8002670 <vTaskDelay>

				 /**Give the Semaphore */
				 xSemaphoreGive(ButtonSemaphore);
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <PushButton2+0x64>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	2300      	movs	r3, #0
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	f001 f953 	bl	8001a48 <xQueueGenericSend>
				 vTaskPrioritySet(PushButton2,PushButton2Pr);
 80007a2:	2102      	movs	r1, #2
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <PushButton2+0x68>)
 80007a6:	f001 ff97 	bl	80026d8 <vTaskPrioritySet>

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	68f9      	ldr	r1, [r7, #12]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fedf 	bl	8002574 <xTaskDelayUntil>
				 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100));
 80007b6:	e7d7      	b.n	8000768 <PushButton2+0x14>
 80007b8:	20000030 	.word	0x20000030
 80007bc:	08000755 	.word	0x08000755
 80007c0:	40020000 	.word	0x40020000

080007c4 <Led>:
	 }

}


void Led(void * pvparam){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 100;
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 80007d0:	f002 f9b0 	bl	8002b34 <xTaskGetTickCount>
 80007d4:	4603      	mov	r3, r0
 80007d6:	60bb      	str	r3, [r7, #8]
	 vTaskDelay(30);
 80007d8:	201e      	movs	r0, #30
 80007da:	f001 ff49 	bl	8002670 <vTaskDelay>
	 while (1){

		 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <Led+0x30>)
 80007e2:	f000 fb64 	bl	8000eae <HAL_GPIO_TogglePin>

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fec1 	bl	8002574 <xTaskDelayUntil>
		 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80007f2:	e7f4      	b.n	80007de <Led+0x1a>
 80007f4:	40020000 	.word	0x40020000

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800089e:	490e      	ldr	r1, [pc, #56]	; (80008d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b4:	4c0b      	ldr	r4, [pc, #44]	; (80008e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c2:	f7ff ffd7 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f003 fe2b 	bl	8004520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fe0b 	bl	80004e4 <main>
  bx  lr    
 80008ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008dc:	080045fc 	.word	0x080045fc
  ldr r2, =_sbss
 80008e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008e4:	200079a8 	.word	0x200079a8

080008e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_Init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <HAL_Init+0x40>)
 80008f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_Init+0x40>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_Init+0x40>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f8f9 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff ff6a 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023c00 	.word	0x40023c00

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f903 	bl	8000b5a <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f8d9 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000000 	.word	0x20000000
 8000988:	20000008 	.word	0x20000008
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000040 	.word	0x20000040

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff47 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff5c 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffb0 	bl	8000ac8 <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	e159      	b.n	8000e44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f040 8148 	bne.w	8000e3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d005      	beq.n	8000bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d130      	bne.n	8000c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	f003 0201 	and.w	r2, r3, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d017      	beq.n	8000c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d123      	bne.n	8000cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	69b9      	ldr	r1, [r7, #24]
 8000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0203 	and.w	r2, r3, #3
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80a2 	beq.w	8000e3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a56      	ldr	r2, [pc, #344]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d16:	4a52      	ldr	r2, [pc, #328]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d019      	beq.n	8000d76 <HAL_GPIO_Init+0x202>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <HAL_GPIO_Init+0x2f4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0x1fe>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a47      	ldr	r2, [pc, #284]	; (8000e6c <HAL_GPIO_Init+0x2f8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00d      	beq.n	8000d6e <HAL_GPIO_Init+0x1fa>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <HAL_GPIO_Init+0x2fc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x1f6>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a45      	ldr	r2, [pc, #276]	; (8000e74 <HAL_GPIO_Init+0x300>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_GPIO_Init+0x1f2>
 8000d62:	2304      	movs	r3, #4
 8000d64:	e008      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e004      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d76:	2300      	movs	r3, #0
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	f002 0203 	and.w	r2, r2, #3
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d88:	4935      	ldr	r1, [pc, #212]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	2b0f      	cmp	r3, #15
 8000e48:	f67f aea2 	bls.w	8000b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40013c00 	.word	0x40013c00

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e98:	e003      	b.n	8000ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	041a      	lsls	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	619a      	str	r2, [r3, #24]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	041a      	lsls	r2, r3, #16
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	400b      	ands	r3, r1
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e267      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f02:	4b88      	ldr	r3, [pc, #544]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b85      	ldr	r3, [pc, #532]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b82      	ldr	r3, [pc, #520]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b7e      	ldr	r3, [pc, #504]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e242      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b76      	ldr	r3, [pc, #472]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a75      	ldr	r2, [pc, #468]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b70      	ldr	r3, [pc, #448]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6f      	ldr	r2, [pc, #444]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6c      	ldr	r2, [pc, #432]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b69      	ldr	r3, [pc, #420]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a68      	ldr	r2, [pc, #416]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcf8 	bl	8000990 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcf4 	bl	8000990 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e207      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fce4 	bl	8000990 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fce0 	bl	8000990 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f3      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b47      	ldr	r3, [pc, #284]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b44      	ldr	r3, [pc, #272]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c7      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4937      	ldr	r1, [pc, #220]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <HAL_RCC_OscConfig+0x244>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fc99 	bl	8000990 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fc95 	bl	8000990 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a8      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4925      	ldr	r1, [pc, #148]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <HAL_RCC_OscConfig+0x244>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fc78 	bl	8000990 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc74 	bl	8000990 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e187      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d036      	beq.n	800113c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_RCC_OscConfig+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc58 	bl	8000990 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc54 	bl	8000990 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e167      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_RCC_OscConfig+0x240>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_OscConfig+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc41 	bl	8000990 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e00e      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc3d 	bl	8000990 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d907      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e150      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ea      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8097 	beq.w	8001278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b81      	ldr	r3, [pc, #516]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b7d      	ldr	r3, [pc, #500]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a7c      	ldr	r2, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b7a      	ldr	r3, [pc, #488]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b77      	ldr	r3, [pc, #476]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b74      	ldr	r3, [pc, #464]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a73      	ldr	r2, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fbfd 	bl	8000990 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fbf9 	bl	8000990 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e10c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x474>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ea>
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c4:	4a63      	ldr	r2, [pc, #396]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	; 0x70
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x30c>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e6:	4a5b      	ldr	r2, [pc, #364]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6713      	str	r3, [r2, #112]	; 0x70
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a57      	ldr	r2, [pc, #348]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbbe 	bl	8000990 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fbba 	bl	8000990 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0cb      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ee      	beq.n	8001218 <HAL_RCC_OscConfig+0x334>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fba8 	bl	8000990 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fba4 	bl	8000990 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0b5      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ee      	bne.n	8001244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a1 	beq.w	80013c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d05c      	beq.n	8001348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d141      	bne.n	800131a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb78 	bl	8000990 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb74 	bl	8000990 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e087      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	491b      	ldr	r1, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x478>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb4d 	bl	8000990 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb49 	bl	8000990 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x416>
 8001318:	e054      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb36 	bl	8000990 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb32 	bl	8000990 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e045      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e038      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000
 800135c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x4ec>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d028      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d121      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001398:	4293      	cmp	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fa64 	bl	8000990 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fa60 	bl	8000990 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9d8 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	080045dc 	.word	0x080045dc
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b090      	sub	sp, #64	; 0x40
 80015a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f200 80a1 	bhi.w	800170c <HAL_RCC_GetSysClockFreq+0x16c>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3a>
 80015d2:	e09b      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80015d8:	e09b      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015de:	e098      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	623b      	str	r3, [r7, #32]
 8001600:	627a      	str	r2, [r7, #36]	; 0x24
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001608:	2100      	movs	r1, #0
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800160c:	fb03 f201 	mul.w	r2, r3, r1
 8001610:	2300      	movs	r3, #0
 8001612:	fb00 f303 	mul.w	r3, r0, r3
 8001616:	4413      	add	r3, r2
 8001618:	4a43      	ldr	r2, [pc, #268]	; (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800161a:	fba0 1202 	umull	r1, r2, r0, r2
 800161e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001620:	460a      	mov	r2, r1
 8001622:	62ba      	str	r2, [r7, #40]	; 0x28
 8001624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001626:	4413      	add	r3, r2
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162c:	2200      	movs	r2, #0
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	61fa      	str	r2, [r7, #28]
 8001632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800163a:	f7fe fdd1 	bl	80001e0 <__aeabi_uldivmod>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4613      	mov	r3, r2
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001646:	e053      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	2200      	movs	r2, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	617a      	str	r2, [r7, #20]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800165a:	f04f 0b00 	mov.w	fp, #0
 800165e:	4652      	mov	r2, sl
 8001660:	465b      	mov	r3, fp
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ebb2 080a 	subs.w	r8, r2, sl
 800167a:	eb63 090b 	sbc.w	r9, r3, fp
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800168a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800168e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001692:	ebb2 0408 	subs.w	r4, r2, r8
 8001696:	eb63 0509 	sbc.w	r5, r3, r9
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00eb      	lsls	r3, r5, #3
 80016a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a8:	00e2      	lsls	r2, r4, #3
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	eb14 030a 	adds.w	r3, r4, sl
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	eb45 030b 	adc.w	r3, r5, fp
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016c6:	4629      	mov	r1, r5
 80016c8:	028b      	lsls	r3, r1, #10
 80016ca:	4621      	mov	r1, r4
 80016cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d0:	4621      	mov	r1, r4
 80016d2:	028a      	lsls	r2, r1, #10
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	2200      	movs	r2, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e4:	f7fe fd7c 	bl	80001e0 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	3301      	adds	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800170a:	e002      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001714:	4618      	mov	r0, r3
 8001716:	3740      	adds	r7, #64	; 0x40
 8001718:	46bd      	mov	sp, r7
 800171a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	00f42400 	.word	0x00f42400
 8001728:	017d7840 	.word	0x017d7840

0800172c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f103 0208 	add.w	r2, r3, #8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f103 0208 	add.w	r2, r3, #8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f103 0208 	add.w	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d103      	bne.n	80017a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e00c      	b.n	80017c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3308      	adds	r3, #8
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e002      	b.n	80017b4 <vListInsert+0x2e>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d2f6      	bcs.n	80017ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6892      	ldr	r2, [r2, #8]
 800180e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6852      	ldr	r2, [r2, #4]
 8001818:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d103      	bne.n	800182c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1e5a      	subs	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001868:	f383 8811 	msr	BASEPRI, r3
 800186c:	f3bf 8f6f 	isb	sy
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001876:	bf00      	nop
 8001878:	e7fe      	b.n	8001878 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05d      	beq.n	800193c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d059      	beq.n	800193c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	2100      	movs	r1, #0
 8001892:	fba3 2302 	umull	r2, r3, r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d000      	beq.n	800189c <xQueueGenericReset+0x50>
 800189a:	2101      	movs	r1, #1
 800189c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d14c      	bne.n	800193c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80018a2:	f002 fb99 	bl	8003fd8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	6939      	ldr	r1, [r7, #16]
 80018b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	441a      	add	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2200      	movs	r2, #0
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6939      	ldr	r1, [r7, #16]
 80018d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	441a      	add	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	22ff      	movs	r2, #255	; 0xff
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	22ff      	movs	r2, #255	; 0xff
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d114      	bne.n	8001922 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01a      	beq.n	8001936 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3310      	adds	r3, #16
 8001904:	4618      	mov	r0, r3
 8001906:	f001 fb01 	bl	8002f0c <xTaskRemoveFromEventList>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d012      	beq.n	8001936 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <xQueueGenericReset+0x11c>)
 8001912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	e009      	b.n	8001936 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	3310      	adds	r3, #16
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff00 	bl	800172c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	3324      	adds	r3, #36	; 0x24
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fefb 	bl	800172c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001936:	f002 fb7f 	bl	8004038 <vPortExitCritical>
 800193a:	e001      	b.n	8001940 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <xQueueGenericReset+0x110>
        __asm volatile
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	60bb      	str	r3, [r7, #8]
    }
 8001958:	bf00      	nop
 800195a:	e7fe      	b.n	800195a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800195c:	697b      	ldr	r3, [r7, #20]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000ed04 	.word	0xe000ed04

0800196c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	4613      	mov	r3, r2
 8001978:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d02e      	beq.n	80019e2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001984:	2100      	movs	r1, #0
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	fba3 2302 	umull	r2, r3, r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d000      	beq.n	8001994 <xQueueGenericCreate+0x28>
 8001992:	2101      	movs	r1, #1
 8001994:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d123      	bne.n	80019e2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80019a2:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80019a6:	d81c      	bhi.n	80019e2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	3348      	adds	r3, #72	; 0x48
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fbe6 	bl	8004188 <pvPortMalloc>
 80019bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3348      	adds	r3, #72	; 0x48
 80019cc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4613      	mov	r3, r2
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f814 	bl	8001a08 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80019e0:	e00d      	b.n	80019fe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <xQueueGenericCreate+0x92>
        __asm volatile
 80019e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ec:	f383 8811 	msr	BASEPRI, r3
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	f3bf 8f4f 	dsb	sy
 80019f8:	613b      	str	r3, [r7, #16]
    }
 80019fa:	bf00      	nop
 80019fc:	e7fe      	b.n	80019fc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80019fe:	69fb      	ldr	r3, [r7, #28]
    }
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e002      	b.n	8001a2a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a36:	2101      	movs	r1, #1
 8001a38:	69b8      	ldr	r0, [r7, #24]
 8001a3a:	f7ff ff07 	bl	800184c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <xQueueGenericSend+0x32>
        __asm volatile
 8001a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a68:	f383 8811 	msr	BASEPRI, r3
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001a76:	bf00      	nop
 8001a78:	e7fe      	b.n	8001a78 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <xQueueGenericSend+0x40>
 8001a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <xQueueGenericSend+0x44>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <xQueueGenericSend+0x46>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <xQueueGenericSend+0x60>
        __asm volatile
 8001a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001aa4:	bf00      	nop
 8001aa6:	e7fe      	b.n	8001aa6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d103      	bne.n	8001ab6 <xQueueGenericSend+0x6e>
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <xQueueGenericSend+0x72>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <xQueueGenericSend+0x74>
 8001aba:	2300      	movs	r3, #0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10a      	bne.n	8001ad6 <xQueueGenericSend+0x8e>
        __asm volatile
 8001ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	f3bf 8f6f 	isb	sy
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	623b      	str	r3, [r7, #32]
    }
 8001ad2:	bf00      	nop
 8001ad4:	e7fe      	b.n	8001ad4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ad6:	f001 fc29 	bl	800332c <xTaskGetSchedulerState>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <xQueueGenericSend+0x9e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <xQueueGenericSend+0xa2>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <xQueueGenericSend+0xa4>
 8001aea:	2300      	movs	r3, #0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10a      	bne.n	8001b06 <xQueueGenericSend+0xbe>
        __asm volatile
 8001af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af4:	f383 8811 	msr	BASEPRI, r3
 8001af8:	f3bf 8f6f 	isb	sy
 8001afc:	f3bf 8f4f 	dsb	sy
 8001b00:	61fb      	str	r3, [r7, #28]
    }
 8001b02:	bf00      	nop
 8001b04:	e7fe      	b.n	8001b04 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001b06:	f002 fa67 	bl	8003fd8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <xQueueGenericSend+0xd4>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d129      	bne.n	8001b70 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b22:	f000 fa85 	bl	8002030 <prvCopyDataToQueue>
 8001b26:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b32:	3324      	adds	r3, #36	; 0x24
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 f9e9 	bl	8002f0c <xTaskRemoveFromEventList>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <xQueueGenericSend+0x1f8>)
 8001b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	e00a      	b.n	8001b68 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <xQueueGenericSend+0x1f8>)
 8001b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f3bf 8f4f 	dsb	sy
 8001b64:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001b68:	f002 fa66 	bl	8004038 <vPortExitCritical>
                return pdPASS;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e063      	b.n	8001c38 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001b76:	f002 fa5f 	bl	8004038 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e05c      	b.n	8001c38 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fa95 	bl	80030b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001b92:	f002 fa51 	bl	8004038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001b96:	f000 fec3 	bl	8002920 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001b9a:	f002 fa1d 	bl	8003fd8 <vPortEnterCritical>
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001baa:	d103      	bne.n	8001bb4 <xQueueGenericSend+0x16c>
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d103      	bne.n	8001bca <xQueueGenericSend+0x182>
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bca:	f002 fa35 	bl	8004038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bce:	1d3a      	adds	r2, r7, #4
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fa84 	bl	80030e4 <xTaskCheckForTimeOut>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d124      	bne.n	8001c2c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001be4:	f000 fb1c 	bl	8002220 <prvIsQueueFull>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d018      	beq.n	8001c20 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	3310      	adds	r3, #16
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 f91e 	bl	8002e38 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bfe:	f000 faa7 	bl	8002150 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001c02:	f000 fe9b 	bl	800293c <xTaskResumeAll>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f af7c 	bne.w	8001b06 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <xQueueGenericSend+0x1f8>)
 8001c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f3bf 8f4f 	dsb	sy
 8001c1a:	f3bf 8f6f 	isb	sy
 8001c1e:	e772      	b.n	8001b06 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c22:	f000 fa95 	bl	8002150 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c26:	f000 fe89 	bl	800293c <xTaskResumeAll>
 8001c2a:	e76c      	b.n	8001b06 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c2e:	f000 fa8f 	bl	8002150 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001c32:	f000 fe83 	bl	800293c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001c36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3738      	adds	r7, #56	; 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	e000ed04 	.word	0xe000ed04

08001c44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10a      	bne.n	8001c74 <xQueueReceive+0x30>
        __asm volatile
 8001c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	623b      	str	r3, [r7, #32]
    }
 8001c70:	bf00      	nop
 8001c72:	e7fe      	b.n	8001c72 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <xQueueReceive+0x3e>
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <xQueueReceive+0x42>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <xQueueReceive+0x44>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <xQueueReceive+0x5e>
        __asm volatile
 8001c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	61fb      	str	r3, [r7, #28]
    }
 8001c9e:	bf00      	nop
 8001ca0:	e7fe      	b.n	8001ca0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ca2:	f001 fb43 	bl	800332c <xTaskGetSchedulerState>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <xQueueReceive+0x6e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <xQueueReceive+0x72>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <xQueueReceive+0x74>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <xQueueReceive+0x8e>
        __asm volatile
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	61bb      	str	r3, [r7, #24]
    }
 8001cce:	bf00      	nop
 8001cd0:	e7fe      	b.n	8001cd0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cd2:	f002 f981 	bl	8003fd8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01f      	beq.n	8001d22 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ce6:	f000 fa0d 	bl	8002104 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00f      	beq.n	8001d1a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 f904 	bl	8002f0c <xTaskRemoveFromEventList>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <xQueueReceive+0x1bc>)
 8001d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001d1a:	f002 f98d 	bl	8004038 <vPortExitCritical>
                return pdPASS;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e069      	b.n	8001df6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d28:	f002 f986 	bl	8004038 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e062      	b.n	8001df6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 f9bc 	bl	80030b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d44:	f002 f978 	bl	8004038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d48:	f000 fdea 	bl	8002920 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d4c:	f002 f944 	bl	8003fd8 <vPortEnterCritical>
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d103      	bne.n	8001d66 <xQueueReceive+0x122>
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d103      	bne.n	8001d7c <xQueueReceive+0x138>
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d7c:	f002 f95c 	bl	8004038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d80:	1d3a      	adds	r2, r7, #4
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 f9ab 	bl	80030e4 <xTaskCheckForTimeOut>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d123      	bne.n	8001ddc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d96:	f000 fa2d 	bl	80021f4 <prvIsQueueEmpty>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d017      	beq.n	8001dd0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	3324      	adds	r3, #36	; 0x24
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 f845 	bl	8002e38 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001db0:	f000 f9ce 	bl	8002150 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001db4:	f000 fdc2 	bl	800293c <xTaskResumeAll>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d189      	bne.n	8001cd2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <xQueueReceive+0x1bc>)
 8001dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f3bf 8f4f 	dsb	sy
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	e780      	b.n	8001cd2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd2:	f000 f9bd 	bl	8002150 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001dd6:	f000 fdb1 	bl	800293c <xTaskResumeAll>
 8001dda:	e77a      	b.n	8001cd2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dde:	f000 f9b7 	bl	8002150 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001de2:	f000 fdab 	bl	800293c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de8:	f000 fa04 	bl	80021f4 <prvIsQueueEmpty>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f43f af6f 	beq.w	8001cd2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001df4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3730      	adds	r7, #48	; 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000ed04 	.word	0xe000ed04

08001e04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	61bb      	str	r3, [r7, #24]
    }
 8001e32:	bf00      	nop
 8001e34:	e7fe      	b.n	8001e34 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8001e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	617b      	str	r3, [r7, #20]
    }
 8001e50:	bf00      	nop
 8001e52:	e7fe      	b.n	8001e52 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e54:	f001 fa6a 	bl	800332c <xTaskGetSchedulerState>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <xQueueSemaphoreTake+0x60>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <xQueueSemaphoreTake+0x64>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <xQueueSemaphoreTake+0x66>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8001e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e72:	f383 8811 	msr	BASEPRI, r3
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	613b      	str	r3, [r7, #16]
    }
 8001e80:	bf00      	nop
 8001e82:	e7fe      	b.n	8001e82 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e84:	f002 f8a8 	bl	8003fd8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d024      	beq.n	8001ede <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d104      	bne.n	8001eae <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001ea4:	f001 fc5a 	bl	800375c <pvTaskIncrementMutexHeldCount>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00f      	beq.n	8001ed6 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	3310      	adds	r3, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f826 	bl	8002f0c <xTaskRemoveFromEventList>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <xQueueSemaphoreTake+0x1f8>)
 8001ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001ed6:	f002 f8af 	bl	8004038 <vPortExitCritical>
                return pdPASS;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e089      	b.n	8001ff2 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001ee4:	f002 f8a8 	bl	8004038 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e082      	b.n	8001ff2 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 f8de 	bl	80030b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f00:	f002 f89a 	bl	8004038 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f04:	f000 fd0c 	bl	8002920 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f08:	f002 f866 	bl	8003fd8 <vPortEnterCritical>
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d103      	bne.n	8001f22 <xQueueSemaphoreTake+0x11e>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d103      	bne.n	8001f38 <xQueueSemaphoreTake+0x134>
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f38:	f002 f87e 	bl	8004038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f3c:	463a      	mov	r2, r7
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 f8cd 	bl	80030e4 <xTaskCheckForTimeOut>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d132      	bne.n	8001fb6 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f52:	f000 f94f 	bl	80021f4 <prvIsQueueEmpty>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d026      	beq.n	8001faa <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8001f64:	f002 f838 	bl	8003fd8 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f9fb 	bl	8003368 <xTaskPriorityInherit>
 8001f72:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8001f74:	f002 f860 	bl	8004038 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	3324      	adds	r3, #36	; 0x24
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 ff59 	bl	8002e38 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f88:	f000 f8e2 	bl	8002150 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f8c:	f000 fcd6 	bl	800293c <xTaskResumeAll>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f47f af76 	bne.w	8001e84 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <xQueueSemaphoreTake+0x1f8>)
 8001f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	e76c      	b.n	8001e84 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fac:	f000 f8d0 	bl	8002150 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fb0:	f000 fcc4 	bl	800293c <xTaskResumeAll>
 8001fb4:	e766      	b.n	8001e84 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb8:	f000 f8ca 	bl	8002150 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fbc:	f000 fcbe 	bl	800293c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fc2:	f000 f917 	bl	80021f4 <prvIsQueueEmpty>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f43f af5b 	beq.w	8001e84 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8001fd4:	f002 f800 	bl	8003fd8 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fda:	f000 f811 	bl	8002000 <prvGetDisinheritPriorityAfterTimeout>
 8001fde:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	69f9      	ldr	r1, [r7, #28]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fb00 	bl	80035ec <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8001fec:	f002 f824 	bl	8004038 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001ff0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3730      	adds	r7, #48	; 0x30
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000ed04 	.word	0xe000ed04

08002000 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1c3 0305 	rsb	r3, r3, #5
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e001      	b.n	8002022 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002022:	68fb      	ldr	r3, [r7, #12]
    }
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d14d      	bne.n	80020f2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fa22 	bl	80034a4 <xTaskPriorityDisinherit>
 8002060:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	e043      	b.n	80020f2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d119      	bne.n	80020a4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6858      	ldr	r0, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	461a      	mov	r2, r3
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	f002 fa74 	bl	8004568 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	441a      	add	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d32b      	bcc.n	80020f2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	e026      	b.n	80020f2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68d8      	ldr	r0, [r3, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	461a      	mov	r2, r3
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	f002 fa5a 	bl	8004568 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	425b      	negs	r3, r3
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	425b      	negs	r3, r3
 80020da:	441a      	add	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d105      	bne.n	80020f2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d018      	beq.n	8002148 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	441a      	add	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d303      	bcc.n	8002138 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68d9      	ldr	r1, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	461a      	mov	r2, r3
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f002 fa10 	bl	8004568 <memcpy>
    }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002158:	f001 ff3e 	bl	8003fd8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002162:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002164:	e011      	b.n	800218a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	2b00      	cmp	r3, #0
 800216c:	d012      	beq.n	8002194 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3324      	adds	r3, #36	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f000 feca 	bl	8002f0c <xTaskRemoveFromEventList>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800217e:	f001 f817 	bl	80031b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3b01      	subs	r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	dce9      	bgt.n	8002166 <prvUnlockQueue+0x16>
 8002192:	e000      	b.n	8002196 <prvUnlockQueue+0x46>
                    break;
 8002194:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	22ff      	movs	r2, #255	; 0xff
 800219a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800219e:	f001 ff4b 	bl	8004038 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80021a2:	f001 ff19 	bl	8003fd8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ae:	e011      	b.n	80021d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3310      	adds	r3, #16
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fea5 	bl	8002f0c <xTaskRemoveFromEventList>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80021c8:	f000 fff2 	bl	80031b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dce9      	bgt.n	80021b0 <prvUnlockQueue+0x60>
 80021dc:	e000      	b.n	80021e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80021de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80021e8:	f001 ff26 	bl	8004038 <vPortExitCritical>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80021fc:	f001 feec 	bl	8003fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002208:	2301      	movs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e001      	b.n	8002212 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002212:	f001 ff11 	bl	8004038 <vPortExitCritical>

    return xReturn;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002228:	f001 fed6 	bl	8003fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	429a      	cmp	r2, r3
 8002236:	d102      	bne.n	800223e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e001      	b.n	8002242 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002242:	f001 fef9 	bl	8004038 <vPortExitCritical>

    return xReturn;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002260:	f001 feba 	bl	8003fd8 <vPortEnterCritical>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800226a:	b25b      	sxtb	r3, r3
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d103      	bne.n	800227a <vQueueWaitForMessageRestricted+0x2a>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002280:	b25b      	sxtb	r3, r3
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d103      	bne.n	8002290 <vQueueWaitForMessageRestricted+0x40>
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002290:	f001 fed2 	bl	8004038 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3324      	adds	r3, #36	; 0x24
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fdeb 	bl	8002e80 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff50 	bl	8002150 <prvUnlockQueue>
    }
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af04      	add	r7, sp, #16
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 ff5b 	bl	8004188 <pvPortMalloc>
 80022d2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d013      	beq.n	8002302 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022da:	2050      	movs	r0, #80	; 0x50
 80022dc:	f001 ff54 	bl	8004188 <pvPortMalloc>
 80022e0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022e8:	2250      	movs	r2, #80	; 0x50
 80022ea:	2100      	movs	r1, #0
 80022ec:	69f8      	ldr	r0, [r7, #28]
 80022ee:	f002 f949 	bl	8004584 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e005      	b.n	8002306 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f001 fffe 	bl	80042fc <vPortFree>
 8002300:	e001      	b.n	8002306 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800230c:	88fa      	ldrh	r2, [r7, #6]
 800230e:	2300      	movs	r3, #0
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f80e 	bl	8002344 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002328:	69f8      	ldr	r0, [r7, #28]
 800232a:	f000 f891 	bl	8002450 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	e002      	b.n	800233a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800233a:	69bb      	ldr	r3, [r7, #24]
    }
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800235c:	3b01      	subs	r3, #1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f023 0307 	bic.w	r3, r3, #7
 800236a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <prvInitialiseNewTask+0x48>
        __asm volatile
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	617b      	str	r3, [r7, #20]
    }
 8002388:	bf00      	nop
 800238a:	e7fe      	b.n	800238a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01e      	beq.n	80023d0 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e012      	b.n	80023be <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	7819      	ldrb	r1, [r3, #0]
 80023a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	3334      	adds	r3, #52	; 0x34
 80023a8:	460a      	mov	r2, r1
 80023aa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	d9e9      	bls.n	8002398 <prvInitialiseNewTask+0x54>
 80023c4:	e000      	b.n	80023c8 <prvInitialiseNewTask+0x84>
            {
                break;
 80023c6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d90a      	bls.n	80023ec <prvInitialiseNewTask+0xa8>
        __asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	613b      	str	r3, [r7, #16]
    }
 80023e8:	bf00      	nop
 80023ea:	e7fe      	b.n	80023ea <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d901      	bls.n	80023f6 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023f2:	2304      	movs	r3, #4
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	3304      	adds	r3, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9b0 	bl	800176c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	3318      	adds	r3, #24
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f9ab 	bl	800176c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	f1c3 0205 	rsb	r2, r3, #5
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	69b8      	ldr	r0, [r7, #24]
 8002432:	f001 fc9f 	bl	8003d74 <pxPortInitialiseStack>
 8002436:	4602      	mov	r2, r0
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002446:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002458:	f001 fdbe 	bl	8003fd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800245c:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <prvAddNewTaskToReadyList+0x108>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <prvAddNewTaskToReadyList+0x108>)
 8002464:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <prvAddNewTaskToReadyList+0x10c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800246e:	4a3b      	ldr	r2, [pc, #236]	; (800255c <prvAddNewTaskToReadyList+0x10c>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002474:	4b38      	ldr	r3, [pc, #224]	; (8002558 <prvAddNewTaskToReadyList+0x108>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d110      	bne.n	800249e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800247c:	f000 febc 	bl	80031f8 <prvInitialiseTaskLists>
 8002480:	e00d      	b.n	800249e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002482:	4b37      	ldr	r3, [pc, #220]	; (8002560 <prvAddNewTaskToReadyList+0x110>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800248a:	4b34      	ldr	r3, [pc, #208]	; (800255c <prvAddNewTaskToReadyList+0x10c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	429a      	cmp	r2, r3
 8002496:	d802      	bhi.n	800249e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002498:	4a30      	ldr	r2, [pc, #192]	; (800255c <prvAddNewTaskToReadyList+0x10c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <prvAddNewTaskToReadyList+0x114>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <prvAddNewTaskToReadyList+0x114>)
 80024a6:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <prvAddNewTaskToReadyList+0x118>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <prvAddNewTaskToReadyList+0x118>)
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024be:	492b      	ldr	r1, [pc, #172]	; (800256c <prvAddNewTaskToReadyList+0x11c>)
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3304      	adds	r3, #4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	3204      	adds	r2, #4
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1d1a      	adds	r2, r3, #4
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <prvAddNewTaskToReadyList+0x11c>)
 80024fe:	441a      	add	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	4918      	ldr	r1, [pc, #96]	; (800256c <prvAddNewTaskToReadyList+0x11c>)
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	4814      	ldr	r0, [pc, #80]	; (800256c <prvAddNewTaskToReadyList+0x11c>)
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4403      	add	r3, r0
 8002524:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002526:	f001 fd87 	bl	8004038 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <prvAddNewTaskToReadyList+0x110>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <prvAddNewTaskToReadyList+0x10c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <prvAddNewTaskToReadyList+0x120>)
 8002542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000011c 	.word	0x2000011c
 800255c:	20000044 	.word	0x20000044
 8002560:	20000128 	.word	0x20000128
 8002564:	20000138 	.word	0x20000138
 8002568:	20000124 	.word	0x20000124
 800256c:	20000048 	.word	0x20000048
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xTaskDelayUntil+0x2a>
        __asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	617b      	str	r3, [r7, #20]
    }
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xTaskDelayUntil+0x46>
        __asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	613b      	str	r3, [r7, #16]
    }
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80025ba:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <xTaskDelayUntil+0xf0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <xTaskDelayUntil+0x64>
        __asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	60fb      	str	r3, [r7, #12]
    }
 80025d4:	bf00      	nop
 80025d6:	e7fe      	b.n	80025d6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80025d8:	f000 f9a2 	bl	8002920 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <xTaskDelayUntil+0xf4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d20b      	bcs.n	800260e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d211      	bcs.n	8002624 <xTaskDelayUntil+0xb0>
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	429a      	cmp	r2, r3
 8002606:	d90d      	bls.n	8002624 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002608:	2301      	movs	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e00a      	b.n	8002624 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	429a      	cmp	r2, r3
 8002616:	d303      	bcc.n	8002620 <xTaskDelayUntil+0xac>
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	429a      	cmp	r2, r3
 800261e:	d901      	bls.n	8002624 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002620:	2301      	movs	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f8a3 	bl	8003784 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800263e:	f000 f97d 	bl	800293c <xTaskResumeAll>
 8002642:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <xTaskDelayUntil+0xf8>)
 800264c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800265c:	4618      	mov	r0, r3
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000144 	.word	0x20000144
 8002668:	20000120 	.word	0x20000120
 800266c:	e000ed04 	.word	0xe000ed04

08002670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <vTaskDelay+0x60>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <vTaskDelay+0x30>
        __asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	60bb      	str	r3, [r7, #8]
    }
 800269c:	bf00      	nop
 800269e:	e7fe      	b.n	800269e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80026a0:	f000 f93e 	bl	8002920 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026a4:	2100      	movs	r1, #0
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f001 f86c 	bl	8003784 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80026ac:	f000 f946 	bl	800293c <xTaskResumeAll>
 80026b0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <vTaskDelay+0x64>)
 80026ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000144 	.word	0x20000144
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d90a      	bls.n	8002702 <vTaskPrioritySet+0x2a>
        __asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	60bb      	str	r3, [r7, #8]
    }
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d901      	bls.n	800270c <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002708:	2304      	movs	r3, #4
 800270a:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800270c:	f001 fc64 	bl	8003fd8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <vTaskPrioritySet+0x44>
 8002716:	4b55      	ldr	r3, [pc, #340]	; (800286c <vTaskPrioritySet+0x194>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	e000      	b.n	800271e <vTaskPrioritySet+0x46>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	f000 8098 	beq.w	8002860 <vTaskPrioritySet+0x188>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	d90d      	bls.n	8002754 <vTaskPrioritySet+0x7c>
                {
                    if( pxTCB != pxCurrentTCB )
 8002738:	4b4c      	ldr	r3, [pc, #304]	; (800286c <vTaskPrioritySet+0x194>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	429a      	cmp	r2, r3
 8002740:	d00f      	beq.n	8002762 <vTaskPrioritySet+0x8a>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <vTaskPrioritySet+0x194>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d309      	bcc.n	8002762 <vTaskPrioritySet+0x8a>
                        {
                            xYieldRequired = pdTRUE;
 800274e:	2301      	movs	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e006      	b.n	8002762 <vTaskPrioritySet+0x8a>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002754:	4b45      	ldr	r3, [pc, #276]	; (800286c <vTaskPrioritySet+0x194>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	429a      	cmp	r2, r3
 800275c:	d101      	bne.n	8002762 <vTaskPrioritySet+0x8a>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d102      	bne.n	800277a <vTaskPrioritySet+0xa2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	db04      	blt.n	8002792 <vTaskPrioritySet+0xba>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f1c3 0205 	rsb	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6959      	ldr	r1, [r3, #20]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4a33      	ldr	r2, [pc, #204]	; (8002870 <vTaskPrioritySet+0x198>)
 80027a2:	4413      	add	r3, r2
 80027a4:	4299      	cmp	r1, r3
 80027a6:	d150      	bne.n	800284a <vTaskPrioritySet+0x172>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f823 	bl	80017f8 <uxListRemove>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <vTaskPrioritySet+0xf4>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80027b8:	2201      	movs	r2, #1
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43da      	mvns	r2, r3
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <vTaskPrioritySet+0x19c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4013      	ands	r3, r2
 80027c8:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <vTaskPrioritySet+0x19c>)
 80027ca:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	2201      	movs	r2, #1
 80027d2:	409a      	lsls	r2, r3
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <vTaskPrioritySet+0x19c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	4a26      	ldr	r2, [pc, #152]	; (8002874 <vTaskPrioritySet+0x19c>)
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	4923      	ldr	r1, [pc, #140]	; (8002870 <vTaskPrioritySet+0x198>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3304      	adds	r3, #4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	3204      	adds	r2, #4
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1d1a      	adds	r2, r3, #4
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4a13      	ldr	r2, [pc, #76]	; (8002870 <vTaskPrioritySet+0x198>)
 8002822:	441a      	add	r2, r3
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	615a      	str	r2, [r3, #20]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	4910      	ldr	r1, [pc, #64]	; (8002870 <vTaskPrioritySet+0x198>)
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <vTaskPrioritySet+0x198>)
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4403      	add	r3, r0
 8002848:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <vTaskPrioritySet+0x188>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <vTaskPrioritySet+0x1a0>)
 8002852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002860:	f001 fbea 	bl	8004038 <vPortExitCritical>
    }
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000044 	.word	0x20000044
 8002870:	20000048 	.word	0x20000048
 8002874:	20000124 	.word	0x20000124
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <vTaskStartScheduler+0x88>)
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2300      	movs	r3, #0
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	2246      	movs	r2, #70	; 0x46
 800288e:	491e      	ldr	r1, [pc, #120]	; (8002908 <vTaskStartScheduler+0x8c>)
 8002890:	481e      	ldr	r0, [pc, #120]	; (800290c <vTaskStartScheduler+0x90>)
 8002892:	f7ff fd11 	bl	80022b8 <xTaskCreate>
 8002896:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d102      	bne.n	80028a4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800289e:	f000 fff1 	bl	8003884 <xTimerCreateTimerTask>
 80028a2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d116      	bne.n	80028d8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	60bb      	str	r3, [r7, #8]
    }
 80028bc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <vTaskStartScheduler+0x94>)
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <vTaskStartScheduler+0x98>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <vTaskStartScheduler+0x9c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80028d2:	f001 fadf 	bl	8003e94 <xPortStartScheduler>
 80028d6:	e00e      	b.n	80028f6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d10a      	bne.n	80028f6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	607b      	str	r3, [r7, #4]
    }
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <vTaskStartScheduler+0xa0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000140 	.word	0x20000140
 8002908:	080045cc 	.word	0x080045cc
 800290c:	080031c9 	.word	0x080031c9
 8002910:	2000013c 	.word	0x2000013c
 8002914:	20000128 	.word	0x20000128
 8002918:	20000120 	.word	0x20000120
 800291c:	2000000c 	.word	0x2000000c

08002920 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <vTaskSuspendAll+0x18>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <vTaskSuspendAll+0x18>)
 800292c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	20000144 	.word	0x20000144

0800293c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800294a:	4b71      	ldr	r3, [pc, #452]	; (8002b10 <xTaskResumeAll+0x1d4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <xTaskResumeAll+0x2c>
        __asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	607b      	str	r3, [r7, #4]
    }
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002968:	f001 fb36 	bl	8003fd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <xTaskResumeAll+0x1d4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	4a67      	ldr	r2, [pc, #412]	; (8002b10 <xTaskResumeAll+0x1d4>)
 8002974:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002976:	4b66      	ldr	r3, [pc, #408]	; (8002b10 <xTaskResumeAll+0x1d4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80c0 	bne.w	8002b00 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002980:	4b64      	ldr	r3, [pc, #400]	; (8002b14 <xTaskResumeAll+0x1d8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80bb 	beq.w	8002b00 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800298a:	e08a      	b.n	8002aa2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <xTaskResumeAll+0x1dc>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	6a12      	ldr	r2, [r2, #32]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	69d2      	ldr	r2, [r2, #28]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3318      	adds	r3, #24
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d103      	bne.n	80029c2 <xTaskResumeAll+0x86>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2200      	movs	r2, #0
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1e5a      	subs	r2, r3, #1
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	68d2      	ldr	r2, [r2, #12]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	6892      	ldr	r2, [r2, #8]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3304      	adds	r3, #4
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d103      	bne.n	8002a00 <xTaskResumeAll+0xc4>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1e5a      	subs	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <xTaskResumeAll+0x1e0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <xTaskResumeAll+0x1e0>)
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	493e      	ldr	r1, [pc, #248]	; (8002b20 <xTaskResumeAll+0x1e4>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	3204      	adds	r2, #4
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <xTaskResumeAll+0x1e4>)
 8002a66:	441a      	add	r2, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	492b      	ldr	r1, [pc, #172]	; (8002b20 <xTaskResumeAll+0x1e4>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	4827      	ldr	r0, [pc, #156]	; (8002b20 <xTaskResumeAll+0x1e4>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4403      	add	r3, r0
 8002a8c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <xTaskResumeAll+0x1e8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <xTaskResumeAll+0x1ec>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <xTaskResumeAll+0x1dc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f47f af70 	bne.w	800298c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ab2:	f000 fc1f 	bl	80032f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <xTaskResumeAll+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ac2:	f000 f847 	bl	8002b54 <xTaskIncrementTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <xTaskResumeAll+0x1ec>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f1      	bne.n	8002ac2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <xTaskResumeAll+0x1f0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <xTaskResumeAll+0x1ec>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <xTaskResumeAll+0x1f4>)
 8002af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b00:	f001 fa9a 	bl	8004038 <vPortExitCritical>

    return xAlreadyYielded;
 8002b04:	69bb      	ldr	r3, [r7, #24]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000144 	.word	0x20000144
 8002b14:	2000011c 	.word	0x2000011c
 8002b18:	200000dc 	.word	0x200000dc
 8002b1c:	20000124 	.word	0x20000124
 8002b20:	20000048 	.word	0x20000048
 8002b24:	20000044 	.word	0x20000044
 8002b28:	20000130 	.word	0x20000130
 8002b2c:	2000012c 	.word	0x2000012c
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <xTaskGetTickCount+0x1c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000120 	.word	0x20000120

08002b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b5e:	4b7d      	ldr	r3, [pc, #500]	; (8002d54 <xTaskIncrementTick+0x200>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 80ec 	bne.w	8002d40 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b68:	4b7b      	ldr	r3, [pc, #492]	; (8002d58 <xTaskIncrementTick+0x204>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b70:	4a79      	ldr	r2, [pc, #484]	; (8002d58 <xTaskIncrementTick+0x204>)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d120      	bne.n	8002bbe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b7c:	4b77      	ldr	r3, [pc, #476]	; (8002d5c <xTaskIncrementTick+0x208>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <xTaskIncrementTick+0x48>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	607b      	str	r3, [r7, #4]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xTaskIncrementTick+0x46>
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <xTaskIncrementTick+0x208>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <xTaskIncrementTick+0x20c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6d      	ldr	r2, [pc, #436]	; (8002d5c <xTaskIncrementTick+0x208>)
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4a6d      	ldr	r2, [pc, #436]	; (8002d60 <xTaskIncrementTick+0x20c>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <xTaskIncrementTick+0x210>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a6b      	ldr	r2, [pc, #428]	; (8002d64 <xTaskIncrementTick+0x210>)
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	f000 fb9b 	bl	80032f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bbe:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <xTaskIncrementTick+0x214>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a3a      	ldr	r2, [r7, #32]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f0c0 80a6 	bcc.w	8002d16 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bca:	4b64      	ldr	r3, [pc, #400]	; (8002d5c <xTaskIncrementTick+0x208>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd4:	4b64      	ldr	r3, [pc, #400]	; (8002d68 <xTaskIncrementTick+0x214>)
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	601a      	str	r2, [r3, #0]
                    break;
 8002bdc:	e09b      	b.n	8002d16 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bde:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <xTaskIncrementTick+0x208>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bee:	6a3a      	ldr	r2, [r7, #32]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d203      	bcs.n	8002bfe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bf6:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <xTaskIncrementTick+0x214>)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002bfc:	e08b      	b.n	8002d16 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	68d2      	ldr	r2, [r2, #12]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d103      	bne.n	8002c2c <xTaskIncrementTick+0xd8>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	615a      	str	r2, [r3, #20]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1e5a      	subs	r2, r3, #1
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01e      	beq.n	8002c82 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	6a12      	ldr	r2, [r2, #32]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	69d2      	ldr	r2, [r2, #28]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	3318      	adds	r3, #24
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d103      	bne.n	8002c72 <xTaskIncrementTick+0x11e>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6a1a      	ldr	r2, [r3, #32]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2200      	movs	r2, #0
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	2201      	movs	r2, #1
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <xTaskIncrementTick+0x218>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	4a36      	ldr	r2, [pc, #216]	; (8002d6c <xTaskIncrementTick+0x218>)
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	4935      	ldr	r1, [pc, #212]	; (8002d70 <xTaskIncrementTick+0x21c>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	3204      	adds	r2, #4
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1d1a      	adds	r2, r3, #4
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <xTaskIncrementTick+0x21c>)
 8002cd8:	441a      	add	r2, r3
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	615a      	str	r2, [r3, #20]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	4923      	ldr	r1, [pc, #140]	; (8002d70 <xTaskIncrementTick+0x21c>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c59      	adds	r1, r3, #1
 8002cf2:	481f      	ldr	r0, [pc, #124]	; (8002d70 <xTaskIncrementTick+0x21c>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4403      	add	r3, r0
 8002cfe:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <xTaskIncrementTick+0x220>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	f67f af5d 	bls.w	8002bca <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d14:	e759      	b.n	8002bca <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <xTaskIncrementTick+0x220>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	4914      	ldr	r1, [pc, #80]	; (8002d70 <xTaskIncrementTick+0x21c>)
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d901      	bls.n	8002d32 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <xTaskIncrementTick+0x224>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	e004      	b.n	8002d4a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <xTaskIncrementTick+0x228>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3301      	adds	r3, #1
 8002d46:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <xTaskIncrementTick+0x228>)
 8002d48:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000144 	.word	0x20000144
 8002d58:	20000120 	.word	0x20000120
 8002d5c:	200000d4 	.word	0x200000d4
 8002d60:	200000d8 	.word	0x200000d8
 8002d64:	20000134 	.word	0x20000134
 8002d68:	2000013c 	.word	0x2000013c
 8002d6c:	20000124 	.word	0x20000124
 8002d70:	20000048 	.word	0x20000048
 8002d74:	20000044 	.word	0x20000044
 8002d78:	20000130 	.word	0x20000130
 8002d7c:	2000012c 	.word	0x2000012c

08002d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <vTaskSwitchContext+0xa4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <vTaskSwitchContext+0xa8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002d94:	e03f      	b.n	8002e16 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <vTaskSwitchContext+0xa8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <vTaskSwitchContext+0xac>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	f1c3 031f 	rsb	r3, r3, #31
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	491f      	ldr	r1, [pc, #124]	; (8002e30 <vTaskSwitchContext+0xb0>)
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	607b      	str	r3, [r7, #4]
    }
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <vTaskSwitchContext+0x5a>
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <vTaskSwitchContext+0xb0>)
 8002de8:	4413      	add	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d104      	bne.n	8002e0c <vTaskSwitchContext+0x8c>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <vTaskSwitchContext+0xb4>)
 8002e14:	6013      	str	r3, [r2, #0]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000144 	.word	0x20000144
 8002e28:	20000130 	.word	0x20000130
 8002e2c:	20000124 	.word	0x20000124
 8002e30:	20000048 	.word	0x20000048
 8002e34:	20000044 	.word	0x20000044

08002e38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	60fb      	str	r3, [r7, #12]
    }
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <vTaskPlaceOnEventList+0x44>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3318      	adds	r3, #24
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fc8d 	bl	8001786 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f000 fc88 	bl	8003784 <prvAddCurrentTaskToDelayedList>
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000044 	.word	0x20000044

08002e80 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	613b      	str	r3, [r7, #16]
    }
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <vTaskPlaceOnEventListRestricted+0x88>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	61da      	str	r2, [r3, #28]
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <vTaskPlaceOnEventListRestricted+0x88>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6892      	ldr	r2, [r2, #8]
 8002ebe:	621a      	str	r2, [r3, #32]
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	3218      	adds	r2, #24
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f103 0218 	add.w	r2, r3, #24
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <vTaskPlaceOnEventListRestricted+0x88>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68b8      	ldr	r0, [r7, #8]
 8002efa:	f000 fc43 	bl	8003784 <prvAddCurrentTaskToDelayedList>
    }
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000044 	.word	0x20000044

08002f0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b08b      	sub	sp, #44	; 0x2c
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	60fb      	str	r3, [r7, #12]
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	6a12      	ldr	r2, [r2, #32]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	69d2      	ldr	r2, [r2, #28]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	3318      	adds	r3, #24
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d103      	bne.n	8002f66 <xTaskRemoveFromEventList+0x5a>
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <xTaskRemoveFromEventList+0x194>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d15e      	bne.n	800303c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	68d2      	ldr	r2, [r2, #12]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d103      	bne.n	8002fac <xTaskRemoveFromEventList+0xa0>
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	615a      	str	r2, [r3, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <xTaskRemoveFromEventList+0x198>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <xTaskRemoveFromEventList+0x198>)
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd2:	4935      	ldr	r1, [pc, #212]	; (80030a8 <xTaskRemoveFromEventList+0x19c>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3304      	adds	r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	3204      	adds	r2, #4
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <xTaskRemoveFromEventList+0x19c>)
 8003012:	441a      	add	r2, r3
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	615a      	str	r2, [r3, #20]
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	4922      	ldr	r1, [pc, #136]	; (80030a8 <xTaskRemoveFromEventList+0x19c>)
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	481e      	ldr	r0, [pc, #120]	; (80030a8 <xTaskRemoveFromEventList+0x19c>)
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4403      	add	r3, r0
 8003038:	6019      	str	r1, [r3, #0]
 800303a:	e01b      	b.n	8003074 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <xTaskRemoveFromEventList+0x1a0>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	61da      	str	r2, [r3, #28]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	621a      	str	r2, [r3, #32]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	3218      	adds	r2, #24
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f103 0218 	add.w	r2, r3, #24
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <xTaskRemoveFromEventList+0x1a0>)
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <xTaskRemoveFromEventList+0x1a0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <xTaskRemoveFromEventList+0x1a0>)
 8003072:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <xTaskRemoveFromEventList+0x1a4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	429a      	cmp	r2, r3
 8003080:	d905      	bls.n	800308e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <xTaskRemoveFromEventList+0x1a8>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e001      	b.n	8003092 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003094:	4618      	mov	r0, r3
 8003096:	372c      	adds	r7, #44	; 0x2c
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20000144 	.word	0x20000144
 80030a4:	20000124 	.word	0x20000124
 80030a8:	20000048 	.word	0x20000048
 80030ac:	200000dc 	.word	0x200000dc
 80030b0:	20000044 	.word	0x20000044
 80030b4:	20000130 	.word	0x20000130

080030b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <vTaskInternalSetTimeOutState+0x24>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <vTaskInternalSetTimeOutState+0x28>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	605a      	str	r2, [r3, #4]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000134 	.word	0x20000134
 80030e0:	20000120 	.word	0x20000120

080030e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	613b      	str	r3, [r7, #16]
    }
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60fb      	str	r3, [r7, #12]
    }
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003126:	f000 ff57 	bl	8003fd8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800312a:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <xTaskCheckForTimeOut+0xc4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d102      	bne.n	800314a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e026      	b.n	8003198 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <xTaskCheckForTimeOut+0xc8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d00a      	beq.n	800316c <xTaskCheckForTimeOut+0x88>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d305      	bcc.n	800316c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e015      	b.n	8003198 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d20b      	bcs.n	800318e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad2      	subs	r2, r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ff98 	bl	80030b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e004      	b.n	8003198 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003198:	f000 ff4e 	bl	8004038 <vPortExitCritical>

    return xReturn;
 800319c:	69fb      	ldr	r3, [r7, #28]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000120 	.word	0x20000120
 80031ac:	20000134 	.word	0x20000134

080031b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <vTaskMissedYield+0x14>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	20000130 	.word	0x20000130

080031c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80031d0:	f000 f852 	bl	8003278 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <prvIdleTask+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d9f9      	bls.n	80031d0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <prvIdleTask+0x2c>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031ec:	e7f0      	b.n	80031d0 <prvIdleTask+0x8>
 80031ee:	bf00      	nop
 80031f0:	20000048 	.word	0x20000048
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	e00c      	b.n	800321e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <prvInitialiseTaskLists+0x60>)
 8003210:	4413      	add	r3, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fa8a 	bl	800172c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d9ef      	bls.n	8003204 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <prvInitialiseTaskLists+0x64>)
 8003226:	f7fe fa81 	bl	800172c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800322a:	480d      	ldr	r0, [pc, #52]	; (8003260 <prvInitialiseTaskLists+0x68>)
 800322c:	f7fe fa7e 	bl	800172c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <prvInitialiseTaskLists+0x6c>)
 8003232:	f7fe fa7b 	bl	800172c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003236:	480c      	ldr	r0, [pc, #48]	; (8003268 <prvInitialiseTaskLists+0x70>)
 8003238:	f7fe fa78 	bl	800172c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800323c:	480b      	ldr	r0, [pc, #44]	; (800326c <prvInitialiseTaskLists+0x74>)
 800323e:	f7fe fa75 	bl	800172c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <prvInitialiseTaskLists+0x78>)
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <prvInitialiseTaskLists+0x64>)
 8003246:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <prvInitialiseTaskLists+0x7c>)
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <prvInitialiseTaskLists+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000048 	.word	0x20000048
 800325c:	200000ac 	.word	0x200000ac
 8003260:	200000c0 	.word	0x200000c0
 8003264:	200000dc 	.word	0x200000dc
 8003268:	200000f0 	.word	0x200000f0
 800326c:	20000108 	.word	0x20000108
 8003270:	200000d4 	.word	0x200000d4
 8003274:	200000d8 	.word	0x200000d8

08003278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800327e:	e019      	b.n	80032b4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003280:	f000 feaa 	bl	8003fd8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <prvCheckTasksWaitingTermination+0x50>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fab1 	bl	80017f8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <prvCheckTasksWaitingTermination+0x54>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <prvCheckTasksWaitingTermination+0x54>)
 800329e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80032aa:	f000 fec5 	bl	8004038 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f810 	bl	80032d4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e1      	bne.n	8003280 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200000f0 	.word	0x200000f0
 80032cc:	2000011c 	.word	0x2000011c
 80032d0:	20000104 	.word	0x20000104

080032d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f80b 	bl	80042fc <vPortFree>
            vPortFree( pxTCB );
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 f808 	bl	80042fc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <prvResetNextTaskUnblockTime+0x30>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <prvResetNextTaskUnblockTime+0x34>)
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800330a:	e005      	b.n	8003318 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <prvResetNextTaskUnblockTime+0x30>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <prvResetNextTaskUnblockTime+0x34>)
 8003316:	6013      	str	r3, [r2, #0]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	200000d4 	.word	0x200000d4
 8003328:	2000013c 	.word	0x2000013c

0800332c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <xTaskGetSchedulerState+0x34>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800333a:	2301      	movs	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	e008      	b.n	8003352 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <xTaskGetSchedulerState+0x38>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003348:	2302      	movs	r3, #2
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	e001      	b.n	8003352 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003352:	687b      	ldr	r3, [r7, #4]
    }
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000128 	.word	0x20000128
 8003364:	20000144 	.word	0x20000144

08003368 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8087 	beq.w	800348e <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <xTaskPriorityInherit+0x130>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	429a      	cmp	r2, r3
 800338c:	d276      	bcs.n	800347c <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db06      	blt.n	80033a4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <xTaskPriorityInherit+0x130>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f1c3 0205 	rsb	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6959      	ldr	r1, [r3, #20]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a39      	ldr	r2, [pc, #228]	; (800349c <xTaskPriorityInherit+0x134>)
 80033b6:	4413      	add	r3, r2
 80033b8:	4299      	cmp	r1, r3
 80033ba:	d157      	bne.n	800346c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fa19 	bl	80017f8 <uxListRemove>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2201      	movs	r2, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <xTaskPriorityInherit+0x138>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4013      	ands	r3, r2
 80033de:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <xTaskPriorityInherit+0x138>)
 80033e0:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <xTaskPriorityInherit+0x130>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <xTaskPriorityInherit+0x138>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <xTaskPriorityInherit+0x138>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4926      	ldr	r1, [pc, #152]	; (800349c <xTaskPriorityInherit+0x134>)
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3304      	adds	r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	3204      	adds	r2, #4
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4a16      	ldr	r2, [pc, #88]	; (800349c <xTaskPriorityInherit+0x134>)
 8003442:	441a      	add	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	615a      	str	r2, [r3, #20]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4913      	ldr	r1, [pc, #76]	; (800349c <xTaskPriorityInherit+0x134>)
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	480f      	ldr	r0, [pc, #60]	; (800349c <xTaskPriorityInherit+0x134>)
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4403      	add	r3, r0
 8003468:	6019      	str	r1, [r3, #0]
 800346a:	e004      	b.n	8003476 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <xTaskPriorityInherit+0x130>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003476:	2301      	movs	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e008      	b.n	800348e <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <xTaskPriorityInherit+0x130>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	429a      	cmp	r2, r3
 8003488:	d201      	bcs.n	800348e <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800348e:	697b      	ldr	r3, [r7, #20]
    }
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000044 	.word	0x20000044
 800349c:	20000048 	.word	0x20000048
 80034a0:	20000124 	.word	0x20000124

080034a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 808c 	beq.w	80035d4 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <xTaskPriorityDisinherit+0x13c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d00a      	beq.n	80034dc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	613b      	str	r3, [r7, #16]
    }
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	60fb      	str	r3, [r7, #12]
    }
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	429a      	cmp	r2, r3
 800350e:	d061      	beq.n	80035d4 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	2b00      	cmp	r3, #0
 8003516:	d15d      	bne.n	80035d4 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	3304      	adds	r3, #4
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe f96b 	bl	80017f8 <uxListRemove>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <xTaskPriorityDisinherit+0x140>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4013      	ands	r3, r2
 800353a:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <xTaskPriorityDisinherit+0x140>)
 800353c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	f1c3 0205 	rsb	r2, r3, #5
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	2201      	movs	r2, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <xTaskPriorityDisinherit+0x140>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <xTaskPriorityDisinherit+0x140>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	491f      	ldr	r1, [pc, #124]	; (80035e8 <xTaskPriorityDisinherit+0x144>)
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3304      	adds	r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	3204      	adds	r2, #4
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <xTaskPriorityDisinherit+0x144>)
 80035a8:	441a      	add	r2, r3
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	615a      	str	r2, [r3, #20]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	490d      	ldr	r1, [pc, #52]	; (80035e8 <xTaskPriorityDisinherit+0x144>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	1c59      	adds	r1, r3, #1
 80035c2:	4809      	ldr	r0, [pc, #36]	; (80035e8 <xTaskPriorityDisinherit+0x144>)
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4403      	add	r3, r0
 80035ce:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80035d4:	69fb      	ldr	r3, [r7, #28]
    }
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000044 	.word	0x20000044
 80035e4:	20000124 	.word	0x20000124
 80035e8:	20000048 	.word	0x20000048

080035ec <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80a1 	beq.w	8003748 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	613b      	str	r3, [r7, #16]
    }
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d902      	bls.n	8003634 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e002      	b.n	800363a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	429a      	cmp	r2, r3
 8003642:	f000 8081 	beq.w	8003748 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d17b      	bne.n	8003748 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	429a      	cmp	r2, r3
 8003658:	d10a      	bne.n	8003670 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60fb      	str	r3, [r7, #12]
    }
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db04      	blt.n	800368e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f1c3 0205 	rsb	r2, r3, #5
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	6959      	ldr	r1, [r3, #20]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800369e:	4413      	add	r3, r2
 80036a0:	4299      	cmp	r1, r3
 80036a2:	d151      	bne.n	8003748 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe f8a5 	bl	80017f8 <uxListRemove>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	2201      	movs	r2, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43da      	mvns	r2, r3
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4013      	ands	r3, r2
 80036c6:	4a24      	ldr	r2, [pc, #144]	; (8003758 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80036c8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	2201      	movs	r2, #1
 80036d0:	409a      	lsls	r2, r3
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	491c      	ldr	r1, [pc, #112]	; (8003754 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	3204      	adds	r2, #4
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003720:	441a      	add	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	1c59      	adds	r1, r3, #1
 800373a:	4806      	ldr	r0, [pc, #24]	; (8003754 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000044 	.word	0x20000044
 8003754:	20000048 	.word	0x20000048
 8003758:	20000124 	.word	0x20000124

0800375c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <pvTaskIncrementMutexHeldCount+0x24>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <pvTaskIncrementMutexHeldCount+0x24>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376e:	3201      	adds	r2, #1
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <pvTaskIncrementMutexHeldCount+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
    }
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20000044 	.word	0x20000044

08003784 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800378e:	4b36      	ldr	r3, [pc, #216]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003794:	4b35      	ldr	r3, [pc, #212]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe f82c 	bl	80017f8 <uxListRemove>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	2201      	movs	r2, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <prvAddCurrentTaskToDelayedList+0xec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4013      	ands	r3, r2
 80037ba:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <prvAddCurrentTaskToDelayedList+0xec>)
 80037bc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d124      	bne.n	8003810 <prvAddCurrentTaskToDelayedList+0x8c>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	3204      	adds	r2, #4
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1d1a      	adds	r2, r3, #4
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003800:	615a      	str	r2, [r3, #20]
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <prvAddCurrentTaskToDelayedList+0xf0>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800380e:	e026      	b.n	800385e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	d209      	bcs.n	800383c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <prvAddCurrentTaskToDelayedList+0xf4>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fd ffa6 	bl	8001786 <vListInsert>
}
 800383a:	e010      	b.n	800385e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <prvAddCurrentTaskToDelayedList+0xf8>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fd ff9c 	bl	8001786 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d202      	bcs.n	800385e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <prvAddCurrentTaskToDelayedList+0xfc>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6013      	str	r3, [r2, #0]
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000120 	.word	0x20000120
 800386c:	20000044 	.word	0x20000044
 8003870:	20000124 	.word	0x20000124
 8003874:	20000108 	.word	0x20000108
 8003878:	200000d8 	.word	0x200000d8
 800387c:	200000d4 	.word	0x200000d4
 8003880:	2000013c 	.word	0x2000013c

08003884 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800388e:	f000 fa47 	bl	8003d20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <xTimerCreateTimerTask+0x54>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <xTimerCreateTimerTask+0x58>)
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	2303      	movs	r3, #3
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2246      	movs	r2, #70	; 0x46
 80038a6:	490e      	ldr	r1, [pc, #56]	; (80038e0 <xTimerCreateTimerTask+0x5c>)
 80038a8:	480e      	ldr	r0, [pc, #56]	; (80038e4 <xTimerCreateTimerTask+0x60>)
 80038aa:	f7fe fd05 	bl	80022b8 <xTaskCreate>
 80038ae:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xTimerCreateTimerTask+0x48>
        __asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	603b      	str	r3, [r7, #0]
    }
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xTimerCreateTimerTask+0x46>
        return xReturn;
 80038cc:	687b      	ldr	r3, [r7, #4]
    }
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000178 	.word	0x20000178
 80038dc:	2000017c 	.word	0x2000017c
 80038e0:	080045d4 	.word	0x080045d4
 80038e4:	0800398d 	.word	0x0800398d

080038e8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038f4:	e008      	b.n	8003908 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4413      	add	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	18d1      	adds	r1, r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f8dd 	bl	8003ad4 <prvInsertTimerInActiveList>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ea      	bne.n	80038f6 <prvReloadTimer+0xe>
        }
    }
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <prvProcessExpiredTimer+0x5c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3304      	adds	r3, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd ff57 	bl	80017f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff ffc3 	bl	80038e8 <prvReloadTimer>
 8003962:	e008      	b.n	8003976 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	4798      	blx	r3
    }
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000170 	.word	0x20000170

0800398c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003994:	f107 0308 	add.w	r3, r7, #8
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f857 	bl	8003a4c <prvGetNextExpireTime>
 800399e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f803 	bl	80039b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039aa:	f000 f8d5 	bl	8003b58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ae:	e7f1      	b.n	8003994 <prvTimerTask+0x8>

080039b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039ba:	f7fe ffb1 	bl	8002920 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f866 	bl	8003a94 <prvSampleTimeNow>
 80039c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d130      	bne.n	8003a32 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <prvProcessTimerOrBlockTask+0x3c>
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d806      	bhi.n	80039ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039de:	f7fe ffad 	bl	800293c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ffa1 	bl	800392c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039ea:	e024      	b.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <prvProcessTimerOrBlockTask+0x90>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <prvProcessTimerOrBlockTask+0x94>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fe fc1d 	bl	8002250 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a16:	f7fe ff91 	bl	800293c <xTaskResumeAll>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <prvProcessTimerOrBlockTask+0x98>)
 8003a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
    }
 8003a30:	e001      	b.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a32:	f7fe ff83 	bl	800293c <xTaskResumeAll>
    }
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000174 	.word	0x20000174
 8003a44:	20000178 	.word	0x20000178
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <prvGetNextExpireTime+0x44>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2300      	movne	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <prvGetNextExpireTime+0x32>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <prvGetNextExpireTime+0x44>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e001      	b.n	8003a82 <prvGetNextExpireTime+0x36>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a82:	68fb      	ldr	r3, [r7, #12]
    }
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000170 	.word	0x20000170

08003a94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a9c:	f7ff f84a 	bl	8002b34 <xTaskGetTickCount>
 8003aa0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <prvSampleTimeNow+0x3c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d205      	bcs.n	8003ab8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003aac:	f000 f912 	bl	8003cd4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003abe:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <prvSampleTimeNow+0x3c>)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000180 	.word	0x20000180

08003ad4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d812      	bhi.n	8003b20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e01b      	b.n	8003b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <prvInsertTimerInActiveList+0x7c>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fd fe34 	bl	8001786 <vListInsert>
 8003b1e:	e012      	b.n	8003b46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d206      	bcs.n	8003b36 <prvInsertTimerInActiveList+0x62>
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e007      	b.n	8003b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <prvInsertTimerInActiveList+0x80>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7fd fe20 	bl	8001786 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b46:	697b      	ldr	r3, [r7, #20]
    }
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000174 	.word	0x20000174
 8003b54:	20000170 	.word	0x20000170

08003b58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b5e:	e0a6      	b.n	8003cae <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f2c0 80a2 	blt.w	8003cac <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fe3d 	bl	80017f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff87 	bl	8003a94 <prvSampleTimeNow>
 8003b86:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	f200 808e 	bhi.w	8003cae <prvProcessReceivedCommands+0x156>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <prvProcessReceivedCommands+0x40>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bbd 	.word	0x08003bbd
 8003ba0:	08003c25 	.word	0x08003c25
 8003ba4:	08003c39 	.word	0x08003c39
 8003ba8:	08003c83 	.word	0x08003c83
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bbd 	.word	0x08003bbd
 8003bb4:	08003c25 	.word	0x08003c25
 8003bb8:	08003c39 	.word	0x08003c39
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	18d1      	adds	r1, r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	69f8      	ldr	r0, [r7, #28]
 8003bdc:	f7ff ff7a 	bl	8003ad4 <prvInsertTimerInActiveList>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d063      	beq.n	8003cae <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	69f8      	ldr	r0, [r7, #28]
 8003c02:	f7ff fe71 	bl	80038e8 <prvReloadTimer>
 8003c06:	e008      	b.n	8003c1a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	69f8      	ldr	r0, [r7, #28]
 8003c20:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c22:	e044      	b.n	8003cae <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8003c36:	e03a      	b.n	8003cae <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	617b      	str	r3, [r7, #20]
    }
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	18d1      	adds	r1, r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	69f8      	ldr	r0, [r7, #28]
 8003c7c:	f7ff ff2a 	bl	8003ad4 <prvInsertTimerInActiveList>
                        break;
 8003c80:	e015      	b.n	8003cae <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003c90:	69f8      	ldr	r0, [r7, #28]
 8003c92:	f000 fb33 	bl	80042fc <vPortFree>
 8003c96:	e00a      	b.n	8003cae <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003caa:	e000      	b.n	8003cae <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003cac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <prvProcessReceivedCommands+0x178>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f107 0108 	add.w	r1, r7, #8
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd ffc3 	bl	8001c44 <xQueueReceive>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f af4d 	bne.w	8003b60 <prvProcessReceivedCommands+0x8>
        }
    }
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000178 	.word	0x20000178

08003cd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cda:	e009      	b.n	8003cf0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <prvSwitchTimerLists+0x44>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f7ff fe1e 	bl	800392c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <prvSwitchTimerLists+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvSwitchTimerLists+0x44>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <prvSwitchTimerLists+0x48>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <prvSwitchTimerLists+0x44>)
 8003d06:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <prvSwitchTimerLists+0x48>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
    }
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000170 	.word	0x20000170
 8003d1c:	20000174 	.word	0x20000174

08003d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d24:	f000 f958 	bl	8003fd8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <prvCheckForValidListAndQueue+0x40>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d113      	bne.n	8003d58 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d30:	480c      	ldr	r0, [pc, #48]	; (8003d64 <prvCheckForValidListAndQueue+0x44>)
 8003d32:	f7fd fcfb 	bl	800172c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d36:	480c      	ldr	r0, [pc, #48]	; (8003d68 <prvCheckForValidListAndQueue+0x48>)
 8003d38:	f7fd fcf8 	bl	800172c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <prvCheckForValidListAndQueue+0x4c>)
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <prvCheckForValidListAndQueue+0x44>)
 8003d40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <prvCheckForValidListAndQueue+0x50>)
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <prvCheckForValidListAndQueue+0x48>)
 8003d46:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d48:	2200      	movs	r2, #0
 8003d4a:	210c      	movs	r1, #12
 8003d4c:	2005      	movs	r0, #5
 8003d4e:	f7fd fe0d 	bl	800196c <xQueueGenericCreate>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a02      	ldr	r2, [pc, #8]	; (8003d60 <prvCheckForValidListAndQueue+0x40>)
 8003d56:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d58:	f000 f96e 	bl	8004038 <vPortExitCritical>
    }
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000178 	.word	0x20000178
 8003d64:	20000148 	.word	0x20000148
 8003d68:	2000015c 	.word	0x2000015c
 8003d6c:	20000170 	.word	0x20000170
 8003d70:	20000174 	.word	0x20000174

08003d74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3b04      	subs	r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b04      	subs	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f023 0201 	bic.w	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b04      	subs	r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <pxPortInitialiseStack+0x64>)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b14      	subs	r3, #20
 8003dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b04      	subs	r3, #4
 8003dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f06f 0202 	mvn.w	r2, #2
 8003dc2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3b20      	subs	r3, #32
 8003dc8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	08003ddd 	.word	0x08003ddd

08003ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <prvTaskExitError+0x54>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d00a      	beq.n	8003e06 <prvTaskExitError+0x2a>
        __asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
    }
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <prvTaskExitError+0x28>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60bb      	str	r3, [r7, #8]
    }
 8003e18:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e1a:	bf00      	nop
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0fc      	beq.n	8003e1c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	20000010 	.word	0x20000010
	...

08003e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <pxCurrentTCBConst2>)
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	6808      	ldr	r0, [r1, #0]
 8003e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	f380 8809 	msr	PSP, r0
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8811 	msr	BASEPRI, r0
 8003e5a:	4770      	bx	lr
 8003e5c:	f3af 8000 	nop.w

08003e60 <pxCurrentTCBConst2>:
 8003e60:	20000044 	.word	0x20000044
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop

08003e68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e68:	4808      	ldr	r0, [pc, #32]	; (8003e8c <prvPortStartFirstTask+0x24>)
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	6800      	ldr	r0, [r0, #0]
 8003e6e:	f380 8808 	msr	MSP, r0
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8814 	msr	CONTROL, r0
 8003e7a:	b662      	cpsie	i
 8003e7c:	b661      	cpsie	f
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	df00      	svc	0
 8003e88:	bf00      	nop
 8003e8a:	0000      	.short	0x0000
 8003e8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop

08003e94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e9a:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <xPortStartScheduler+0x120>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <xPortStartScheduler+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10a      	bne.n	8003eba <xPortStartScheduler+0x26>
        __asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	613b      	str	r3, [r7, #16]
    }
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eba:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <xPortStartScheduler+0x120>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3f      	ldr	r2, [pc, #252]	; (8003fbc <xPortStartScheduler+0x128>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10a      	bne.n	8003eda <xPortStartScheduler+0x46>
        __asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
    }
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003edc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	22ff      	movs	r2, #255	; 0xff
 8003eea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <xPortStartScheduler+0x130>)
 8003f00:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f02:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f08:	e009      	b.n	8003f1e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	4a2d      	ldr	r2, [pc, #180]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f12:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b80      	cmp	r3, #128	; 0x80
 8003f28:	d0ef      	beq.n	8003f0a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f2a:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1c3 0307 	rsb	r3, r3, #7
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d00a      	beq.n	8003f4c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60bb      	str	r3, [r7, #8]
    }
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f54:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f60:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f6a:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <xPortStartScheduler+0x138>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <xPortStartScheduler+0x138>)
 8003f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <xPortStartScheduler+0x138>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <xPortStartScheduler+0x138>)
 8003f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f82:	f000 f8db 	bl	800413c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <xPortStartScheduler+0x13c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f8c:	f000 f8f0 	bl	8004170 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <xPortStartScheduler+0x140>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <xPortStartScheduler+0x140>)
 8003f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f9c:	f7ff ff64 	bl	8003e68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003fa0:	f7fe feee 	bl	8002d80 <vTaskSwitchContext>
    prvTaskExitError();
 8003fa4:	f7ff ff1a 	bl	8003ddc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	e000ed00 	.word	0xe000ed00
 8003fb8:	410fc271 	.word	0x410fc271
 8003fbc:	410fc270 	.word	0x410fc270
 8003fc0:	e000e400 	.word	0xe000e400
 8003fc4:	20000184 	.word	0x20000184
 8003fc8:	20000188 	.word	0x20000188
 8003fcc:	e000ed20 	.word	0xe000ed20
 8003fd0:	20000010 	.word	0x20000010
 8003fd4:	e000ef34 	.word	0xe000ef34

08003fd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
        __asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
    }
 8003ff0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <vPortEnterCritical+0x58>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <vPortEnterCritical+0x58>)
 8003ffa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <vPortEnterCritical+0x58>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10f      	bne.n	8004024 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <vPortEnterCritical+0x5c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <vPortEnterCritical+0x4c>
        __asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	603b      	str	r3, [r7, #0]
    }
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <vPortEnterCritical+0x4a>
    }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000010 	.word	0x20000010
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <vPortExitCritical+0x50>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <vPortExitCritical+0x24>
        __asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	607b      	str	r3, [r7, #4]
    }
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <vPortExitCritical+0x50>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3b01      	subs	r3, #1
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <vPortExitCritical+0x50>)
 8004064:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <vPortExitCritical+0x50>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <vPortExitCritical+0x42>
 800406e:	2300      	movs	r3, #0
 8004070:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004078:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000010 	.word	0x20000010
 800408c:	00000000 	.word	0x00000000

08004090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004090:	f3ef 8009 	mrs	r0, PSP
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <pxCurrentTCBConst>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	f01e 0f10 	tst.w	lr, #16
 80040a0:	bf08      	it	eq
 80040a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040aa:	6010      	str	r0, [r2, #0]
 80040ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040b4:	f380 8811 	msr	BASEPRI, r0
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f7fe fe5e 	bl	8002d80 <vTaskSwitchContext>
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f380 8811 	msr	BASEPRI, r0
 80040cc:	bc09      	pop	{r0, r3}
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	6808      	ldr	r0, [r1, #0]
 80040d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d6:	f01e 0f10 	tst.w	lr, #16
 80040da:	bf08      	it	eq
 80040dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040e0:	f380 8809 	msr	PSP, r0
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	f3af 8000 	nop.w

080040f0 <pxCurrentTCBConst>:
 80040f0:	20000044 	.word	0x20000044
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop

080040f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
        __asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	607b      	str	r3, [r7, #4]
    }
 8004110:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004112:	f7fe fd1f 	bl	8002b54 <xTaskIncrementTick>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <SysTick_Handler+0x40>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f383 8811 	msr	BASEPRI, r3
    }
 800412e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <vPortSetupTimerInterrupt+0x28>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <vPortSetupTimerInterrupt+0x2c>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <vPortSetupTimerInterrupt+0x30>)
 800414e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004152:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <vPortSetupTimerInterrupt+0x28>)
 8004156:	2207      	movs	r2, #7
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e010 	.word	0xe000e010
 8004168:	e000e018 	.word	0xe000e018
 800416c:	e000e014 	.word	0xe000e014

08004170 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004170:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004180 <vPortEnableVFP+0x10>
 8004174:	6801      	ldr	r1, [r0, #0]
 8004176:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800417a:	6001      	str	r1, [r0, #0]
 800417c:	4770      	bx	lr
 800417e:	0000      	.short	0x0000
 8004180:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004194:	f7fe fbc4 	bl	8002920 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <pvPortMalloc+0x160>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041a0:	f000 f908 	bl	80043b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d012      	beq.n	80041d0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80041aa:	2208      	movs	r2, #8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	3308      	adds	r3, #8
 80041b6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d804      	bhi.n	80041cc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	e001      	b.n	80041d0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db70      	blt.n	80042b8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d06d      	beq.n	80042b8 <pvPortMalloc+0x130>
 80041dc:	4b43      	ldr	r3, [pc, #268]	; (80042ec <pvPortMalloc+0x164>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d868      	bhi.n	80042b8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80041e6:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <pvPortMalloc+0x168>)
 80041e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <pvPortMalloc+0x168>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041f0:	e004      	b.n	80041fc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d903      	bls.n	800420e <pvPortMalloc+0x86>
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f1      	bne.n	80041f2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <pvPortMalloc+0x160>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	429a      	cmp	r2, r3
 8004216:	d04f      	beq.n	80042b8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2208      	movs	r2, #8
 800421e:	4413      	add	r3, r2
 8004220:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1ad2      	subs	r2, r2, r3
 8004232:	2308      	movs	r3, #8
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	429a      	cmp	r2, r3
 8004238:	d91f      	bls.n	800427a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <pvPortMalloc+0xda>
        __asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	613b      	str	r3, [r7, #16]
    }
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	1ad2      	subs	r2, r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f000 f8f9 	bl	800446c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <pvPortMalloc+0x164>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <pvPortMalloc+0x164>)
 8004286:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004288:	4b18      	ldr	r3, [pc, #96]	; (80042ec <pvPortMalloc+0x164>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <pvPortMalloc+0x16c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d203      	bcs.n	800429c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004294:	4b15      	ldr	r3, [pc, #84]	; (80042ec <pvPortMalloc+0x164>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <pvPortMalloc+0x16c>)
 800429a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <pvPortMalloc+0x170>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <pvPortMalloc+0x170>)
 80042b6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80042b8:	f7fe fb40 	bl	800293c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <pvPortMalloc+0x154>
        __asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60fb      	str	r3, [r7, #12]
    }
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <pvPortMalloc+0x152>
    return pvReturn;
 80042dc:	69fb      	ldr	r3, [r7, #28]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3728      	adds	r7, #40	; 0x28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20007994 	.word	0x20007994
 80042ec:	20007998 	.word	0x20007998
 80042f0:	2000798c 	.word	0x2000798c
 80042f4:	2000799c 	.word	0x2000799c
 80042f8:	200079a0 	.word	0x200079a0

080042fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d049      	beq.n	80043a2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800430e:	2308      	movs	r3, #8
 8004310:	425b      	negs	r3, r3
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4413      	add	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	db0a      	blt.n	800433a <vPortFree+0x3e>
        __asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
    }
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <vPortFree+0x5c>
        __asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
    }
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0fdb      	lsrs	r3, r3, #31
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01c      	beq.n	80043a2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d118      	bne.n	80043a2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800437c:	f7fe fad0 	bl	8002920 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <vPortFree+0xb0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4413      	add	r3, r2
 800438a:	4a08      	ldr	r2, [pc, #32]	; (80043ac <vPortFree+0xb0>)
 800438c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800438e:	6938      	ldr	r0, [r7, #16]
 8004390:	f000 f86c 	bl	800446c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <vPortFree+0xb4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <vPortFree+0xb4>)
 800439c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800439e:	f7fe facd 	bl	800293c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20007998 	.word	0x20007998
 80043b0:	200079a4 	.word	0x200079a4

080043b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80043be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <prvHeapInit+0xa4>)
 80043c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3307      	adds	r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <prvHeapInit+0xa4>)
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <prvHeapInit+0xa8>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <prvHeapInit+0xa8>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004400:	2208      	movs	r2, #8
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <prvHeapInit+0xac>)
 8004414:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <prvHeapInit+0xac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <prvHeapInit+0xac>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <prvHeapInit+0xac>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a08      	ldr	r2, [pc, #32]	; (8004464 <prvHeapInit+0xb0>)
 8004442:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <prvHeapInit+0xb4>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	2000018c 	.word	0x2000018c
 800445c:	2000798c 	.word	0x2000798c
 8004460:	20007994 	.word	0x20007994
 8004464:	2000799c 	.word	0x2000799c
 8004468:	20007998 	.word	0x20007998

0800446c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004474:	4b28      	ldr	r3, [pc, #160]	; (8004518 <prvInsertBlockIntoFreeList+0xac>)
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e002      	b.n	8004480 <prvInsertBlockIntoFreeList+0x14>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d8f7      	bhi.n	800447a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d108      	bne.n	80044ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d118      	bne.n	80044f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <prvInsertBlockIntoFreeList+0xb0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d00d      	beq.n	80044ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e008      	b.n	80044fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <prvInsertBlockIntoFreeList+0xb0>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e003      	b.n	80044fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d002      	beq.n	800450a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	2000798c 	.word	0x2000798c
 800451c:	20007994 	.word	0x20007994

08004520 <__libc_init_array>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4d0d      	ldr	r5, [pc, #52]	; (8004558 <__libc_init_array+0x38>)
 8004524:	4c0d      	ldr	r4, [pc, #52]	; (800455c <__libc_init_array+0x3c>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	2600      	movs	r6, #0
 800452c:	42a6      	cmp	r6, r4
 800452e:	d109      	bne.n	8004544 <__libc_init_array+0x24>
 8004530:	4d0b      	ldr	r5, [pc, #44]	; (8004560 <__libc_init_array+0x40>)
 8004532:	4c0c      	ldr	r4, [pc, #48]	; (8004564 <__libc_init_array+0x44>)
 8004534:	f000 f82e 	bl	8004594 <_init>
 8004538:	1b64      	subs	r4, r4, r5
 800453a:	10a4      	asrs	r4, r4, #2
 800453c:	2600      	movs	r6, #0
 800453e:	42a6      	cmp	r6, r4
 8004540:	d105      	bne.n	800454e <__libc_init_array+0x2e>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	f855 3b04 	ldr.w	r3, [r5], #4
 8004548:	4798      	blx	r3
 800454a:	3601      	adds	r6, #1
 800454c:	e7ee      	b.n	800452c <__libc_init_array+0xc>
 800454e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004552:	4798      	blx	r3
 8004554:	3601      	adds	r6, #1
 8004556:	e7f2      	b.n	800453e <__libc_init_array+0x1e>
 8004558:	080045f4 	.word	0x080045f4
 800455c:	080045f4 	.word	0x080045f4
 8004560:	080045f4 	.word	0x080045f4
 8004564:	080045f8 	.word	0x080045f8

08004568 <memcpy>:
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004570:	d100      	bne.n	8004574 <memcpy+0xc>
 8004572:	4770      	bx	lr
 8004574:	b510      	push	{r4, lr}
 8004576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457e:	4291      	cmp	r1, r2
 8004580:	d1f9      	bne.n	8004576 <memcpy+0xe>
 8004582:	bd10      	pop	{r4, pc}

08004584 <memset>:
 8004584:	4402      	add	r2, r0
 8004586:	4603      	mov	r3, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <_init>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr

080045a0 <_fini>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr
